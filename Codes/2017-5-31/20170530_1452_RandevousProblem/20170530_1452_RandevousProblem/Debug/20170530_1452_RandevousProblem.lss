
20170530_1452_RandevousProblem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002a  00800200  00800200  000031dc  2**0
                  ALLOC
  2 .stab         000032d0  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c5e  00000000  00000000  000064ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00007110  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001542  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002aa  00000000  00000000  000086f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085f  00000000  00000000  0000899c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008f8  00000000  00000000  000091fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000610  00000000  00000000  00009af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011db  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 98 00 	jmp	0x130	; 0x130 <__ctors_end>
       4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      14:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_5>
      18:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_6>
      1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      34:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      54:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      58:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      5c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      60:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      64:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      68:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      6c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      70:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      74:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      78:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      7c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      80:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      84:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      88:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      8c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      90:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      94:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      98:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      9c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      a0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      a4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      a8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      ac:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      b0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      b4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      b8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      bc:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      c0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      c4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      c8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      cc:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      d0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      d4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      d8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      dc:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      e0:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	sts	0x46, r19
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	lds	r19, 0xbc
     126:	aa aa       	sts	0x9a, r26
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__ctors_end>:
     130:	11 24       	eor	r1, r1
     132:	1f be       	out	0x3f, r1	; 63
     134:	cf ef       	ldi	r28, 0xFF	; 255
     136:	d1 e2       	ldi	r29, 0x21	; 33
     138:	de bf       	out	0x3e, r29	; 62
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0c bf       	out	0x3c, r16	; 60

00000140 <__do_copy_data>:
     140:	12 e0       	ldi	r17, 0x02	; 2
     142:	a0 e0       	ldi	r26, 0x00	; 0
     144:	b2 e0       	ldi	r27, 0x02	; 2
     146:	e8 e6       	ldi	r30, 0x68	; 104
     148:	f1 e3       	ldi	r31, 0x31	; 49
     14a:	00 e0       	ldi	r16, 0x00	; 0
     14c:	0b bf       	out	0x3b, r16	; 59
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x14>
     150:	07 90       	elpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a0 30       	cpi	r26, 0x00	; 0
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0x10>

0000015a <__do_clear_bss>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b2 e0       	ldi	r27, 0x02	; 2
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	aa 32       	cpi	r26, 0x2A	; 42
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <main>
     16e:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <_exit>

00000172 <__bad_interrupt>:
     172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000176 <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	c0 57       	subi	r28, 0x70	; 112
     184:	d0 40       	sbci	r29, 0x00	; 0
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	a0 e8       	ldi	r26, 0x80	; 128
     196:	bf e3       	ldi	r27, 0x3F	; 63
     198:	89 83       	std	Y+1, r24	; 0x01
     19a:	9a 83       	std	Y+2, r25	; 0x02
     19c:	ab 83       	std	Y+3, r26	; 0x03
     19e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1a0:	69 81       	ldd	r22, Y+1	; 0x01
     1a2:	7a 81       	ldd	r23, Y+2	; 0x02
     1a4:	8b 81       	ldd	r24, Y+3	; 0x03
     1a6:	9c 81       	ldd	r25, Y+4	; 0x04
     1a8:	26 e6       	ldi	r18, 0x66	; 102
     1aa:	36 e6       	ldi	r19, 0x66	; 102
     1ac:	46 e6       	ldi	r20, 0x66	; 102
     1ae:	55 e4       	ldi	r21, 0x45	; 69
     1b0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	8d 83       	std	Y+5, r24	; 0x05
     1ba:	9e 83       	std	Y+6, r25	; 0x06
     1bc:	af 83       	std	Y+7, r26	; 0x07
     1be:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	6d 81       	ldd	r22, Y+5	; 0x05
     1c4:	7e 81       	ldd	r23, Y+6	; 0x06
     1c6:	8f 81       	ldd	r24, Y+7	; 0x07
     1c8:	98 85       	ldd	r25, Y+8	; 0x08
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e8       	ldi	r20, 0x80	; 128
     1d0:	5f e3       	ldi	r21, 0x3F	; 63
     1d2:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     1d6:	88 23       	and	r24, r24
     1d8:	0c f0       	brlt	.+2      	; 0x1dc <lcd_set_4bit+0x66>
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	11 23       	and	r17, r17
     1de:	29 f0       	breq	.+10     	; 0x1ea <lcd_set_4bit+0x74>
		__ticks = 1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	9a 87       	std	Y+10, r25	; 0x0a
     1e6:	89 87       	std	Y+9, r24	; 0x09
     1e8:	46 c0       	rjmp	.+140    	; 0x276 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     1ea:	11 e0       	ldi	r17, 0x01	; 1
     1ec:	6d 81       	ldd	r22, Y+5	; 0x05
     1ee:	7e 81       	ldd	r23, Y+6	; 0x06
     1f0:	8f 81       	ldd	r24, Y+7	; 0x07
     1f2:	98 85       	ldd	r25, Y+8	; 0x08
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	3f ef       	ldi	r19, 0xFF	; 255
     1f8:	4f e7       	ldi	r20, 0x7F	; 127
     1fa:	57 e4       	ldi	r21, 0x47	; 71
     1fc:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     200:	18 16       	cp	r1, r24
     202:	0c f0       	brlt	.+2      	; 0x206 <lcd_set_4bit+0x90>
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	11 23       	and	r17, r17
     208:	61 f1       	breq	.+88     	; 0x262 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     20a:	69 81       	ldd	r22, Y+1	; 0x01
     20c:	7a 81       	ldd	r23, Y+2	; 0x02
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	9c 81       	ldd	r25, Y+4	; 0x04
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e2       	ldi	r20, 0x20	; 32
     218:	51 e4       	ldi	r21, 0x41	; 65
     21a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     21e:	dc 01       	movw	r26, r24
     220:	cb 01       	movw	r24, r22
     222:	bc 01       	movw	r22, r24
     224:	cd 01       	movw	r24, r26
     226:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     22a:	dc 01       	movw	r26, r24
     22c:	cb 01       	movw	r24, r22
     22e:	9a 87       	std	Y+10, r25	; 0x0a
     230:	89 87       	std	Y+9, r24	; 0x09
     232:	12 c0       	rjmp	.+36     	; 0x258 <lcd_set_4bit+0xe2>
     234:	80 e7       	ldi	r24, 0x70	; 112
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	9c 87       	std	Y+12, r25	; 0x0c
     23a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     23c:	8b 85       	ldd	r24, Y+11	; 0x0b
     23e:	9c 85       	ldd	r25, Y+12	; 0x0c
     240:	8c 01       	movw	r16, r24
     242:	c8 01       	movw	r24, r16
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_set_4bit+0xce>
     248:	8c 01       	movw	r16, r24
     24a:	1c 87       	std	Y+12, r17	; 0x0c
     24c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     24e:	89 85       	ldd	r24, Y+9	; 0x09
     250:	9a 85       	ldd	r25, Y+10	; 0x0a
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	9a 87       	std	Y+10, r25	; 0x0a
     256:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     258:	89 85       	ldd	r24, Y+9	; 0x09
     25a:	9a 85       	ldd	r25, Y+10	; 0x0a
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	51 f7       	brne	.-44     	; 0x234 <lcd_set_4bit+0xbe>
     260:	17 c0       	rjmp	.+46     	; 0x290 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     262:	6d 81       	ldd	r22, Y+5	; 0x05
     264:	7e 81       	ldd	r23, Y+6	; 0x06
     266:	8f 81       	ldd	r24, Y+7	; 0x07
     268:	98 85       	ldd	r25, Y+8	; 0x08
     26a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	9a 87       	std	Y+10, r25	; 0x0a
     274:	89 87       	std	Y+9, r24	; 0x09
     276:	89 85       	ldd	r24, Y+9	; 0x09
     278:	9a 85       	ldd	r25, Y+10	; 0x0a
     27a:	9e 87       	std	Y+14, r25	; 0x0e
     27c:	8d 87       	std	Y+13, r24	; 0x0d
     27e:	8d 85       	ldd	r24, Y+13	; 0x0d
     280:	9e 85       	ldd	r25, Y+14	; 0x0e
     282:	8c 01       	movw	r16, r24
     284:	f8 01       	movw	r30, r16
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_set_4bit+0x110>
     28a:	8f 01       	movw	r16, r30
     28c:	1e 87       	std	Y+14, r17	; 0x0e
     28e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	28 e2       	ldi	r18, 0x28	; 40
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	f9 01       	movw	r30, r18
     29a:	20 81       	ld	r18, Z
     29c:	2e 7f       	andi	r18, 0xFE	; 254
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2a2:	88 e2       	ldi	r24, 0x28	; 40
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	28 e2       	ldi	r18, 0x28	; 40
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	2d 7f       	andi	r18, 0xFD	; 253
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2b4:	88 e2       	ldi	r24, 0x28	; 40
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	20 e3       	ldi	r18, 0x30	; 48
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     2be:	88 e2       	ldi	r24, 0x28	; 40
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	28 e2       	ldi	r18, 0x28	; 40
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	24 60       	ori	r18, 0x04	; 4
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	a0 ea       	ldi	r26, 0xA0	; 160
     2d6:	b0 e4       	ldi	r27, 0x40	; 64
     2d8:	8f 87       	std	Y+15, r24	; 0x0f
     2da:	98 8b       	std	Y+16, r25	; 0x10
     2dc:	a9 8b       	std	Y+17, r26	; 0x11
     2de:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2e2:	78 89       	ldd	r23, Y+16	; 0x10
     2e4:	89 89       	ldd	r24, Y+17	; 0x11
     2e6:	9a 89       	ldd	r25, Y+18	; 0x12
     2e8:	26 e6       	ldi	r18, 0x66	; 102
     2ea:	36 e6       	ldi	r19, 0x66	; 102
     2ec:	46 e6       	ldi	r20, 0x66	; 102
     2ee:	55 e4       	ldi	r21, 0x45	; 69
     2f0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	8b 8b       	std	Y+19, r24	; 0x13
     2fa:	9c 8b       	std	Y+20, r25	; 0x14
     2fc:	ad 8b       	std	Y+21, r26	; 0x15
     2fe:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     300:	11 e0       	ldi	r17, 0x01	; 1
     302:	6b 89       	ldd	r22, Y+19	; 0x13
     304:	7c 89       	ldd	r23, Y+20	; 0x14
     306:	8d 89       	ldd	r24, Y+21	; 0x15
     308:	9e 89       	ldd	r25, Y+22	; 0x16
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e8       	ldi	r20, 0x80	; 128
     310:	5f e3       	ldi	r21, 0x3F	; 63
     312:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     316:	88 23       	and	r24, r24
     318:	0c f0       	brlt	.+2      	; 0x31c <lcd_set_4bit+0x1a6>
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	11 23       	and	r17, r17
     31e:	29 f0       	breq	.+10     	; 0x32a <lcd_set_4bit+0x1b4>
		__ticks = 1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	98 8f       	std	Y+24, r25	; 0x18
     326:	8f 8b       	std	Y+23, r24	; 0x17
     328:	46 c0       	rjmp	.+140    	; 0x3b6 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     32a:	11 e0       	ldi	r17, 0x01	; 1
     32c:	6b 89       	ldd	r22, Y+19	; 0x13
     32e:	7c 89       	ldd	r23, Y+20	; 0x14
     330:	8d 89       	ldd	r24, Y+21	; 0x15
     332:	9e 89       	ldd	r25, Y+22	; 0x16
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	4f e7       	ldi	r20, 0x7F	; 127
     33a:	57 e4       	ldi	r21, 0x47	; 71
     33c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     340:	18 16       	cp	r1, r24
     342:	0c f0       	brlt	.+2      	; 0x346 <lcd_set_4bit+0x1d0>
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	11 23       	and	r17, r17
     348:	61 f1       	breq	.+88     	; 0x3a2 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     34a:	6f 85       	ldd	r22, Y+15	; 0x0f
     34c:	78 89       	ldd	r23, Y+16	; 0x10
     34e:	89 89       	ldd	r24, Y+17	; 0x11
     350:	9a 89       	ldd	r25, Y+18	; 0x12
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e2       	ldi	r20, 0x20	; 32
     358:	51 e4       	ldi	r21, 0x41	; 65
     35a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
     36e:	98 8f       	std	Y+24, r25	; 0x18
     370:	8f 8b       	std	Y+23, r24	; 0x17
     372:	12 c0       	rjmp	.+36     	; 0x398 <lcd_set_4bit+0x222>
     374:	80 e7       	ldi	r24, 0x70	; 112
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	9a 8f       	std	Y+26, r25	; 0x1a
     37a:	89 8f       	std	Y+25, r24	; 0x19
     37c:	89 8d       	ldd	r24, Y+25	; 0x19
     37e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     380:	8c 01       	movw	r16, r24
     382:	c8 01       	movw	r24, r16
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <lcd_set_4bit+0x20e>
     388:	8c 01       	movw	r16, r24
     38a:	1a 8f       	std	Y+26, r17	; 0x1a
     38c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     38e:	8f 89       	ldd	r24, Y+23	; 0x17
     390:	98 8d       	ldd	r25, Y+24	; 0x18
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	98 8f       	std	Y+24, r25	; 0x18
     396:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     398:	8f 89       	ldd	r24, Y+23	; 0x17
     39a:	98 8d       	ldd	r25, Y+24	; 0x18
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	51 f7       	brne	.-44     	; 0x374 <lcd_set_4bit+0x1fe>
     3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3a2:	6b 89       	ldd	r22, Y+19	; 0x13
     3a4:	7c 89       	ldd	r23, Y+20	; 0x14
     3a6:	8d 89       	ldd	r24, Y+21	; 0x15
     3a8:	9e 89       	ldd	r25, Y+22	; 0x16
     3aa:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	98 8f       	std	Y+24, r25	; 0x18
     3b4:	8f 8b       	std	Y+23, r24	; 0x17
     3b6:	8f 89       	ldd	r24, Y+23	; 0x17
     3b8:	98 8d       	ldd	r25, Y+24	; 0x18
     3ba:	9c 8f       	std	Y+28, r25	; 0x1c
     3bc:	8b 8f       	std	Y+27, r24	; 0x1b
     3be:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3c2:	8c 01       	movw	r16, r24
     3c4:	f8 01       	movw	r30, r16
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_set_4bit+0x250>
     3ca:	8f 01       	movw	r16, r30
     3cc:	1c 8f       	std	Y+28, r17	; 0x1c
     3ce:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	28 e2       	ldi	r18, 0x28	; 40
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	2b 7f       	andi	r18, 0xFB	; 251
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	a0 e8       	ldi	r26, 0x80	; 128
     3e8:	bf e3       	ldi	r27, 0x3F	; 63
     3ea:	8d 8f       	std	Y+29, r24	; 0x1d
     3ec:	9e 8f       	std	Y+30, r25	; 0x1e
     3ee:	af 8f       	std	Y+31, r26	; 0x1f
     3f0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3f4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3f8:	98 a1       	lds	r25, 0x48
     3fa:	26 e6       	ldi	r18, 0x66	; 102
     3fc:	36 e6       	ldi	r19, 0x66	; 102
     3fe:	46 e6       	ldi	r20, 0x66	; 102
     400:	55 e4       	ldi	r21, 0x45	; 69
     402:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	89 a3       	lds	r24, 0x59
     40c:	9a a3       	lds	r25, 0x5a
     40e:	ab a3       	lds	r26, 0x5b
     410:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     412:	11 e0       	ldi	r17, 0x01	; 1
     414:	69 a1       	lds	r22, 0x49
     416:	7a a1       	lds	r23, 0x4a
     418:	8b a1       	lds	r24, 0x4b
     41a:	9c a1       	lds	r25, 0x4c
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e8       	ldi	r20, 0x80	; 128
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     428:	88 23       	and	r24, r24
     42a:	0c f0       	brlt	.+2      	; 0x42e <lcd_set_4bit+0x2b8>
     42c:	10 e0       	ldi	r17, 0x00	; 0
     42e:	11 23       	and	r17, r17
     430:	29 f0       	breq	.+10     	; 0x43c <lcd_set_4bit+0x2c6>
		__ticks = 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	9e a3       	lds	r25, 0x5e
     438:	8d a3       	lds	r24, 0x5d
     43a:	46 c0       	rjmp	.+140    	; 0x4c8 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     43c:	11 e0       	ldi	r17, 0x01	; 1
     43e:	69 a1       	lds	r22, 0x49
     440:	7a a1       	lds	r23, 0x4a
     442:	8b a1       	lds	r24, 0x4b
     444:	9c a1       	lds	r25, 0x4c
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	3f ef       	ldi	r19, 0xFF	; 255
     44a:	4f e7       	ldi	r20, 0x7F	; 127
     44c:	57 e4       	ldi	r21, 0x47	; 71
     44e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     452:	18 16       	cp	r1, r24
     454:	0c f0       	brlt	.+2      	; 0x458 <lcd_set_4bit+0x2e2>
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	11 23       	and	r17, r17
     45a:	61 f1       	breq	.+88     	; 0x4b4 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     45c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     45e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     460:	8f 8d       	ldd	r24, Y+31	; 0x1f
     462:	98 a1       	lds	r25, 0x48
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e2       	ldi	r20, 0x20	; 32
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	bc 01       	movw	r22, r24
     476:	cd 01       	movw	r24, r26
     478:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     47c:	dc 01       	movw	r26, r24
     47e:	cb 01       	movw	r24, r22
     480:	9e a3       	lds	r25, 0x5e
     482:	8d a3       	lds	r24, 0x5d
     484:	12 c0       	rjmp	.+36     	; 0x4aa <lcd_set_4bit+0x334>
     486:	80 e7       	ldi	r24, 0x70	; 112
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	98 a7       	lds	r25, 0x78
     48c:	8f a3       	lds	r24, 0x5f
     48e:	8f a1       	lds	r24, 0x4f
     490:	98 a5       	lds	r25, 0x68
     492:	8c 01       	movw	r16, r24
     494:	c8 01       	movw	r24, r16
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <lcd_set_4bit+0x320>
     49a:	8c 01       	movw	r16, r24
     49c:	18 a7       	lds	r17, 0x78
     49e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a0:	8d a1       	lds	r24, 0x4d
     4a2:	9e a1       	lds	r25, 0x4e
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	9e a3       	lds	r25, 0x5e
     4a8:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4aa:	8d a1       	lds	r24, 0x4d
     4ac:	9e a1       	lds	r25, 0x4e
     4ae:	00 97       	sbiw	r24, 0x00	; 0
     4b0:	51 f7       	brne	.-44     	; 0x486 <lcd_set_4bit+0x310>
     4b2:	17 c0       	rjmp	.+46     	; 0x4e2 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b4:	69 a1       	lds	r22, 0x49
     4b6:	7a a1       	lds	r23, 0x4a
     4b8:	8b a1       	lds	r24, 0x4b
     4ba:	9c a1       	lds	r25, 0x4c
     4bc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	9e a3       	lds	r25, 0x5e
     4c6:	8d a3       	lds	r24, 0x5d
     4c8:	8d a1       	lds	r24, 0x4d
     4ca:	9e a1       	lds	r25, 0x4e
     4cc:	9a a7       	lds	r25, 0x7a
     4ce:	89 a7       	lds	r24, 0x79
     4d0:	89 a5       	lds	r24, 0x69
     4d2:	9a a5       	lds	r25, 0x6a
     4d4:	8c 01       	movw	r16, r24
     4d6:	f8 01       	movw	r30, r16
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <lcd_set_4bit+0x362>
     4dc:	8f 01       	movw	r16, r30
     4de:	1a a7       	lds	r17, 0x7a
     4e0:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     4e2:	88 e2       	ldi	r24, 0x28	; 40
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	28 e2       	ldi	r18, 0x28	; 40
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	2e 7f       	andi	r18, 0xFE	; 254
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	28 e2       	ldi	r18, 0x28	; 40
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	2d 7f       	andi	r18, 0xFD	; 253
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     506:	88 e2       	ldi	r24, 0x28	; 40
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	20 e3       	ldi	r18, 0x30	; 48
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     510:	88 e2       	ldi	r24, 0x28	; 40
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	28 e2       	ldi	r18, 0x28	; 40
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	24 60       	ori	r18, 0x04	; 4
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 ea       	ldi	r26, 0xA0	; 160
     528:	b0 e4       	ldi	r27, 0x40	; 64
     52a:	8b a7       	lds	r24, 0x7b
     52c:	9c a7       	lds	r25, 0x7c
     52e:	ad a7       	lds	r26, 0x7d
     530:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     532:	6b a5       	lds	r22, 0x6b
     534:	7c a5       	lds	r23, 0x6c
     536:	8d a5       	lds	r24, 0x6d
     538:	9e a5       	lds	r25, 0x6e
     53a:	26 e6       	ldi	r18, 0x66	; 102
     53c:	36 e6       	ldi	r19, 0x66	; 102
     53e:	46 e6       	ldi	r20, 0x66	; 102
     540:	55 e4       	ldi	r21, 0x45	; 69
     542:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	8f a7       	lds	r24, 0x7f
     54c:	98 ab       	sts	0x58, r25
     54e:	a9 ab       	sts	0x59, r26
     550:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     552:	11 e0       	ldi	r17, 0x01	; 1
     554:	6f a5       	lds	r22, 0x6f
     556:	78 a9       	sts	0x48, r23
     558:	89 a9       	sts	0x49, r24
     55a:	9a a9       	sts	0x4a, r25
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e8       	ldi	r20, 0x80	; 128
     562:	5f e3       	ldi	r21, 0x3F	; 63
     564:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     568:	88 23       	and	r24, r24
     56a:	0c f0       	brlt	.+2      	; 0x56e <lcd_set_4bit+0x3f8>
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	11 23       	and	r17, r17
     570:	29 f0       	breq	.+10     	; 0x57c <lcd_set_4bit+0x406>
		__ticks = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9c ab       	sts	0x5c, r25
     578:	8b ab       	sts	0x5b, r24
     57a:	46 c0       	rjmp	.+140    	; 0x608 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     57c:	11 e0       	ldi	r17, 0x01	; 1
     57e:	6f a5       	lds	r22, 0x6f
     580:	78 a9       	sts	0x48, r23
     582:	89 a9       	sts	0x49, r24
     584:	9a a9       	sts	0x4a, r25
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	3f ef       	ldi	r19, 0xFF	; 255
     58a:	4f e7       	ldi	r20, 0x7F	; 127
     58c:	57 e4       	ldi	r21, 0x47	; 71
     58e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     592:	18 16       	cp	r1, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <lcd_set_4bit+0x422>
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	11 23       	and	r17, r17
     59a:	61 f1       	breq	.+88     	; 0x5f4 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     59c:	6b a5       	lds	r22, 0x6b
     59e:	7c a5       	lds	r23, 0x6c
     5a0:	8d a5       	lds	r24, 0x6d
     5a2:	9e a5       	lds	r25, 0x6e
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e2       	ldi	r20, 0x20	; 32
     5aa:	51 e4       	ldi	r21, 0x41	; 65
     5ac:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	bc 01       	movw	r22, r24
     5b6:	cd 01       	movw	r24, r26
     5b8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	9c ab       	sts	0x5c, r25
     5c2:	8b ab       	sts	0x5b, r24
     5c4:	12 c0       	rjmp	.+36     	; 0x5ea <lcd_set_4bit+0x474>
     5c6:	80 e7       	ldi	r24, 0x70	; 112
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	9e ab       	sts	0x5e, r25
     5cc:	8d ab       	sts	0x5d, r24
     5ce:	8d a9       	sts	0x4d, r24
     5d0:	9e a9       	sts	0x4e, r25
     5d2:	8c 01       	movw	r16, r24
     5d4:	c8 01       	movw	r24, r16
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_set_4bit+0x460>
     5da:	8c 01       	movw	r16, r24
     5dc:	1e ab       	sts	0x5e, r17
     5de:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e0:	8b a9       	sts	0x4b, r24
     5e2:	9c a9       	sts	0x4c, r25
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	9c ab       	sts	0x5c, r25
     5e8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ea:	8b a9       	sts	0x4b, r24
     5ec:	9c a9       	sts	0x4c, r25
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	51 f7       	brne	.-44     	; 0x5c6 <lcd_set_4bit+0x450>
     5f2:	17 c0       	rjmp	.+46     	; 0x622 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f4:	6f a5       	lds	r22, 0x6f
     5f6:	78 a9       	sts	0x48, r23
     5f8:	89 a9       	sts	0x49, r24
     5fa:	9a a9       	sts	0x4a, r25
     5fc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	9c ab       	sts	0x5c, r25
     606:	8b ab       	sts	0x5b, r24
     608:	8b a9       	sts	0x4b, r24
     60a:	9c a9       	sts	0x4c, r25
     60c:	98 af       	sts	0x78, r25
     60e:	8f ab       	sts	0x5f, r24
     610:	8f a9       	sts	0x4f, r24
     612:	98 ad       	sts	0x68, r25
     614:	8c 01       	movw	r16, r24
     616:	f8 01       	movw	r30, r16
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <lcd_set_4bit+0x4a2>
     61c:	8f 01       	movw	r16, r30
     61e:	18 af       	sts	0x78, r17
     620:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     622:	88 e2       	ldi	r24, 0x28	; 40
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	28 e2       	ldi	r18, 0x28	; 40
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	f9 01       	movw	r30, r18
     62c:	20 81       	ld	r18, Z
     62e:	2b 7f       	andi	r18, 0xFB	; 251
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	a0 e8       	ldi	r26, 0x80	; 128
     63a:	bf e3       	ldi	r27, 0x3F	; 63
     63c:	89 af       	sts	0x79, r24
     63e:	9a af       	sts	0x7a, r25
     640:	ab af       	sts	0x7b, r26
     642:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     644:	69 ad       	sts	0x69, r22
     646:	7a ad       	sts	0x6a, r23
     648:	8b ad       	sts	0x6b, r24
     64a:	9c ad       	sts	0x6c, r25
     64c:	26 e6       	ldi	r18, 0x66	; 102
     64e:	36 e6       	ldi	r19, 0x66	; 102
     650:	46 e6       	ldi	r20, 0x66	; 102
     652:	55 e4       	ldi	r21, 0x45	; 69
     654:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9e 01       	movw	r18, r28
     65e:	23 5c       	subi	r18, 0xC3	; 195
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	f9 01       	movw	r30, r18
     664:	80 83       	st	Z, r24
     666:	91 83       	std	Z+1, r25	; 0x01
     668:	a2 83       	std	Z+2, r26	; 0x02
     66a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     66c:	11 e0       	ldi	r17, 0x01	; 1
     66e:	ce 01       	movw	r24, r28
     670:	cd 96       	adiw	r24, 0x3d	; 61
     672:	fc 01       	movw	r30, r24
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	5f e3       	ldi	r21, 0x3F	; 63
     684:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     688:	88 23       	and	r24, r24
     68a:	0c f0       	brlt	.+2      	; 0x68e <lcd_set_4bit+0x518>
     68c:	10 e0       	ldi	r17, 0x00	; 0
     68e:	11 23       	and	r17, r17
     690:	49 f0       	breq	.+18     	; 0x6a4 <lcd_set_4bit+0x52e>
		__ticks = 1;
     692:	ce 01       	movw	r24, r28
     694:	8f 5b       	subi	r24, 0xBF	; 191
     696:	9f 4f       	sbci	r25, 0xFF	; 255
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	fc 01       	movw	r30, r24
     69e:	31 83       	std	Z+1, r19	; 0x01
     6a0:	20 83       	st	Z, r18
     6a2:	6e c0       	rjmp	.+220    	; 0x780 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     6a4:	11 e0       	ldi	r17, 0x01	; 1
     6a6:	ce 01       	movw	r24, r28
     6a8:	cd 96       	adiw	r24, 0x3d	; 61
     6aa:	fc 01       	movw	r30, r24
     6ac:	60 81       	ld	r22, Z
     6ae:	71 81       	ldd	r23, Z+1	; 0x01
     6b0:	82 81       	ldd	r24, Z+2	; 0x02
     6b2:	93 81       	ldd	r25, Z+3	; 0x03
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	3f ef       	ldi	r19, 0xFF	; 255
     6b8:	4f e7       	ldi	r20, 0x7F	; 127
     6ba:	57 e4       	ldi	r21, 0x47	; 71
     6bc:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     6c0:	18 16       	cp	r1, r24
     6c2:	0c f0       	brlt	.+2      	; 0x6c6 <lcd_set_4bit+0x550>
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	11 23       	and	r17, r17
     6c8:	09 f4       	brne	.+2      	; 0x6cc <lcd_set_4bit+0x556>
     6ca:	49 c0       	rjmp	.+146    	; 0x75e <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6cc:	69 ad       	sts	0x69, r22
     6ce:	7a ad       	sts	0x6a, r23
     6d0:	8b ad       	sts	0x6b, r24
     6d2:	9c ad       	sts	0x6c, r25
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e2       	ldi	r20, 0x20	; 32
     6da:	51 e4       	ldi	r21, 0x41	; 65
     6dc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	8e 01       	movw	r16, r28
     6e6:	0f 5b       	subi	r16, 0xBF	; 191
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	f8 01       	movw	r30, r16
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	27 c0       	rjmp	.+78     	; 0x74c <lcd_set_4bit+0x5d6>
     6fe:	ce 01       	movw	r24, r28
     700:	8d 5b       	subi	r24, 0xBD	; 189
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	20 e7       	ldi	r18, 0x70	; 112
     706:	31 e0       	ldi	r19, 0x01	; 1
     708:	fc 01       	movw	r30, r24
     70a:	31 83       	std	Z+1, r19	; 0x01
     70c:	20 83       	st	Z, r18
     70e:	ce 01       	movw	r24, r28
     710:	8d 5b       	subi	r24, 0xBD	; 189
     712:	9f 4f       	sbci	r25, 0xFF	; 255
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	8c 01       	movw	r16, r24
     71c:	c8 01       	movw	r24, r16
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <lcd_set_4bit+0x5a8>
     722:	8c 01       	movw	r16, r24
     724:	ce 01       	movw	r24, r28
     726:	8d 5b       	subi	r24, 0xBD	; 189
     728:	9f 4f       	sbci	r25, 0xFF	; 255
     72a:	fc 01       	movw	r30, r24
     72c:	11 83       	std	Z+1, r17	; 0x01
     72e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     730:	ce 01       	movw	r24, r28
     732:	8f 5b       	subi	r24, 0xBF	; 191
     734:	9f 4f       	sbci	r25, 0xFF	; 255
     736:	9e 01       	movw	r18, r28
     738:	2f 5b       	subi	r18, 0xBF	; 191
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	31 81       	ldd	r19, Z+1	; 0x01
     742:	21 50       	subi	r18, 0x01	; 1
     744:	30 40       	sbci	r19, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74c:	ce 01       	movw	r24, r28
     74e:	8f 5b       	subi	r24, 0xBF	; 191
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	89 f6       	brne	.-94     	; 0x6fe <lcd_set_4bit+0x588>
     75c:	2e c0       	rjmp	.+92     	; 0x7ba <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     75e:	8e 01       	movw	r16, r28
     760:	0f 5b       	subi	r16, 0xBF	; 191
     762:	1f 4f       	sbci	r17, 0xFF	; 255
     764:	ce 01       	movw	r24, r28
     766:	cd 96       	adiw	r24, 0x3d	; 61
     768:	fc 01       	movw	r30, r24
     76a:	60 81       	ld	r22, Z
     76c:	71 81       	ldd	r23, Z+1	; 0x01
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	f8 01       	movw	r30, r16
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24
     780:	ce 01       	movw	r24, r28
     782:	8b 5b       	subi	r24, 0xBB	; 187
     784:	9f 4f       	sbci	r25, 0xFF	; 255
     786:	9e 01       	movw	r18, r28
     788:	2f 5b       	subi	r18, 0xBF	; 191
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	f9 01       	movw	r30, r18
     78e:	20 81       	ld	r18, Z
     790:	31 81       	ldd	r19, Z+1	; 0x01
     792:	fc 01       	movw	r30, r24
     794:	31 83       	std	Z+1, r19	; 0x01
     796:	20 83       	st	Z, r18
     798:	ce 01       	movw	r24, r28
     79a:	8b 5b       	subi	r24, 0xBB	; 187
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	8c 01       	movw	r16, r24
     7a6:	c8 01       	movw	r24, r16
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <lcd_set_4bit+0x632>
     7ac:	8c 01       	movw	r16, r24
     7ae:	ce 01       	movw	r24, r28
     7b0:	8b 5b       	subi	r24, 0xBB	; 187
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
     7b4:	fc 01       	movw	r30, r24
     7b6:	11 83       	std	Z+1, r17	; 0x01
     7b8:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7ba:	88 e2       	ldi	r24, 0x28	; 40
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	28 e2       	ldi	r18, 0x28	; 40
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	20 81       	ld	r18, Z
     7c6:	2e 7f       	andi	r18, 0xFE	; 254
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7cc:	88 e2       	ldi	r24, 0x28	; 40
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	28 e2       	ldi	r18, 0x28	; 40
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	2d 7f       	andi	r18, 0xFD	; 253
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     7de:	88 e2       	ldi	r24, 0x28	; 40
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	20 e3       	ldi	r18, 0x30	; 48
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     7e8:	88 e2       	ldi	r24, 0x28	; 40
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	28 e2       	ldi	r18, 0x28	; 40
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	24 60       	ori	r18, 0x04	; 4
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
     7fa:	9e 01       	movw	r18, r28
     7fc:	29 5b       	subi	r18, 0xB9	; 185
     7fe:	3f 4f       	sbci	r19, 0xFF	; 255
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	a0 ea       	ldi	r26, 0xA0	; 160
     806:	b0 e4       	ldi	r27, 0x40	; 64
     808:	f9 01       	movw	r30, r18
     80a:	80 83       	st	Z, r24
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	a2 83       	std	Z+2, r26	; 0x02
     810:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     812:	8e 01       	movw	r16, r28
     814:	05 5b       	subi	r16, 0xB5	; 181
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	ce 01       	movw	r24, r28
     81a:	89 5b       	subi	r24, 0xB9	; 185
     81c:	9f 4f       	sbci	r25, 0xFF	; 255
     81e:	fc 01       	movw	r30, r24
     820:	60 81       	ld	r22, Z
     822:	71 81       	ldd	r23, Z+1	; 0x01
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	26 e6       	ldi	r18, 0x66	; 102
     82a:	36 e6       	ldi	r19, 0x66	; 102
     82c:	46 e6       	ldi	r20, 0x66	; 102
     82e:	55 e4       	ldi	r21, 0x45	; 69
     830:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	f8 01       	movw	r30, r16
     83a:	80 83       	st	Z, r24
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	a2 83       	std	Z+2, r26	; 0x02
     840:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     842:	ce 01       	movw	r24, r28
     844:	85 5b       	subi	r24, 0xB5	; 181
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	11 e0       	ldi	r17, 0x01	; 1
     84a:	fc 01       	movw	r30, r24
     84c:	60 81       	ld	r22, Z
     84e:	71 81       	ldd	r23, Z+1	; 0x01
     850:	82 81       	ldd	r24, Z+2	; 0x02
     852:	93 81       	ldd	r25, Z+3	; 0x03
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	5f e3       	ldi	r21, 0x3F	; 63
     85c:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	0c f0       	brlt	.+2      	; 0x866 <lcd_set_4bit+0x6f0>
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	11 23       	and	r17, r17
     868:	49 f0       	breq	.+18     	; 0x87c <lcd_set_4bit+0x706>
		__ticks = 1;
     86a:	ce 01       	movw	r24, r28
     86c:	81 5b       	subi	r24, 0xB1	; 177
     86e:	9f 4f       	sbci	r25, 0xFF	; 255
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	31 83       	std	Z+1, r19	; 0x01
     878:	20 83       	st	Z, r18
     87a:	74 c0       	rjmp	.+232    	; 0x964 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     87c:	ce 01       	movw	r24, r28
     87e:	85 5b       	subi	r24, 0xB5	; 181
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	11 e0       	ldi	r17, 0x01	; 1
     884:	fc 01       	movw	r30, r24
     886:	60 81       	ld	r22, Z
     888:	71 81       	ldd	r23, Z+1	; 0x01
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	93 81       	ldd	r25, Z+3	; 0x03
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	3f ef       	ldi	r19, 0xFF	; 255
     892:	4f e7       	ldi	r20, 0x7F	; 127
     894:	57 e4       	ldi	r21, 0x47	; 71
     896:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <lcd_set_4bit+0x72a>
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	11 23       	and	r17, r17
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <lcd_set_4bit+0x730>
     8a4:	4d c0       	rjmp	.+154    	; 0x940 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a6:	ce 01       	movw	r24, r28
     8a8:	89 5b       	subi	r24, 0xB9	; 185
     8aa:	9f 4f       	sbci	r25, 0xFF	; 255
     8ac:	fc 01       	movw	r30, r24
     8ae:	60 81       	ld	r22, Z
     8b0:	71 81       	ldd	r23, Z+1	; 0x01
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	93 81       	ldd	r25, Z+3	; 0x03
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e2       	ldi	r20, 0x20	; 32
     8bc:	51 e4       	ldi	r21, 0x41	; 65
     8be:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	8e 01       	movw	r16, r28
     8c8:	01 5b       	subi	r16, 0xB1	; 177
     8ca:	1f 4f       	sbci	r17, 0xFF	; 255
     8cc:	bc 01       	movw	r22, r24
     8ce:	cd 01       	movw	r24, r26
     8d0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	f8 01       	movw	r30, r16
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	27 c0       	rjmp	.+78     	; 0x92e <lcd_set_4bit+0x7b8>
     8e0:	ce 01       	movw	r24, r28
     8e2:	8f 5a       	subi	r24, 0xAF	; 175
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	20 e7       	ldi	r18, 0x70	; 112
     8e8:	31 e0       	ldi	r19, 0x01	; 1
     8ea:	fc 01       	movw	r30, r24
     8ec:	31 83       	std	Z+1, r19	; 0x01
     8ee:	20 83       	st	Z, r18
     8f0:	ce 01       	movw	r24, r28
     8f2:	8f 5a       	subi	r24, 0xAF	; 175
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	fc 01       	movw	r30, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	8c 01       	movw	r16, r24
     8fe:	c8 01       	movw	r24, r16
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <lcd_set_4bit+0x78a>
     904:	8c 01       	movw	r16, r24
     906:	ce 01       	movw	r24, r28
     908:	8f 5a       	subi	r24, 0xAF	; 175
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	fc 01       	movw	r30, r24
     90e:	11 83       	std	Z+1, r17	; 0x01
     910:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	ce 01       	movw	r24, r28
     914:	81 5b       	subi	r24, 0xB1	; 177
     916:	9f 4f       	sbci	r25, 0xFF	; 255
     918:	9e 01       	movw	r18, r28
     91a:	21 5b       	subi	r18, 0xB1	; 177
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	31 81       	ldd	r19, Z+1	; 0x01
     924:	21 50       	subi	r18, 0x01	; 1
     926:	30 40       	sbci	r19, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	31 83       	std	Z+1, r19	; 0x01
     92c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92e:	ce 01       	movw	r24, r28
     930:	81 5b       	subi	r24, 0xB1	; 177
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	fc 01       	movw	r30, r24
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	89 f6       	brne	.-94     	; 0x8e0 <lcd_set_4bit+0x76a>
     93e:	2f c0       	rjmp	.+94     	; 0x99e <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     940:	8e 01       	movw	r16, r28
     942:	01 5b       	subi	r16, 0xB1	; 177
     944:	1f 4f       	sbci	r17, 0xFF	; 255
     946:	ce 01       	movw	r24, r28
     948:	85 5b       	subi	r24, 0xB5	; 181
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	60 81       	ld	r22, Z
     950:	71 81       	ldd	r23, Z+1	; 0x01
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	93 81       	ldd	r25, Z+3	; 0x03
     956:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	f8 01       	movw	r30, r16
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	80 83       	st	Z, r24
     964:	ce 01       	movw	r24, r28
     966:	8d 5a       	subi	r24, 0xAD	; 173
     968:	9f 4f       	sbci	r25, 0xFF	; 255
     96a:	9e 01       	movw	r18, r28
     96c:	21 5b       	subi	r18, 0xB1	; 177
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	f9 01       	movw	r30, r18
     972:	20 81       	ld	r18, Z
     974:	31 81       	ldd	r19, Z+1	; 0x01
     976:	fc 01       	movw	r30, r24
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
     97c:	ce 01       	movw	r24, r28
     97e:	8d 5a       	subi	r24, 0xAD	; 173
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	fc 01       	movw	r30, r24
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	8c 01       	movw	r16, r24
     98a:	c8 01       	movw	r24, r16
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <lcd_set_4bit+0x816>
     990:	8c 01       	movw	r16, r24
     992:	ce 01       	movw	r24, r28
     994:	8d 5a       	subi	r24, 0xAD	; 173
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	11 83       	std	Z+1, r17	; 0x01
     99c:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     99e:	88 e2       	ldi	r24, 0x28	; 40
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	28 e2       	ldi	r18, 0x28	; 40
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	2b 7f       	andi	r18, 0xFB	; 251
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	9e 01       	movw	r18, r28
     9b2:	2b 5a       	subi	r18, 0xAB	; 171
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e8       	ldi	r26, 0x80	; 128
     9bc:	bf e3       	ldi	r27, 0x3F	; 63
     9be:	f9 01       	movw	r30, r18
     9c0:	80 83       	st	Z, r24
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	a2 83       	std	Z+2, r26	; 0x02
     9c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     9c8:	8e 01       	movw	r16, r28
     9ca:	07 5a       	subi	r16, 0xA7	; 167
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	ce 01       	movw	r24, r28
     9d0:	8b 5a       	subi	r24, 0xAB	; 171
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	fc 01       	movw	r30, r24
     9d6:	60 81       	ld	r22, Z
     9d8:	71 81       	ldd	r23, Z+1	; 0x01
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	93 81       	ldd	r25, Z+3	; 0x03
     9de:	26 e6       	ldi	r18, 0x66	; 102
     9e0:	36 e6       	ldi	r19, 0x66	; 102
     9e2:	46 e6       	ldi	r20, 0x66	; 102
     9e4:	55 e4       	ldi	r21, 0x45	; 69
     9e6:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 83       	st	Z, r24
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	a2 83       	std	Z+2, r26	; 0x02
     9f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9f8:	ce 01       	movw	r24, r28
     9fa:	87 5a       	subi	r24, 0xA7	; 167
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	11 e0       	ldi	r17, 0x01	; 1
     a00:	fc 01       	movw	r30, r24
     a02:	60 81       	ld	r22, Z
     a04:	71 81       	ldd	r23, Z+1	; 0x01
     a06:	82 81       	ldd	r24, Z+2	; 0x02
     a08:	93 81       	ldd	r25, Z+3	; 0x03
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e8       	ldi	r20, 0x80	; 128
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	0c f0       	brlt	.+2      	; 0xa1c <lcd_set_4bit+0x8a6>
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	11 23       	and	r17, r17
     a1e:	49 f0       	breq	.+18     	; 0xa32 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     a20:	ce 01       	movw	r24, r28
     a22:	83 5a       	subi	r24, 0xA3	; 163
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	31 83       	std	Z+1, r19	; 0x01
     a2e:	20 83       	st	Z, r18
     a30:	74 c0       	rjmp	.+232    	; 0xb1a <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     a32:	ce 01       	movw	r24, r28
     a34:	87 5a       	subi	r24, 0xA7	; 167
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	11 e0       	ldi	r17, 0x01	; 1
     a3a:	fc 01       	movw	r30, r24
     a3c:	60 81       	ld	r22, Z
     a3e:	71 81       	ldd	r23, Z+1	; 0x01
     a40:	82 81       	ldd	r24, Z+2	; 0x02
     a42:	93 81       	ldd	r25, Z+3	; 0x03
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	3f ef       	ldi	r19, 0xFF	; 255
     a48:	4f e7       	ldi	r20, 0x7F	; 127
     a4a:	57 e4       	ldi	r21, 0x47	; 71
     a4c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     a50:	18 16       	cp	r1, r24
     a52:	0c f0       	brlt	.+2      	; 0xa56 <lcd_set_4bit+0x8e0>
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	11 23       	and	r17, r17
     a58:	09 f4       	brne	.+2      	; 0xa5c <lcd_set_4bit+0x8e6>
     a5a:	4d c0       	rjmp	.+154    	; 0xaf6 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5c:	ce 01       	movw	r24, r28
     a5e:	8b 5a       	subi	r24, 0xAB	; 171
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	fc 01       	movw	r30, r24
     a64:	60 81       	ld	r22, Z
     a66:	71 81       	ldd	r23, Z+1	; 0x01
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	93 81       	ldd	r25, Z+3	; 0x03
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	51 e4       	ldi	r21, 0x41	; 65
     a74:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	8e 01       	movw	r16, r28
     a7e:	03 5a       	subi	r16, 0xA3	; 163
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	bc 01       	movw	r22, r24
     a84:	cd 01       	movw	r24, r26
     a86:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	f8 01       	movw	r30, r16
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	27 c0       	rjmp	.+78     	; 0xae4 <lcd_set_4bit+0x96e>
     a96:	ce 01       	movw	r24, r28
     a98:	81 5a       	subi	r24, 0xA1	; 161
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	20 e7       	ldi	r18, 0x70	; 112
     a9e:	31 e0       	ldi	r19, 0x01	; 1
     aa0:	fc 01       	movw	r30, r24
     aa2:	31 83       	std	Z+1, r19	; 0x01
     aa4:	20 83       	st	Z, r18
     aa6:	ce 01       	movw	r24, r28
     aa8:	81 5a       	subi	r24, 0xA1	; 161
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	8c 01       	movw	r16, r24
     ab4:	c8 01       	movw	r24, r16
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <lcd_set_4bit+0x940>
     aba:	8c 01       	movw	r16, r24
     abc:	ce 01       	movw	r24, r28
     abe:	81 5a       	subi	r24, 0xA1	; 161
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	fc 01       	movw	r30, r24
     ac4:	11 83       	std	Z+1, r17	; 0x01
     ac6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac8:	ce 01       	movw	r24, r28
     aca:	83 5a       	subi	r24, 0xA3	; 163
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
     ace:	9e 01       	movw	r18, r28
     ad0:	23 5a       	subi	r18, 0xA3	; 163
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	31 81       	ldd	r19, Z+1	; 0x01
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	30 40       	sbci	r19, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	31 83       	std	Z+1, r19	; 0x01
     ae2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae4:	ce 01       	movw	r24, r28
     ae6:	83 5a       	subi	r24, 0xA3	; 163
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	89 f6       	brne	.-94     	; 0xa96 <lcd_set_4bit+0x920>
     af4:	2f c0       	rjmp	.+94     	; 0xb54 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af6:	8e 01       	movw	r16, r28
     af8:	03 5a       	subi	r16, 0xA3	; 163
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	ce 01       	movw	r24, r28
     afe:	87 5a       	subi	r24, 0xA7	; 167
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	f8 01       	movw	r30, r16
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
     b1a:	ce 01       	movw	r24, r28
     b1c:	8f 59       	subi	r24, 0x9F	; 159
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	9e 01       	movw	r18, r28
     b22:	23 5a       	subi	r18, 0xA3	; 163
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	31 81       	ldd	r19, Z+1	; 0x01
     b2c:	fc 01       	movw	r30, r24
     b2e:	31 83       	std	Z+1, r19	; 0x01
     b30:	20 83       	st	Z, r18
     b32:	ce 01       	movw	r24, r28
     b34:	8f 59       	subi	r24, 0x9F	; 159
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	fc 01       	movw	r30, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	8c 01       	movw	r16, r24
     b40:	c8 01       	movw	r24, r16
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <lcd_set_4bit+0x9cc>
     b46:	8c 01       	movw	r16, r24
     b48:	ce 01       	movw	r24, r28
     b4a:	8f 59       	subi	r24, 0x9F	; 159
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	11 83       	std	Z+1, r17	; 0x01
     b52:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b54:	88 e2       	ldi	r24, 0x28	; 40
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	28 e2       	ldi	r18, 0x28	; 40
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	2e 7f       	andi	r18, 0xFE	; 254
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b66:	88 e2       	ldi	r24, 0x28	; 40
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	28 e2       	ldi	r18, 0x28	; 40
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	2d 7f       	andi	r18, 0xFD	; 253
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     b78:	88 e2       	ldi	r24, 0x28	; 40
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	20 e2       	ldi	r18, 0x20	; 32
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b82:	88 e2       	ldi	r24, 0x28	; 40
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	28 e2       	ldi	r18, 0x28	; 40
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	24 60       	ori	r18, 0x04	; 4
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	9e 01       	movw	r18, r28
     b96:	2d 59       	subi	r18, 0x9D	; 157
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 ea       	ldi	r26, 0xA0	; 160
     ba0:	b0 e4       	ldi	r27, 0x40	; 64
     ba2:	f9 01       	movw	r30, r18
     ba4:	80 83       	st	Z, r24
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	a2 83       	std	Z+2, r26	; 0x02
     baa:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     bac:	8e 01       	movw	r16, r28
     bae:	09 59       	subi	r16, 0x99	; 153
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	ce 01       	movw	r24, r28
     bb4:	8d 59       	subi	r24, 0x9D	; 157
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	26 e6       	ldi	r18, 0x66	; 102
     bc4:	36 e6       	ldi	r19, 0x66	; 102
     bc6:	46 e6       	ldi	r20, 0x66	; 102
     bc8:	55 e4       	ldi	r21, 0x45	; 69
     bca:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 83       	st	Z, r24
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	a2 83       	std	Z+2, r26	; 0x02
     bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bdc:	ce 01       	movw	r24, r28
     bde:	89 59       	subi	r24, 0x99	; 153
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	11 e0       	ldi	r17, 0x01	; 1
     be4:	fc 01       	movw	r30, r24
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5f e3       	ldi	r21, 0x3F	; 63
     bf6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <lcd_set_4bit+0xa8a>
     bfe:	10 e0       	ldi	r17, 0x00	; 0
     c00:	11 23       	and	r17, r17
     c02:	49 f0       	breq	.+18     	; 0xc16 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     c04:	ce 01       	movw	r24, r28
     c06:	85 59       	subi	r24, 0x95	; 149
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	31 83       	std	Z+1, r19	; 0x01
     c12:	20 83       	st	Z, r18
     c14:	74 c0       	rjmp	.+232    	; 0xcfe <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     c16:	ce 01       	movw	r24, r28
     c18:	89 59       	subi	r24, 0x99	; 153
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	11 e0       	ldi	r17, 0x01	; 1
     c1e:	fc 01       	movw	r30, r24
     c20:	60 81       	ld	r22, Z
     c22:	71 81       	ldd	r23, Z+1	; 0x01
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f e7       	ldi	r20, 0x7F	; 127
     c2e:	57 e4       	ldi	r21, 0x47	; 71
     c30:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     c34:	18 16       	cp	r1, r24
     c36:	0c f0       	brlt	.+2      	; 0xc3a <lcd_set_4bit+0xac4>
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	11 23       	and	r17, r17
     c3c:	09 f4       	brne	.+2      	; 0xc40 <lcd_set_4bit+0xaca>
     c3e:	4d c0       	rjmp	.+154    	; 0xcda <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c40:	ce 01       	movw	r24, r28
     c42:	8d 59       	subi	r24, 0x9D	; 157
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	fc 01       	movw	r30, r24
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8e 01       	movw	r16, r28
     c62:	05 59       	subi	r16, 0x95	; 149
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	f8 01       	movw	r30, r16
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
     c78:	27 c0       	rjmp	.+78     	; 0xcc8 <lcd_set_4bit+0xb52>
     c7a:	ce 01       	movw	r24, r28
     c7c:	83 59       	subi	r24, 0x93	; 147
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	20 e7       	ldi	r18, 0x70	; 112
     c82:	31 e0       	ldi	r19, 0x01	; 1
     c84:	fc 01       	movw	r30, r24
     c86:	31 83       	std	Z+1, r19	; 0x01
     c88:	20 83       	st	Z, r18
     c8a:	ce 01       	movw	r24, r28
     c8c:	83 59       	subi	r24, 0x93	; 147
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	8c 01       	movw	r16, r24
     c98:	c8 01       	movw	r24, r16
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_set_4bit+0xb24>
     c9e:	8c 01       	movw	r16, r24
     ca0:	ce 01       	movw	r24, r28
     ca2:	83 59       	subi	r24, 0x93	; 147
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	11 83       	std	Z+1, r17	; 0x01
     caa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cac:	ce 01       	movw	r24, r28
     cae:	85 59       	subi	r24, 0x95	; 149
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	9e 01       	movw	r18, r28
     cb4:	25 59       	subi	r18, 0x95	; 149
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	21 50       	subi	r18, 0x01	; 1
     cc0:	30 40       	sbci	r19, 0x00	; 0
     cc2:	fc 01       	movw	r30, r24
     cc4:	31 83       	std	Z+1, r19	; 0x01
     cc6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc8:	ce 01       	movw	r24, r28
     cca:	85 59       	subi	r24, 0x95	; 149
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	fc 01       	movw	r30, r24
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	89 f6       	brne	.-94     	; 0xc7a <lcd_set_4bit+0xb04>
     cd8:	2f c0       	rjmp	.+94     	; 0xd38 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cda:	8e 01       	movw	r16, r28
     cdc:	05 59       	subi	r16, 0x95	; 149
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	ce 01       	movw	r24, r28
     ce2:	89 59       	subi	r24, 0x99	; 153
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	f8 01       	movw	r30, r16
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
     cfe:	ce 01       	movw	r24, r28
     d00:	81 59       	subi	r24, 0x91	; 145
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	9e 01       	movw	r18, r28
     d06:	25 59       	subi	r18, 0x95	; 149
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	fc 01       	movw	r30, r24
     d12:	31 83       	std	Z+1, r19	; 0x01
     d14:	20 83       	st	Z, r18
     d16:	ce 01       	movw	r24, r28
     d18:	81 59       	subi	r24, 0x91	; 145
     d1a:	9f 4f       	sbci	r25, 0xFF	; 255
     d1c:	fc 01       	movw	r30, r24
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	8c 01       	movw	r16, r24
     d24:	c8 01       	movw	r24, r16
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <lcd_set_4bit+0xbb0>
     d2a:	8c 01       	movw	r16, r24
     d2c:	ce 01       	movw	r24, r28
     d2e:	81 59       	subi	r24, 0x91	; 145
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	fc 01       	movw	r30, r24
     d34:	11 83       	std	Z+1, r17	; 0x01
     d36:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d38:	88 e2       	ldi	r24, 0x28	; 40
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	28 e2       	ldi	r18, 0x28	; 40
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	2b 7f       	andi	r18, 0xFB	; 251
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
}
     d4a:	c0 59       	subi	r28, 0x90	; 144
     d4c:	df 4f       	sbci	r29, 0xFF	; 255
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	08 95       	ret

00000d62 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	2e 97       	sbiw	r28, 0x0e	; 14
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a0 e8       	ldi	r26, 0x80	; 128
     d80:	bf e3       	ldi	r27, 0x3F	; 63
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	ab 83       	std	Y+3, r26	; 0x03
     d88:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d8a:	69 81       	ldd	r22, Y+1	; 0x01
     d8c:	7a 81       	ldd	r23, Y+2	; 0x02
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	26 e6       	ldi	r18, 0x66	; 102
     d94:	36 e6       	ldi	r19, 0x66	; 102
     d96:	46 e6       	ldi	r20, 0x66	; 102
     d98:	55 e4       	ldi	r21, 0x45	; 69
     d9a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	af 83       	std	Y+7, r26	; 0x07
     da8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     daa:	11 e0       	ldi	r17, 0x01	; 1
     dac:	6d 81       	ldd	r22, Y+5	; 0x05
     dae:	7e 81       	ldd	r23, Y+6	; 0x06
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	98 85       	ldd	r25, Y+8	; 0x08
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	5f e3       	ldi	r21, 0x3F	; 63
     dbc:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	0c f0       	brlt	.+2      	; 0xdc6 <lcd_init+0x64>
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	11 23       	and	r17, r17
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <lcd_init+0x72>
		__ticks = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9a 87       	std	Y+10, r25	; 0x0a
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	46 c0       	rjmp	.+140    	; 0xe60 <lcd_init+0xfe>
	else if (__tmp > 65535)
     dd4:	11 e0       	ldi	r17, 0x01	; 1
     dd6:	6d 81       	ldd	r22, Y+5	; 0x05
     dd8:	7e 81       	ldd	r23, Y+6	; 0x06
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	3f ef       	ldi	r19, 0xFF	; 255
     de2:	4f e7       	ldi	r20, 0x7F	; 127
     de4:	57 e4       	ldi	r21, 0x47	; 71
     de6:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     dea:	18 16       	cp	r1, r24
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <lcd_init+0x8e>
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	11 23       	and	r17, r17
     df2:	61 f1       	breq	.+88     	; 0xe4c <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	7a 81       	ldd	r23, Y+2	; 0x02
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9a 87       	std	Y+10, r25	; 0x0a
     e1a:	89 87       	std	Y+9, r24	; 0x09
     e1c:	12 c0       	rjmp	.+36     	; 0xe42 <lcd_init+0xe0>
     e1e:	80 e7       	ldi	r24, 0x70	; 112
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	9c 87       	std	Y+12, r25	; 0x0c
     e24:	8b 87       	std	Y+11, r24	; 0x0b
     e26:	8b 85       	ldd	r24, Y+11	; 0x0b
     e28:	9c 85       	ldd	r25, Y+12	; 0x0c
     e2a:	8c 01       	movw	r16, r24
     e2c:	c8 01       	movw	r24, r16
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <lcd_init+0xcc>
     e32:	8c 01       	movw	r16, r24
     e34:	1c 87       	std	Y+12, r17	; 0x0c
     e36:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	9a 87       	std	Y+10, r25	; 0x0a
     e40:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	51 f7       	brne	.-44     	; 0xe1e <lcd_init+0xbc>
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4c:	6d 81       	ldd	r22, Y+5	; 0x05
     e4e:	7e 81       	ldd	r23, Y+6	; 0x06
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	9a 87       	std	Y+10, r25	; 0x0a
     e5e:	89 87       	std	Y+9, r24	; 0x09
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	9e 87       	std	Y+14, r25	; 0x0e
     e66:	8d 87       	std	Y+13, r24	; 0x0d
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	8c 01       	movw	r16, r24
     e6e:	c8 01       	movw	r24, r16
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <lcd_init+0x10e>
     e74:	8c 01       	movw	r16, r24
     e76:	1e 87       	std	Y+14, r17	; 0x0e
     e78:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     e7a:	88 e2       	ldi	r24, 0x28	; 40
     e7c:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     e8c:	8e e0       	ldi	r24, 0x0E	; 14
     e8e:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     e92:	80 e8       	ldi	r24, 0x80	; 128
     e94:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
}
     e98:	2e 96       	adiw	r28, 0x0e	; 14
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	6e 97       	sbiw	r28, 0x1e	; 30
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ec8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eca:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	80 7f       	andi	r24, 0xF0	; 240
     ed0:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     ed2:	88 e2       	ldi	r24, 0x28	; 40
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	28 e2       	ldi	r18, 0x28	; 40
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	2f 70       	andi	r18, 0x0F	; 15
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
	lcd_port |= temp;
     ee4:	88 e2       	ldi	r24, 0x28	; 40
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	28 e2       	ldi	r18, 0x28	; 40
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	30 81       	ld	r19, Z
     ef0:	29 81       	ldd	r18, Y+1	; 0x01
     ef2:	23 2b       	or	r18, r19
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     ef8:	88 e2       	ldi	r24, 0x28	; 40
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	28 e2       	ldi	r18, 0x28	; 40
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	2e 7f       	andi	r18, 0xFE	; 254
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     f0a:	88 e2       	ldi	r24, 0x28	; 40
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	28 e2       	ldi	r18, 0x28	; 40
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	2d 7f       	andi	r18, 0xFD	; 253
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     f1c:	88 e2       	ldi	r24, 0x28	; 40
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	28 e2       	ldi	r18, 0x28	; 40
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	f9 01       	movw	r30, r18
     f26:	20 81       	ld	r18, Z
     f28:	24 60       	ori	r18, 0x04	; 4
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	a0 ea       	ldi	r26, 0xA0	; 160
     f34:	b0 e4       	ldi	r27, 0x40	; 64
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	9b 83       	std	Y+3, r25	; 0x03
     f3a:	ac 83       	std	Y+4, r26	; 0x04
     f3c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     f3e:	6a 81       	ldd	r22, Y+2	; 0x02
     f40:	7b 81       	ldd	r23, Y+3	; 0x03
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	26 e6       	ldi	r18, 0x66	; 102
     f48:	36 e6       	ldi	r19, 0x66	; 102
     f4a:	46 e6       	ldi	r20, 0x66	; 102
     f4c:	55 e4       	ldi	r21, 0x45	; 69
     f4e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	8e 83       	std	Y+6, r24	; 0x06
     f58:	9f 83       	std	Y+7, r25	; 0x07
     f5a:	a8 87       	std	Y+8, r26	; 0x08
     f5c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f5e:	11 e0       	ldi	r17, 0x01	; 1
     f60:	6e 81       	ldd	r22, Y+6	; 0x06
     f62:	7f 81       	ldd	r23, Y+7	; 0x07
     f64:	88 85       	ldd	r24, Y+8	; 0x08
     f66:	99 85       	ldd	r25, Y+9	; 0x09
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
     f74:	88 23       	and	r24, r24
     f76:	0c f0       	brlt	.+2      	; 0xf7a <lcd_wr_command+0xcc>
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	11 23       	and	r17, r17
     f7c:	29 f0       	breq	.+10     	; 0xf88 <lcd_wr_command+0xda>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9b 87       	std	Y+11, r25	; 0x0b
     f84:	8a 87       	std	Y+10, r24	; 0x0a
     f86:	46 c0       	rjmp	.+140    	; 0x1014 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f88:	11 e0       	ldi	r17, 0x01	; 1
     f8a:	6e 81       	ldd	r22, Y+6	; 0x06
     f8c:	7f 81       	ldd	r23, Y+7	; 0x07
     f8e:	88 85       	ldd	r24, Y+8	; 0x08
     f90:	99 85       	ldd	r25, Y+9	; 0x09
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <lcd_wr_command+0xf6>
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	11 23       	and	r17, r17
     fa6:	61 f1       	breq	.+88     	; 0x1000 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	6a 81       	ldd	r22, Y+2	; 0x02
     faa:	7b 81       	ldd	r23, Y+3	; 0x03
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9b 87       	std	Y+11, r25	; 0x0b
     fce:	8a 87       	std	Y+10, r24	; 0x0a
     fd0:	12 c0       	rjmp	.+36     	; 0xff6 <lcd_wr_command+0x148>
     fd2:	80 e7       	ldi	r24, 0x70	; 112
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	9d 87       	std	Y+13, r25	; 0x0d
     fd8:	8c 87       	std	Y+12, r24	; 0x0c
     fda:	8c 85       	ldd	r24, Y+12	; 0x0c
     fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     fde:	8c 01       	movw	r16, r24
     fe0:	c8 01       	movw	r24, r16
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <lcd_wr_command+0x134>
     fe6:	8c 01       	movw	r16, r24
     fe8:	1d 87       	std	Y+13, r17	; 0x0d
     fea:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	8a 85       	ldd	r24, Y+10	; 0x0a
     fee:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	9b 87       	std	Y+11, r25	; 0x0b
     ff4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff8:	9b 85       	ldd	r25, Y+11	; 0x0b
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	51 f7       	brne	.-44     	; 0xfd2 <lcd_wr_command+0x124>
     ffe:	17 c0       	rjmp	.+46     	; 0x102e <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	6e 81       	ldd	r22, Y+6	; 0x06
    1002:	7f 81       	ldd	r23, Y+7	; 0x07
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	99 85       	ldd	r25, Y+9	; 0x09
    1008:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9b 87       	std	Y+11, r25	; 0x0b
    1012:	8a 87       	std	Y+10, r24	; 0x0a
    1014:	8a 85       	ldd	r24, Y+10	; 0x0a
    1016:	9b 85       	ldd	r25, Y+11	; 0x0b
    1018:	9f 87       	std	Y+15, r25	; 0x0f
    101a:	8e 87       	std	Y+14, r24	; 0x0e
    101c:	8e 85       	ldd	r24, Y+14	; 0x0e
    101e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1020:	8c 01       	movw	r16, r24
    1022:	f8 01       	movw	r30, r16
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <lcd_wr_command+0x176>
    1028:	8f 01       	movw	r16, r30
    102a:	1f 87       	std	Y+15, r17	; 0x0f
    102c:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    102e:	88 e2       	ldi	r24, 0x28	; 40
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	28 e2       	ldi	r18, 0x28	; 40
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	f9 01       	movw	r30, r18
    1038:	20 81       	ld	r18, Z
    103a:	2b 7f       	andi	r18, 0xFB	; 251
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
    1040:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1042:	8f 70       	andi	r24, 0x0F	; 15
    1044:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1048:	82 95       	swap	r24
    104a:	80 7f       	andi	r24, 0xF0	; 240
    104c:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    104e:	88 e2       	ldi	r24, 0x28	; 40
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	28 e2       	ldi	r18, 0x28	; 40
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	f9 01       	movw	r30, r18
    1058:	20 81       	ld	r18, Z
    105a:	2f 70       	andi	r18, 0x0F	; 15
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1060:	88 e2       	ldi	r24, 0x28	; 40
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	28 e2       	ldi	r18, 0x28	; 40
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	f9 01       	movw	r30, r18
    106a:	30 81       	ld	r19, Z
    106c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    106e:	23 2b       	or	r18, r19
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1074:	88 e2       	ldi	r24, 0x28	; 40
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	28 e2       	ldi	r18, 0x28	; 40
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	f9 01       	movw	r30, r18
    107e:	20 81       	ld	r18, Z
    1080:	2e 7f       	andi	r18, 0xFE	; 254
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1086:	88 e2       	ldi	r24, 0x28	; 40
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	28 e2       	ldi	r18, 0x28	; 40
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	f9 01       	movw	r30, r18
    1090:	20 81       	ld	r18, Z
    1092:	2d 7f       	andi	r18, 0xFD	; 253
    1094:	fc 01       	movw	r30, r24
    1096:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1098:	88 e2       	ldi	r24, 0x28	; 40
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	28 e2       	ldi	r18, 0x28	; 40
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	24 60       	ori	r18, 0x04	; 4
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 ea       	ldi	r26, 0xA0	; 160
    10b0:	b0 e4       	ldi	r27, 0x40	; 64
    10b2:	88 8b       	std	Y+16, r24	; 0x10
    10b4:	99 8b       	std	Y+17, r25	; 0x11
    10b6:	aa 8b       	std	Y+18, r26	; 0x12
    10b8:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	68 89       	ldd	r22, Y+16	; 0x10
    10bc:	79 89       	ldd	r23, Y+17	; 0x11
    10be:	8a 89       	ldd	r24, Y+18	; 0x12
    10c0:	9b 89       	ldd	r25, Y+19	; 0x13
    10c2:	26 e6       	ldi	r18, 0x66	; 102
    10c4:	36 e6       	ldi	r19, 0x66	; 102
    10c6:	46 e6       	ldi	r20, 0x66	; 102
    10c8:	55 e4       	ldi	r21, 0x45	; 69
    10ca:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8c 8b       	std	Y+20, r24	; 0x14
    10d4:	9d 8b       	std	Y+21, r25	; 0x15
    10d6:	ae 8b       	std	Y+22, r26	; 0x16
    10d8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    10da:	11 e0       	ldi	r17, 0x01	; 1
    10dc:	6c 89       	ldd	r22, Y+20	; 0x14
    10de:	7d 89       	ldd	r23, Y+21	; 0x15
    10e0:	8e 89       	ldd	r24, Y+22	; 0x16
    10e2:	9f 89       	ldd	r25, Y+23	; 0x17
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	0c f0       	brlt	.+2      	; 0x10f6 <lcd_wr_command+0x248>
    10f4:	10 e0       	ldi	r17, 0x00	; 0
    10f6:	11 23       	and	r17, r17
    10f8:	29 f0       	breq	.+10     	; 0x1104 <lcd_wr_command+0x256>
		__ticks = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	99 8f       	std	Y+25, r25	; 0x19
    1100:	88 8f       	std	Y+24, r24	; 0x18
    1102:	46 c0       	rjmp	.+140    	; 0x1190 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    1104:	11 e0       	ldi	r17, 0x01	; 1
    1106:	6c 89       	ldd	r22, Y+20	; 0x14
    1108:	7d 89       	ldd	r23, Y+21	; 0x15
    110a:	8e 89       	ldd	r24, Y+22	; 0x16
    110c:	9f 89       	ldd	r25, Y+23	; 0x17
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
    111a:	18 16       	cp	r1, r24
    111c:	0c f0       	brlt	.+2      	; 0x1120 <lcd_wr_command+0x272>
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	11 23       	and	r17, r17
    1122:	61 f1       	breq	.+88     	; 0x117c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1124:	68 89       	ldd	r22, Y+16	; 0x10
    1126:	79 89       	ldd	r23, Y+17	; 0x11
    1128:	8a 89       	ldd	r24, Y+18	; 0x12
    112a:	9b 89       	ldd	r25, Y+19	; 0x13
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e2       	ldi	r20, 0x20	; 32
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	99 8f       	std	Y+25, r25	; 0x19
    114a:	88 8f       	std	Y+24, r24	; 0x18
    114c:	12 c0       	rjmp	.+36     	; 0x1172 <lcd_wr_command+0x2c4>
    114e:	80 e7       	ldi	r24, 0x70	; 112
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	9b 8f       	std	Y+27, r25	; 0x1b
    1154:	8a 8f       	std	Y+26, r24	; 0x1a
    1156:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1158:	9b 8d       	ldd	r25, Y+27	; 0x1b
    115a:	8c 01       	movw	r16, r24
    115c:	c8 01       	movw	r24, r16
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <lcd_wr_command+0x2b0>
    1162:	8c 01       	movw	r16, r24
    1164:	1b 8f       	std	Y+27, r17	; 0x1b
    1166:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1168:	88 8d       	ldd	r24, Y+24	; 0x18
    116a:	99 8d       	ldd	r25, Y+25	; 0x19
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	99 8f       	std	Y+25, r25	; 0x19
    1170:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	88 8d       	ldd	r24, Y+24	; 0x18
    1174:	99 8d       	ldd	r25, Y+25	; 0x19
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	51 f7       	brne	.-44     	; 0x114e <lcd_wr_command+0x2a0>
    117a:	17 c0       	rjmp	.+46     	; 0x11aa <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117c:	6c 89       	ldd	r22, Y+20	; 0x14
    117e:	7d 89       	ldd	r23, Y+21	; 0x15
    1180:	8e 89       	ldd	r24, Y+22	; 0x16
    1182:	9f 89       	ldd	r25, Y+23	; 0x17
    1184:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	99 8f       	std	Y+25, r25	; 0x19
    118e:	88 8f       	std	Y+24, r24	; 0x18
    1190:	88 8d       	ldd	r24, Y+24	; 0x18
    1192:	99 8d       	ldd	r25, Y+25	; 0x19
    1194:	9d 8f       	std	Y+29, r25	; 0x1d
    1196:	8c 8f       	std	Y+28, r24	; 0x1c
    1198:	8c 8d       	ldd	r24, Y+28	; 0x1c
    119a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    119c:	8c 01       	movw	r16, r24
    119e:	f8 01       	movw	r30, r16
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <lcd_wr_command+0x2f2>
    11a4:	8f 01       	movw	r16, r30
    11a6:	1d 8f       	std	Y+29, r17	; 0x1d
    11a8:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    11aa:	88 e2       	ldi	r24, 0x28	; 40
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	28 e2       	ldi	r18, 0x28	; 40
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	2b 7f       	andi	r18, 0xFB	; 251
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
}
    11bc:	6e 96       	adiw	r28, 0x1e	; 30
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	6e 97       	sbiw	r28, 0x1e	; 30
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ee:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	80 7f       	andi	r24, 0xF0	; 240
    11f4:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11f6:	88 e2       	ldi	r24, 0x28	; 40
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	28 e2       	ldi	r18, 0x28	; 40
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	f9 01       	movw	r30, r18
    1200:	20 81       	ld	r18, Z
    1202:	2f 70       	andi	r18, 0x0F	; 15
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
	lcd_port |= temp;
    1208:	88 e2       	ldi	r24, 0x28	; 40
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	28 e2       	ldi	r18, 0x28	; 40
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	f9 01       	movw	r30, r18
    1212:	30 81       	ld	r19, Z
    1214:	29 81       	ldd	r18, Y+1	; 0x01
    1216:	23 2b       	or	r18, r19
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    121c:	88 e2       	ldi	r24, 0x28	; 40
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	28 e2       	ldi	r18, 0x28	; 40
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	f9 01       	movw	r30, r18
    1226:	20 81       	ld	r18, Z
    1228:	21 60       	ori	r18, 0x01	; 1
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    122e:	88 e2       	ldi	r24, 0x28	; 40
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	28 e2       	ldi	r18, 0x28	; 40
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	20 81       	ld	r18, Z
    123a:	2d 7f       	andi	r18, 0xFD	; 253
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1240:	88 e2       	ldi	r24, 0x28	; 40
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	28 e2       	ldi	r18, 0x28	; 40
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	24 60       	ori	r18, 0x04	; 4
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 ea       	ldi	r26, 0xA0	; 160
    1258:	b0 e4       	ldi	r27, 0x40	; 64
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	9b 83       	std	Y+3, r25	; 0x03
    125e:	ac 83       	std	Y+4, r26	; 0x04
    1260:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1262:	6a 81       	ldd	r22, Y+2	; 0x02
    1264:	7b 81       	ldd	r23, Y+3	; 0x03
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	26 e6       	ldi	r18, 0x66	; 102
    126c:	36 e6       	ldi	r19, 0x66	; 102
    126e:	46 e6       	ldi	r20, 0x66	; 102
    1270:	55 e4       	ldi	r21, 0x45	; 69
    1272:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8e 83       	std	Y+6, r24	; 0x06
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	a8 87       	std	Y+8, r26	; 0x08
    1280:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1282:	11 e0       	ldi	r17, 0x01	; 1
    1284:	6e 81       	ldd	r22, Y+6	; 0x06
    1286:	7f 81       	ldd	r23, Y+7	; 0x07
    1288:	88 85       	ldd	r24, Y+8	; 0x08
    128a:	99 85       	ldd	r25, Y+9	; 0x09
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    1298:	88 23       	and	r24, r24
    129a:	0c f0       	brlt	.+2      	; 0x129e <lcd_wr_char+0xcc>
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	11 23       	and	r17, r17
    12a0:	29 f0       	breq	.+10     	; 0x12ac <lcd_wr_char+0xda>
		__ticks = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9b 87       	std	Y+11, r25	; 0x0b
    12a8:	8a 87       	std	Y+10, r24	; 0x0a
    12aa:	46 c0       	rjmp	.+140    	; 0x1338 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    12ac:	11 e0       	ldi	r17, 0x01	; 1
    12ae:	6e 81       	ldd	r22, Y+6	; 0x06
    12b0:	7f 81       	ldd	r23, Y+7	; 0x07
    12b2:	88 85       	ldd	r24, Y+8	; 0x08
    12b4:	99 85       	ldd	r25, Y+9	; 0x09
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	0c f0       	brlt	.+2      	; 0x12c8 <lcd_wr_char+0xf6>
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	11 23       	and	r17, r17
    12ca:	61 f1       	breq	.+88     	; 0x1324 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	6a 81       	ldd	r22, Y+2	; 0x02
    12ce:	7b 81       	ldd	r23, Y+3	; 0x03
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9b 87       	std	Y+11, r25	; 0x0b
    12f2:	8a 87       	std	Y+10, r24	; 0x0a
    12f4:	12 c0       	rjmp	.+36     	; 0x131a <lcd_wr_char+0x148>
    12f6:	80 e7       	ldi	r24, 0x70	; 112
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	9d 87       	std	Y+13, r25	; 0x0d
    12fc:	8c 87       	std	Y+12, r24	; 0x0c
    12fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1300:	9d 85       	ldd	r25, Y+13	; 0x0d
    1302:	8c 01       	movw	r16, r24
    1304:	c8 01       	movw	r24, r16
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <lcd_wr_char+0x134>
    130a:	8c 01       	movw	r16, r24
    130c:	1d 87       	std	Y+13, r17	; 0x0d
    130e:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	8a 85       	ldd	r24, Y+10	; 0x0a
    1312:	9b 85       	ldd	r25, Y+11	; 0x0b
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9b 87       	std	Y+11, r25	; 0x0b
    1318:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	8a 85       	ldd	r24, Y+10	; 0x0a
    131c:	9b 85       	ldd	r25, Y+11	; 0x0b
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	51 f7       	brne	.-44     	; 0x12f6 <lcd_wr_char+0x124>
    1322:	17 c0       	rjmp	.+46     	; 0x1352 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1324:	6e 81       	ldd	r22, Y+6	; 0x06
    1326:	7f 81       	ldd	r23, Y+7	; 0x07
    1328:	88 85       	ldd	r24, Y+8	; 0x08
    132a:	99 85       	ldd	r25, Y+9	; 0x09
    132c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9b 87       	std	Y+11, r25	; 0x0b
    1336:	8a 87       	std	Y+10, r24	; 0x0a
    1338:	8a 85       	ldd	r24, Y+10	; 0x0a
    133a:	9b 85       	ldd	r25, Y+11	; 0x0b
    133c:	9f 87       	std	Y+15, r25	; 0x0f
    133e:	8e 87       	std	Y+14, r24	; 0x0e
    1340:	8e 85       	ldd	r24, Y+14	; 0x0e
    1342:	9f 85       	ldd	r25, Y+15	; 0x0f
    1344:	8c 01       	movw	r16, r24
    1346:	f8 01       	movw	r30, r16
    1348:	31 97       	sbiw	r30, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <lcd_wr_char+0x176>
    134c:	8f 01       	movw	r16, r30
    134e:	1f 87       	std	Y+15, r17	; 0x0f
    1350:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1352:	88 e2       	ldi	r24, 0x28	; 40
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	28 e2       	ldi	r18, 0x28	; 40
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	f9 01       	movw	r30, r18
    135c:	20 81       	ld	r18, Z
    135e:	2b 7f       	andi	r18, 0xFB	; 251
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    1364:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1366:	8f 70       	andi	r24, 0x0F	; 15
    1368:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    136a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    136c:	82 95       	swap	r24
    136e:	80 7f       	andi	r24, 0xF0	; 240
    1370:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1372:	88 e2       	ldi	r24, 0x28	; 40
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	28 e2       	ldi	r18, 0x28	; 40
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	2f 70       	andi	r18, 0x0F	; 15
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
	lcd_port |= letter;
    1384:	88 e2       	ldi	r24, 0x28	; 40
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	28 e2       	ldi	r18, 0x28	; 40
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	30 81       	ld	r19, Z
    1390:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1392:	23 2b       	or	r18, r19
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1398:	88 e2       	ldi	r24, 0x28	; 40
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	28 e2       	ldi	r18, 0x28	; 40
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	20 81       	ld	r18, Z
    13a4:	21 60       	ori	r18, 0x01	; 1
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    13aa:	88 e2       	ldi	r24, 0x28	; 40
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	28 e2       	ldi	r18, 0x28	; 40
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	f9 01       	movw	r30, r18
    13b4:	20 81       	ld	r18, Z
    13b6:	2d 7f       	andi	r18, 0xFD	; 253
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    13bc:	88 e2       	ldi	r24, 0x28	; 40
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	28 e2       	ldi	r18, 0x28	; 40
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	24 60       	ori	r18, 0x04	; 4
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 ea       	ldi	r26, 0xA0	; 160
    13d4:	b0 e4       	ldi	r27, 0x40	; 64
    13d6:	88 8b       	std	Y+16, r24	; 0x10
    13d8:	99 8b       	std	Y+17, r25	; 0x11
    13da:	aa 8b       	std	Y+18, r26	; 0x12
    13dc:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    13de:	68 89       	ldd	r22, Y+16	; 0x10
    13e0:	79 89       	ldd	r23, Y+17	; 0x11
    13e2:	8a 89       	ldd	r24, Y+18	; 0x12
    13e4:	9b 89       	ldd	r25, Y+19	; 0x13
    13e6:	26 e6       	ldi	r18, 0x66	; 102
    13e8:	36 e6       	ldi	r19, 0x66	; 102
    13ea:	46 e6       	ldi	r20, 0x66	; 102
    13ec:	55 e4       	ldi	r21, 0x45	; 69
    13ee:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8c 8b       	std	Y+20, r24	; 0x14
    13f8:	9d 8b       	std	Y+21, r25	; 0x15
    13fa:	ae 8b       	std	Y+22, r26	; 0x16
    13fc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13fe:	11 e0       	ldi	r17, 0x01	; 1
    1400:	6c 89       	ldd	r22, Y+20	; 0x14
    1402:	7d 89       	ldd	r23, Y+21	; 0x15
    1404:	8e 89       	ldd	r24, Y+22	; 0x16
    1406:	9f 89       	ldd	r25, Y+23	; 0x17
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	5f e3       	ldi	r21, 0x3F	; 63
    1410:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    1414:	88 23       	and	r24, r24
    1416:	0c f0       	brlt	.+2      	; 0x141a <lcd_wr_char+0x248>
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	11 23       	and	r17, r17
    141c:	29 f0       	breq	.+10     	; 0x1428 <lcd_wr_char+0x256>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	99 8f       	std	Y+25, r25	; 0x19
    1424:	88 8f       	std	Y+24, r24	; 0x18
    1426:	46 c0       	rjmp	.+140    	; 0x14b4 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    1428:	11 e0       	ldi	r17, 0x01	; 1
    142a:	6c 89       	ldd	r22, Y+20	; 0x14
    142c:	7d 89       	ldd	r23, Y+21	; 0x15
    142e:	8e 89       	ldd	r24, Y+22	; 0x16
    1430:	9f 89       	ldd	r25, Y+23	; 0x17
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
    143e:	18 16       	cp	r1, r24
    1440:	0c f0       	brlt	.+2      	; 0x1444 <lcd_wr_char+0x272>
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	11 23       	and	r17, r17
    1446:	61 f1       	breq	.+88     	; 0x14a0 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	68 89       	ldd	r22, Y+16	; 0x10
    144a:	79 89       	ldd	r23, Y+17	; 0x11
    144c:	8a 89       	ldd	r24, Y+18	; 0x12
    144e:	9b 89       	ldd	r25, Y+19	; 0x13
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	99 8f       	std	Y+25, r25	; 0x19
    146e:	88 8f       	std	Y+24, r24	; 0x18
    1470:	12 c0       	rjmp	.+36     	; 0x1496 <lcd_wr_char+0x2c4>
    1472:	80 e7       	ldi	r24, 0x70	; 112
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	9b 8f       	std	Y+27, r25	; 0x1b
    1478:	8a 8f       	std	Y+26, r24	; 0x1a
    147a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    147c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    147e:	8c 01       	movw	r16, r24
    1480:	c8 01       	movw	r24, r16
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <lcd_wr_char+0x2b0>
    1486:	8c 01       	movw	r16, r24
    1488:	1b 8f       	std	Y+27, r17	; 0x1b
    148a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	88 8d       	ldd	r24, Y+24	; 0x18
    148e:	99 8d       	ldd	r25, Y+25	; 0x19
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	99 8f       	std	Y+25, r25	; 0x19
    1494:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	88 8d       	ldd	r24, Y+24	; 0x18
    1498:	99 8d       	ldd	r25, Y+25	; 0x19
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	51 f7       	brne	.-44     	; 0x1472 <lcd_wr_char+0x2a0>
    149e:	17 c0       	rjmp	.+46     	; 0x14ce <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6c 89       	ldd	r22, Y+20	; 0x14
    14a2:	7d 89       	ldd	r23, Y+21	; 0x15
    14a4:	8e 89       	ldd	r24, Y+22	; 0x16
    14a6:	9f 89       	ldd	r25, Y+23	; 0x17
    14a8:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	99 8f       	std	Y+25, r25	; 0x19
    14b2:	88 8f       	std	Y+24, r24	; 0x18
    14b4:	88 8d       	ldd	r24, Y+24	; 0x18
    14b6:	99 8d       	ldd	r25, Y+25	; 0x19
    14b8:	9d 8f       	std	Y+29, r25	; 0x1d
    14ba:	8c 8f       	std	Y+28, r24	; 0x1c
    14bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14c0:	8c 01       	movw	r16, r24
    14c2:	f8 01       	movw	r30, r16
    14c4:	31 97       	sbiw	r30, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <lcd_wr_char+0x2f2>
    14c8:	8f 01       	movw	r16, r30
    14ca:	1d 8f       	std	Y+29, r17	; 0x1d
    14cc:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    14ce:	88 e2       	ldi	r24, 0x28	; 40
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	28 e2       	ldi	r18, 0x28	; 40
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	20 81       	ld	r18, Z
    14da:	2b 7f       	andi	r18, 0xFB	; 251
    14dc:	fc 01       	movw	r30, r24
    14de:	20 83       	st	Z, r18
}
    14e0:	6e 96       	adiw	r28, 0x1e	; 30
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <lcd_home>:


void lcd_home()
{
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14fe:	80 e8       	ldi	r24, 0x80	; 128
    1500:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	0f 92       	push	r0
    1510:	0f 92       	push	r0
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    151a:	0b c0       	rjmp	.+22     	; 0x1532 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	fc 01       	movw	r30, r24
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
		str++;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	fc 01       	movw	r30, r24
    1538:	80 81       	ld	r24, Z
    153a:	88 23       	and	r24, r24
    153c:	79 f7       	brne	.-34     	; 0x151c <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	0f 92       	push	r0
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	91 05       	cpc	r25, r1
    1562:	99 f0       	breq	.+38     	; 0x158a <lcd_cursor+0x42>
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	24 f4       	brge	.+8      	; 0x1572 <lcd_cursor+0x2a>
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	41 f0       	breq	.+16     	; 0x1580 <lcd_cursor+0x38>
    1570:	1b c0       	rjmp	.+54     	; 0x15a8 <lcd_cursor+0x60>
    1572:	83 30       	cpi	r24, 0x03	; 3
    1574:	91 05       	cpc	r25, r1
    1576:	71 f0       	breq	.+28     	; 0x1594 <lcd_cursor+0x4c>
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	91 05       	cpc	r25, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <lcd_cursor+0x56>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	81 58       	subi	r24, 0x81	; 129
    1584:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	81 54       	subi	r24, 0x41	; 65
    158e:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	8d 56       	subi	r24, 0x6D	; 109
    1598:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	8d 52       	subi	r24, 0x2D	; 45
    15a2:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_wr_command>
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <lcd_cursor+0x62>
		default: break;
    15a8:	00 00       	nop
	}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	27 97       	sbiw	r28, 0x07	; 7
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
    15cc:	5d 83       	std	Y+5, r21	; 0x05
    15ce:	4c 83       	std	Y+4, r20	; 0x04
    15d0:	3f 83       	std	Y+7, r19	; 0x07
    15d2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    15d4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	88 23       	and	r24, r24
    15da:	19 f0       	breq	.+6      	; 0x15e2 <lcd_print+0x2e>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 23       	and	r24, r24
    15e0:	19 f4       	brne	.+6      	; 0x15e8 <lcd_print+0x34>
	{
		lcd_home();
    15e2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <lcd_home>
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	6b 81       	ldd	r22, Y+3	; 0x03
    15ec:	0e 94 a4 0a 	call	0x1548	; 0x1548 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	9f 81       	ldd	r25, Y+7	; 0x07
    15f4:	85 30       	cpi	r24, 0x05	; 5
    15f6:	91 05       	cpc	r25, r1
    15f8:	19 f0       	breq	.+6      	; 0x1600 <lcd_print+0x4c>
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	b1 f4       	brne	.+44     	; 0x162c <lcd_print+0x78>
	{
		million=value/10000+48;
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	20 e1       	ldi	r18, 0x10	; 16
    1606:	37 e2       	ldi	r19, 0x27	; 39
    1608:	b9 01       	movw	r22, r18
    160a:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    160e:	9b 01       	movw	r18, r22
    1610:	c9 01       	movw	r24, r18
    1612:	c0 96       	adiw	r24, 0x30	; 48
    1614:	90 93 1b 02 	sts	0x021B, r25
    1618:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(million);
    161c:	80 91 1a 02 	lds	r24, 0x021A
    1620:	90 91 1b 02 	lds	r25, 0x021B
    1624:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
		flag=1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    162c:	8e 81       	ldd	r24, Y+6	; 0x06
    162e:	9f 81       	ldd	r25, Y+7	; 0x07
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	91 05       	cpc	r25, r1
    1634:	19 f0       	breq	.+6      	; 0x163c <lcd_print+0x88>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	19 f5       	brne	.+70     	; 0x1682 <lcd_print+0xce>
	{
		temp = value/1000;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	28 ee       	ldi	r18, 0xE8	; 232
    1642:	33 e0       	ldi	r19, 0x03	; 3
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    164a:	9b 01       	movw	r18, r22
    164c:	c9 01       	movw	r24, r18
    164e:	90 93 1d 02 	sts	0x021D, r25
    1652:	80 93 1c 02 	sts	0x021C, r24
		thousand = temp%10 + 48;
    1656:	80 91 1c 02 	lds	r24, 0x021C
    165a:	90 91 1d 02 	lds	r25, 0x021D
    165e:	2a e0       	ldi	r18, 0x0A	; 10
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	b9 01       	movw	r22, r18
    1664:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    1668:	c0 96       	adiw	r24, 0x30	; 48
    166a:	90 93 29 02 	sts	0x0229, r25
    166e:	80 93 28 02 	sts	0x0228, r24
		lcd_wr_char(thousand);
    1672:	80 91 28 02 	lds	r24, 0x0228
    1676:	90 91 29 02 	lds	r25, 0x0229
    167a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
		flag=1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1682:	8e 81       	ldd	r24, Y+6	; 0x06
    1684:	9f 81       	ldd	r25, Y+7	; 0x07
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	19 f0       	breq	.+6      	; 0x1692 <lcd_print+0xde>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	19 f5       	brne	.+70     	; 0x16d8 <lcd_print+0x124>
	{
		temp = value/100;
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	24 e6       	ldi	r18, 0x64	; 100
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	b9 01       	movw	r22, r18
    169c:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    16a0:	9b 01       	movw	r18, r22
    16a2:	c9 01       	movw	r24, r18
    16a4:	90 93 1d 02 	sts	0x021D, r25
    16a8:	80 93 1c 02 	sts	0x021C, r24
		hundred = temp%10 + 48;
    16ac:	80 91 1c 02 	lds	r24, 0x021C
    16b0:	90 91 1d 02 	lds	r25, 0x021D
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	b9 01       	movw	r22, r18
    16ba:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    16be:	c0 96       	adiw	r24, 0x30	; 48
    16c0:	90 93 25 02 	sts	0x0225, r25
    16c4:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(hundred);
    16c8:	80 91 24 02 	lds	r24, 0x0224
    16cc:	90 91 25 02 	lds	r25, 0x0225
    16d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
		flag=1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	91 05       	cpc	r25, r1
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <lcd_print+0x134>
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	19 f5       	brne	.+70     	; 0x172e <lcd_print+0x17a>
	{
		temp = value/10;
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	2a e0       	ldi	r18, 0x0A	; 10
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	b9 01       	movw	r22, r18
    16f2:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    16f6:	9b 01       	movw	r18, r22
    16f8:	c9 01       	movw	r24, r18
    16fa:	90 93 1d 02 	sts	0x021D, r25
    16fe:	80 93 1c 02 	sts	0x021C, r24
		tens = temp%10 + 48;
    1702:	80 91 1c 02 	lds	r24, 0x021C
    1706:	90 91 1d 02 	lds	r25, 0x021D
    170a:	2a e0       	ldi	r18, 0x0A	; 10
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	b9 01       	movw	r22, r18
    1710:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    1714:	c0 96       	adiw	r24, 0x30	; 48
    1716:	90 93 22 02 	sts	0x0222, r25
    171a:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(tens);
    171e:	80 91 21 02 	lds	r24, 0x0221
    1722:	90 91 22 02 	lds	r25, 0x0222
    1726:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
		flag=1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	19 f0       	breq	.+6      	; 0x173e <lcd_print+0x18a>
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 f4       	brne	.+36     	; 0x1762 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	2a e0       	ldi	r18, 0x0A	; 10
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	b9 01       	movw	r22, r18
    1748:	0e 94 9e 18 	call	0x313c	; 0x313c <__udivmodhi4>
    174c:	c0 96       	adiw	r24, 0x30	; 48
    174e:	90 93 27 02 	sts	0x0227, r25
    1752:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(unit);
    1756:	80 91 26 02 	lds	r24, 0x0226
    175a:	90 91 27 02 	lds	r25, 0x0227
    175e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
	}
	if(digits>5)
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	86 30       	cpi	r24, 0x06	; 6
    1768:	91 05       	cpc	r25, r1
    176a:	1c f0       	brlt	.+6      	; 0x1772 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    176c:	85 e4       	ldi	r24, 0x45	; 69
    176e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <lcd_wr_char>
	}
}
    1772:	27 96       	adiw	r28, 0x07	; 7
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <motion_pin_config>:
unsigned char Right_white_line = 0;
unsigned char data; //to store received data from UDR1

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
    178c:	81 e2       	ldi	r24, 0x21	; 33
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	21 e2       	ldi	r18, 0x21	; 33
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	2f 60       	ori	r18, 0x0F	; 15
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
	PORTA = PORTA & 0xF0;
    179e:	82 e2       	ldi	r24, 0x22	; 34
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	22 e2       	ldi	r18, 0x22	; 34
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	20 7f       	andi	r18, 0xF0	; 240
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    17b0:	8a e0       	ldi	r24, 0x0A	; 10
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	31 e0       	ldi	r19, 0x01	; 1
    17b8:	f9 01       	movw	r30, r18
    17ba:	20 81       	ld	r18, Z
    17bc:	28 61       	ori	r18, 0x18	; 24
    17be:	fc 01       	movw	r30, r24
    17c0:	20 83       	st	Z, r18
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    17c2:	8b e0       	ldi	r24, 0x0B	; 11
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	2b e0       	ldi	r18, 0x0B	; 11
    17c8:	31 e0       	ldi	r19, 0x01	; 1
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	28 61       	ori	r18, 0x18	; 24
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    17e2:	8d e2       	ldi	r24, 0x2D	; 45
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	2d e2       	ldi	r18, 0x2D	; 45
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	2f 7e       	andi	r18, 0xEF	; 239
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17f4:	8e e2       	ldi	r24, 0x2E	; 46
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	2e e2       	ldi	r18, 0x2E	; 46
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	f9 01       	movw	r30, r18
    17fe:	20 81       	ld	r18, Z
    1800:	20 61       	ori	r18, 0x10	; 16
    1802:	fc 01       	movw	r30, r24
    1804:	20 83       	st	Z, r18
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1814:	8d e2       	ldi	r24, 0x2D	; 45
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	2d e2       	ldi	r18, 0x2D	; 45
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	20 81       	ld	r18, Z
    1820:	2f 7d       	andi	r18, 0xDF	; 223
    1822:	fc 01       	movw	r30, r24
    1824:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1826:	8e e2       	ldi	r24, 0x2E	; 46
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	2e e2       	ldi	r18, 0x2E	; 46
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	20 62       	ori	r18, 0x20	; 32
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
}
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	08 95       	ret

0000183e <port_init0>:

//Function to initialize ports
void port_init0()
{
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config(); //robot motion pins config
    1846:	0e 94 c2 0b 	call	0x1784	; 0x1784 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    184a:	0e 94 ed 0b 	call	0x17da	; 0x17da <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
    184e:	0e 94 06 0c 	call	0x180c	; 0x180c <right_encoder_pin_config>
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1860:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1862:	8a e6       	ldi	r24, 0x6A	; 106
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	2a e6       	ldi	r18, 0x6A	; 106
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	22 60       	ori	r18, 0x02	; 2
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1874:	8d e3       	ldi	r24, 0x3D	; 61
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	2d e3       	ldi	r18, 0x3D	; 61
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	f9 01       	movw	r30, r18
    187e:	20 81       	ld	r18, Z
    1880:	20 61       	ori	r18, 0x10	; 16
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1886:	78 94       	sei
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1896:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1898:	8a e6       	ldi	r24, 0x6A	; 106
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	2a e6       	ldi	r18, 0x6A	; 106
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	f9 01       	movw	r30, r18
    18a2:	20 81       	ld	r18, Z
    18a4:	28 60       	ori	r18, 0x08	; 8
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    18aa:	8d e3       	ldi	r24, 0x3D	; 61
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	2d e3       	ldi	r18, 0x3D	; 61
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	f9 01       	movw	r30, r18
    18b4:	20 81       	ld	r18, Z
    18b6:	20 62       	ori	r18, 0x20	; 32
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    18bc:	78 94       	sei
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    18de:	80 91 04 02 	lds	r24, 0x0204
    18e2:	90 91 05 02 	lds	r25, 0x0205
    18e6:	a0 91 06 02 	lds	r26, 0x0206
    18ea:	b0 91 07 02 	lds	r27, 0x0207
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	a1 1d       	adc	r26, r1
    18f2:	b1 1d       	adc	r27, r1
    18f4:	80 93 04 02 	sts	0x0204, r24
    18f8:	90 93 05 02 	sts	0x0205, r25
    18fc:	a0 93 06 02 	sts	0x0206, r26
    1900:	b0 93 07 02 	sts	0x0207, r27
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    1934:	80 91 00 02 	lds	r24, 0x0200
    1938:	90 91 01 02 	lds	r25, 0x0201
    193c:	a0 91 02 02 	lds	r26, 0x0202
    1940:	b0 91 03 02 	lds	r27, 0x0203
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	a1 1d       	adc	r26, r1
    1948:	b1 1d       	adc	r27, r1
    194a:	80 93 00 02 	sts	0x0200, r24
    194e:	90 93 01 02 	sts	0x0201, r25
    1952:	a0 93 02 02 	sts	0x0202, r26
    1956:	b0 93 03 02 	sts	0x0203, r27
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	0f 90       	pop	r0
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	0f 90       	pop	r0
    196c:	1f 90       	pop	r1
    196e:	18 95       	reti

00001970 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	0f 92       	push	r0
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char PortARestore = 0;
    197e:	19 82       	std	Y+1, r1	; 0x01

	Direction &= 0x0F; 		// removing upper nibbel for the protection
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	8f 70       	andi	r24, 0x0F	; 15
    1984:	8a 83       	std	Y+2, r24	; 0x02
	PortARestore = PORTA; 		// reading the PORTA original status
    1986:	82 e2       	ldi	r24, 0x22	; 34
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	fc 01       	movw	r30, r24
    198c:	80 81       	ld	r24, Z
    198e:	89 83       	std	Y+1, r24	; 0x01
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	80 7f       	andi	r24, 0xF0	; 240
    1994:	89 83       	std	Y+1, r24	; 0x01
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1996:	99 81       	ldd	r25, Y+1	; 0x01
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	89 2b       	or	r24, r25
    199c:	89 83       	std	Y+1, r24	; 0x01
	PORTA = PortARestore; 		// executing the command
    199e:	82 e2       	ldi	r24, 0x22	; 34
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	29 81       	ldd	r18, Y+1	; 0x01
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <forward>:

void forward (void) //both wheels forward
{
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x06);
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <back>:

void back (void) //both wheels backward
{
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x09);
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	08 95       	ret

000019ee <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x04);
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x02);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x01);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x08);
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <stop>:

void stop (void)
{
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x00);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <force_stop>:

void force_stop (void)
{
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0F);
    1a6e:	8f e0       	ldi	r24, 0x0F	; 15
    1a70:	0e 94 b8 0c 	call	0x1970	; 0x1970 <motion_set>
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2a 97       	sbiw	r28, 0x0a	; 10
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	9a 87       	std	Y+10, r25	; 0x0a
    1a90:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	dc 01       	movw	r26, r24
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	ab 83       	std	Y+3, r26	; 0x03
    1a9e:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1aa0:	1d 82       	std	Y+5, r1	; 0x05
    1aa2:	1e 82       	std	Y+6, r1	; 0x06
    1aa4:	1f 82       	std	Y+7, r1	; 0x07
    1aa6:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	cc 01       	movw	r24, r24
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	28 e4       	ldi	r18, 0x48	; 72
    1ac4:	31 ee       	ldi	r19, 0xE1	; 225
    1ac6:	42 e8       	ldi	r20, 0x82	; 130
    1ac8:	50 e4       	ldi	r21, 0x40	; 64
    1aca:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	ab 83       	std	Y+3, r26	; 0x03
    1ad8:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1ada:	69 81       	ldd	r22, Y+1	; 0x01
    1adc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	cc 01       	movw	r24, r24
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	af 83       	std	Y+7, r26	; 0x07
    1af6:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    1af8:	10 92 04 02 	sts	0x0204, r1
    1afc:	10 92 05 02 	sts	0x0205, r1
    1b00:	10 92 06 02 	sts	0x0206, r1
    1b04:	10 92 07 02 	sts	0x0207, r1
	ShaftCountLeft = 0;
    1b08:	10 92 00 02 	sts	0x0200, r1
    1b0c:	10 92 01 02 	sts	0x0201, r1
    1b10:	10 92 02 02 	sts	0x0202, r1
    1b14:	10 92 03 02 	sts	0x0203, r1
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    1b1a:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1b1c:	20 91 04 02 	lds	r18, 0x0204
    1b20:	30 91 05 02 	lds	r19, 0x0205
    1b24:	40 91 06 02 	lds	r20, 0x0206
    1b28:	50 91 07 02 	lds	r21, 0x0207
    1b2c:	71 e0       	ldi	r23, 0x01	; 1
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	af 81       	ldd	r26, Y+7	; 0x07
    1b34:	b8 85       	ldd	r27, Y+8	; 0x08
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	4a 07       	cpc	r20, r26
    1b3c:	5b 07       	cpc	r21, r27
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <angle_rotate+0xc8>
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	20 91 00 02 	lds	r18, 0x0200
    1b46:	30 91 01 02 	lds	r19, 0x0201
    1b4a:	40 91 02 02 	lds	r20, 0x0202
    1b4e:	50 91 03 02 	lds	r21, 0x0203
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	af 81       	ldd	r26, Y+7	; 0x07
    1b5a:	b8 85       	ldd	r27, Y+8	; 0x08
    1b5c:	28 17       	cp	r18, r24
    1b5e:	39 07       	cpc	r19, r25
    1b60:	4a 07       	cpc	r20, r26
    1b62:	5b 07       	cpc	r21, r27
    1b64:	08 f4       	brcc	.+2      	; 0x1b68 <angle_rotate+0xee>
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	87 2f       	mov	r24, r23
    1b6a:	86 2b       	or	r24, r22
    1b6c:	88 23       	and	r24, r24
    1b6e:	a9 f2       	breq	.-86     	; 0x1b1a <angle_rotate+0xa0>
		break;
    1b70:	00 00       	nop
	}
	stop(); //Stop robot
    1b72:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <stop>
}
    1b76:	2a 96       	adiw	r28, 0x0a	; 10
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	2a 97       	sbiw	r28, 0x0a	; 10
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	9a 87       	std	Y+10, r25	; 0x0a
    1b9e:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	9a 83       	std	Y+2, r25	; 0x02
    1baa:	ab 83       	std	Y+3, r26	; 0x03
    1bac:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1bae:	1d 82       	std	Y+5, r1	; 0x05
    1bb0:	1e 82       	std	Y+6, r1	; 0x06
    1bb2:	1f 82       	std	Y+7, r1	; 0x07
    1bb4:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	cc 01       	movw	r24, r24
    1bbc:	a0 e0       	ldi	r26, 0x00	; 0
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	25 ee       	ldi	r18, 0xE5	; 229
    1bd2:	30 ed       	ldi	r19, 0xD0	; 208
    1bd4:	4a ea       	ldi	r20, 0xAA	; 170
    1bd6:	50 e4       	ldi	r21, 0x40	; 64
    1bd8:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	ab 83       	std	Y+3, r26	; 0x03
    1be6:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1be8:	69 81       	ldd	r22, Y+1	; 0x01
    1bea:	7a 81       	ldd	r23, Y+2	; 0x02
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	af 83       	std	Y+7, r26	; 0x07
    1bfe:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    1c00:	10 92 04 02 	sts	0x0204, r1
    1c04:	10 92 05 02 	sts	0x0205, r1
    1c08:	10 92 06 02 	sts	0x0206, r1
    1c0c:	10 92 07 02 	sts	0x0207, r1
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1c12:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1c14:	20 91 04 02 	lds	r18, 0x0204
    1c18:	30 91 05 02 	lds	r19, 0x0205
    1c1c:	40 91 06 02 	lds	r20, 0x0206
    1c20:	50 91 07 02 	lds	r21, 0x0207
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	af 81       	ldd	r26, Y+7	; 0x07
    1c2a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c2c:	82 17       	cp	r24, r18
    1c2e:	93 07       	cpc	r25, r19
    1c30:	a4 07       	cpc	r26, r20
    1c32:	b5 07       	cpc	r27, r21
    1c34:	70 f7       	brcc	.-36     	; 0x1c12 <linear_distance_mm+0x8a>
		{
			break;
    1c36:	00 00       	nop
		}
	}
	stop(); //Stop robot
    1c38:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <stop>
}
    1c3c:	2a 96       	adiw	r28, 0x0a	; 10
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	0f 92       	push	r0
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1c5e:	88 e2       	ldi	r24, 0x28	; 40
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	29 81       	ldd	r18, Y+1	; 0x01
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1c68:	8a e2       	ldi	r24, 0x2A	; 42
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	0f 92       	push	r0
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	velocity(255,255);
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	6f ef       	ldi	r22, 0xFF	; 255
    1c90:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <velocity>
	forward();
    1c94:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <forward>
	linear_distance_mm(DistanceInMM);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <linear_distance_mm>
	force_stop();
    1ca0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <force_stop>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	0f 92       	push	r0
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	back();
    1cbe:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <back>
	linear_distance_mm(DistanceInMM);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <linear_distance_mm>
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	0f 92       	push	r0
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    1ce4:	0e 94 ed 0c 	call	0x19da	; 0x19da <left>
	angle_rotate(Degrees);
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	0f 92       	push	r0
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    1d0a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <right>
	angle_rotate(Degrees);
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <soft_left_degrees>:

void soft_left_degrees(unsigned int Degrees)
{
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	0f 92       	push	r0
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    1d30:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <soft_left>
	Degrees=Degrees*2;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	0f 92       	push	r0
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    1d62:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <soft_right>
	Degrees=Degrees*2;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	0f 92       	push	r0
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    1d94:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <soft_left_2>
	Degrees=Degrees*2;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	0f 92       	push	r0
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    1dc6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <soft_right_2>
	Degrees=Degrees*2;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <angle_rotate>
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	08 95       	ret

00001de8 <init_devices0>:

//Function to initialize all the devices
void init_devices0()
{
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1df0:	f8 94       	cli
	port_init0();  //Initializes all the ports
    1df2:	0e 94 1f 0c 	call	0x183e	; 0x183e <port_init0>
	left_position_encoder_interrupt_init();
    1df6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1dfa:	0e 94 47 0c 	call	0x188e	; 0x188e <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
    1dfe:	78 94       	sei
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1e0e:	84 e2       	ldi	r24, 0x24	; 36
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	24 e2       	ldi	r18, 0x24	; 36
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	f9 01       	movw	r30, r18
    1e18:	20 81       	ld	r18, Z
    1e1a:	20 62       	ori	r18, 0x20	; 32
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1e20:	85 e2       	ldi	r24, 0x25	; 37
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	25 e2       	ldi	r18, 0x25	; 37
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	f9 01       	movw	r30, r18
    1e2a:	20 81       	ld	r18, Z
    1e2c:	20 62       	ori	r18, 0x20	; 32
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 83       	st	Z, r18
}
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1e40:	84 e2       	ldi	r24, 0x24	; 36
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	24 e2       	ldi	r18, 0x24	; 36
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	f9 01       	movw	r30, r18
    1e4a:	20 81       	ld	r18, Z
    1e4c:	20 64       	ori	r18, 0x40	; 64
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1e52:	85 e2       	ldi	r24, 0x25	; 37
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	25 e2       	ldi	r18, 0x25	; 37
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	20 81       	ld	r18, Z
    1e5e:	20 64       	ori	r18, 0x40	; 64
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    1e72:	84 e2       	ldi	r24, 0x24	; 36
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	24 e2       	ldi	r18, 0x24	; 36
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	f9 01       	movw	r30, r18
    1e7c:	20 81       	ld	r18, Z
    1e7e:	20 68       	ori	r18, 0x80	; 128
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1e84:	85 e2       	ldi	r24, 0x25	; 37
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	25 e2       	ldi	r18, 0x25	; 37
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	20 81       	ld	r18, Z
    1e90:	20 68       	ori	r18, 0x80	; 128
    1e92:	fc 01       	movw	r30, r24
    1e94:	20 83       	st	Z, r18
}
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	08 95       	ret

00001e9c <port_init1>:

//Initialize the ports
void port_init1(void)
{
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1ea4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
    1ea8:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    1eac:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <servo3_pin_config>
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1ebe:	81 e8       	ldi	r24, 0x81	; 129
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1ec6:	85 e8       	ldi	r24, 0x85	; 133
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	2c ef       	ldi	r18, 0xFC	; 252
    1ecc:	fc 01       	movw	r30, r24
    1ece:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1ed0:	84 e8       	ldi	r24, 0x84	; 132
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1eda:	89 e8       	ldi	r24, 0x89	; 137
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	23 e0       	ldi	r18, 0x03	; 3
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1ee4:	88 e8       	ldi	r24, 0x88	; 136
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	2f ef       	ldi	r18, 0xFF	; 255
    1eea:	fc 01       	movw	r30, r24
    1eec:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1eee:	8b e8       	ldi	r24, 0x8B	; 139
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	23 e0       	ldi	r18, 0x03	; 3
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1ef8:	8a e8       	ldi	r24, 0x8A	; 138
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	fc 01       	movw	r30, r24
    1f00:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1f02:	8d e8       	ldi	r24, 0x8D	; 141
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	23 e0       	ldi	r18, 0x03	; 3
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1f0c:	8c e8       	ldi	r24, 0x8C	; 140
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	2f ef       	ldi	r18, 0xFF	; 255
    1f12:	fc 01       	movw	r30, r24
    1f14:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    1f16:	87 e8       	ldi	r24, 0x87	; 135
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	23 e0       	ldi	r18, 0x03	; 3
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    1f20:	86 e8       	ldi	r24, 0x86	; 134
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	2f ef       	ldi	r18, 0xFF	; 255
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1f2a:	80 e8       	ldi	r24, 0x80	; 128
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	2b ea       	ldi	r18, 0xAB	; 171
    1f30:	fc 01       	movw	r30, r24
    1f32:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1f34:	82 e8       	ldi	r24, 0x82	; 130
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	fc 01       	movw	r30, r24
    1f3a:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1f3c:	81 e8       	ldi	r24, 0x81	; 129
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	2c e0       	ldi	r18, 0x0C	; 12
    1f42:	fc 01       	movw	r30, r24
    1f44:	20 83       	st	Z, r18
}
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <init_devices1>:


//Function to initialize all the peripherals
void init_devices1(void)
{
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    1f54:	f8 94       	cli
 port_init1();
    1f56:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <port_init1>
 timer1_init();
    1f5a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <timer1_init>
 sei(); //re-enable interrupts 
    1f5e:	78 94       	sei
}
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <servo_1+0xa>
    1f70:	0f 92       	push	r0
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	dc 01       	movw	r26, r24
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	ab 83       	std	Y+3, r26	; 0x03
    1f86:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	2b e7       	ldi	r18, 0x7B	; 123
    1fa4:	34 e1       	ldi	r19, 0x14	; 20
    1fa6:	4e ee       	ldi	r20, 0xEE	; 238
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4c e0       	ldi	r20, 0x0C	; 12
    1fbc:	52 e4       	ldi	r21, 0x42	; 66
    1fbe:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	ab 83       	std	Y+3, r26	; 0x03
    1fcc:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    1fce:	89 e8       	ldi	r24, 0x89	; 137
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    1fd6:	08 e8       	ldi	r16, 0x88	; 136
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	69 81       	ldd	r22, Y+1	; 0x01
    1fdc:	7a 81       	ldd	r23, Y+2	; 0x02
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	80 83       	st	Z, r24
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	08 95       	ret

00002002 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	00 d0       	rcall	.+0      	; 0x200c <servo_2+0xa>
    200c:	0f 92       	push	r0
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	dc 01       	movw	r26, r24
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	ab 83       	std	Y+3, r26	; 0x03
    2022:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	2b e7       	ldi	r18, 0x7B	; 123
    2040:	34 e1       	ldi	r19, 0x14	; 20
    2042:	4e ee       	ldi	r20, 0xEE	; 238
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4c e0       	ldi	r20, 0x0C	; 12
    2058:	52 e4       	ldi	r21, 0x42	; 66
    205a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	ab 83       	std	Y+3, r26	; 0x03
    2068:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    206a:	8b e8       	ldi	r24, 0x8B	; 139
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	fc 01       	movw	r30, r24
    2070:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    2072:	0a e8       	ldi	r16, 0x8A	; 138
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	69 81       	ldd	r22, Y+1	; 0x01
    2078:	7a 81       	ldd	r23, Y+2	; 0x02
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	f8 01       	movw	r30, r16
    2088:	80 83       	st	Z, r24
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	08 95       	ret

0000209e <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <servo_3+0xa>
    20a8:	0f 92       	push	r0
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	dc 01       	movw	r26, r24
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	ab 83       	std	Y+3, r26	; 0x03
    20be:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e0       	ldi	r26, 0x00	; 0
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__floatunsisf>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	2b e7       	ldi	r18, 0x7B	; 123
    20dc:	34 e1       	ldi	r19, 0x14	; 20
    20de:	4e ee       	ldi	r20, 0xEE	; 238
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4c e0       	ldi	r20, 0x0C	; 12
    20f4:	52 e4       	ldi	r21, 0x42	; 66
    20f6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	ab 83       	std	Y+3, r26	; 0x03
    2104:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    2106:	8d e8       	ldi	r24, 0x8D	; 141
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	fc 01       	movw	r30, r24
    210c:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    210e:	0c e8       	ldi	r16, 0x8C	; 140
    2110:	10 e0       	ldi	r17, 0x00	; 0
    2112:	69 81       	ldd	r22, Y+1	; 0x01
    2114:	7a 81       	ldd	r23, Y+2	; 0x02
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	80 83       	st	Z, r24
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	1f 91       	pop	r17
    2136:	0f 91       	pop	r16
    2138:	08 95       	ret

0000213a <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    2142:	89 e8       	ldi	r24, 0x89	; 137
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	23 e0       	ldi	r18, 0x03	; 3
    2148:	fc 01       	movw	r30, r24
    214a:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    214c:	88 e8       	ldi	r24, 0x88	; 136
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	2f ef       	ldi	r18, 0xFF	; 255
    2152:	fc 01       	movw	r30, r24
    2154:	20 83       	st	Z, r18
}
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	08 95       	ret

0000215c <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    2164:	8b e8       	ldi	r24, 0x8B	; 139
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	23 e0       	ldi	r18, 0x03	; 3
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    216e:	8a e8       	ldi	r24, 0x8A	; 138
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	2f ef       	ldi	r18, 0xFF	; 255
    2174:	fc 01       	movw	r30, r24
    2176:	20 83       	st	Z, r18
}
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	08 95       	ret

0000217e <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    2186:	8d e8       	ldi	r24, 0x8D	; 141
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	23 e0       	ldi	r18, 0x03	; 3
    218c:	fc 01       	movw	r30, r24
    218e:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    2190:	8c e8       	ldi	r24, 0x8C	; 140
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	2f ef       	ldi	r18, 0xFF	; 255
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
} 
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    21a8:	87 e2       	ldi	r24, 0x27	; 39
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	27 e2       	ldi	r18, 0x27	; 39
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	f9 01       	movw	r30, r18
    21b2:	20 81       	ld	r18, Z
    21b4:	27 6f       	ori	r18, 0xF7	; 247
    21b6:	fc 01       	movw	r30, r24
    21b8:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    21ba:	88 e2       	ldi	r24, 0x28	; 40
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	28 e2       	ldi	r18, 0x28	; 40
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	f9 01       	movw	r30, r18
    21c4:	20 81       	ld	r18, Z
    21c6:	20 78       	andi	r18, 0x80	; 128
    21c8:	fc 01       	movw	r30, r24
    21ca:	20 83       	st	Z, r18
}
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    21da:	80 e3       	ldi	r24, 0x30	; 48
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	fc 01       	movw	r30, r24
    21e0:	10 82       	st	Z, r1
 PORTF = 0x00;
    21e2:	81 e3       	ldi	r24, 0x31	; 49
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	fc 01       	movw	r30, r24
    21e8:	10 82       	st	Z, r1
 DDRK = 0x00;
    21ea:	87 e0       	ldi	r24, 0x07	; 7
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	fc 01       	movw	r30, r24
    21f0:	10 82       	st	Z, r1
 PORTK = 0x00;
    21f2:	88 e0       	ldi	r24, 0x08	; 8
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	fc 01       	movw	r30, r24
    21f8:	10 82       	st	Z, r1
}
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <port_init2>:

//Function to Initialize PORTS
void port_init2()
{
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    2208:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <lcd_port_config>
	adc_pin_config();
    220c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <adc_pin_config>
	motion_pin_config();	
    2210:	0e 94 c2 0b 	call	0x1784	; 0x1784 <motion_pin_config>
}
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	08 95       	ret

0000221a <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    2222:	81 e2       	ldi	r24, 0x21	; 33
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	fc 01       	movw	r30, r24
    2228:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    222a:	85 e2       	ldi	r24, 0x25	; 37
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	2f ef       	ldi	r18, 0xFF	; 255
    2230:	fc 01       	movw	r30, r24
    2232:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    2234:	84 e2       	ldi	r24, 0x24	; 36
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	21 e0       	ldi	r18, 0x01	; 1
    223a:	fc 01       	movw	r30, r24
    223c:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    223e:	89 e2       	ldi	r24, 0x29	; 41
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	fc 01       	movw	r30, r24
    2244:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    2246:	88 e2       	ldi	r24, 0x28	; 40
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	2f ef       	ldi	r18, 0xFF	; 255
    224c:	fc 01       	movw	r30, r24
    224e:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    2250:	8b e2       	ldi	r24, 0x2B	; 43
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	fc 01       	movw	r30, r24
    2256:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    2258:	8a e2       	ldi	r24, 0x2A	; 42
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	2f ef       	ldi	r18, 0xFF	; 255
    225e:	fc 01       	movw	r30, r24
    2260:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    2262:	8d e2       	ldi	r24, 0x2D	; 45
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	fc 01       	movw	r30, r24
    2268:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    226a:	8c e2       	ldi	r24, 0x2C	; 44
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	2f ef       	ldi	r18, 0xFF	; 255
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    2274:	80 e2       	ldi	r24, 0x20	; 32
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	29 ea       	ldi	r18, 0xA9	; 169
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    227e:	81 e2       	ldi	r24, 0x21	; 33
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	2b e0       	ldi	r18, 0x0B	; 11
    2284:	fc 01       	movw	r30, r24
    2286:	20 83       	st	Z, r18
}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <adc_init>:

void adc_init()
{
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    2296:	8a e7       	ldi	r24, 0x7A	; 122
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	fc 01       	movw	r30, r24
    229c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    229e:	8b e7       	ldi	r24, 0x7B	; 123
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	fc 01       	movw	r30, r24
    22a4:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    22a6:	8c e7       	ldi	r24, 0x7C	; 124
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	20 e2       	ldi	r18, 0x20	; 32
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18
	ACSR = 0x80;
    22b0:	80 e5       	ldi	r24, 0x50	; 80
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	20 e8       	ldi	r18, 0x80	; 128
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    22ba:	8a e7       	ldi	r24, 0x7A	; 122
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	26 e8       	ldi	r18, 0x86	; 134
    22c0:	fc 01       	movw	r30, r24
    22c2:	20 83       	st	Z, r18
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	0f 92       	push	r0
    22d0:	0f 92       	push	r0
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	88 30       	cpi	r24, 0x08	; 8
    22dc:	28 f0       	brcs	.+10     	; 0x22e8 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    22de:	8b e7       	ldi	r24, 0x7B	; 123
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	28 e0       	ldi	r18, 0x08	; 8
    22e4:	fc 01       	movw	r30, r24
    22e6:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	87 70       	andi	r24, 0x07	; 7
    22ec:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    22ee:	8c e7       	ldi	r24, 0x7C	; 124
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	2a 81       	ldd	r18, Y+2	; 0x02
    22f4:	20 62       	ori	r18, 0x20	; 32
    22f6:	fc 01       	movw	r30, r24
    22f8:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    22fa:	8a e7       	ldi	r24, 0x7A	; 122
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	2a e7       	ldi	r18, 0x7A	; 122
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	f9 01       	movw	r30, r18
    2304:	20 81       	ld	r18, Z
    2306:	20 64       	ori	r18, 0x40	; 64
    2308:	fc 01       	movw	r30, r24
    230a:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    230c:	00 00       	nop
    230e:	8a e7       	ldi	r24, 0x7A	; 122
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	fc 01       	movw	r30, r24
    2314:	80 81       	ld	r24, Z
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 71       	andi	r24, 0x10	; 16
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	00 97       	sbiw	r24, 0x00	; 0
    2320:	b1 f3       	breq	.-20     	; 0x230e <ADC_Conversion+0x44>
	a=ADCH;
    2322:	89 e7       	ldi	r24, 0x79	; 121
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	fc 01       	movw	r30, r24
    2328:	80 81       	ld	r24, Z
    232a:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    232c:	8a e7       	ldi	r24, 0x7A	; 122
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	2a e7       	ldi	r18, 0x7A	; 122
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	20 81       	ld	r18, Z
    2338:	20 61       	ori	r18, 0x10	; 16
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    233e:	8b e7       	ldi	r24, 0x7B	; 123
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	10 82       	st	Z, r1
	return a;
    2346:	89 81       	ldd	r24, Y+1	; 0x01
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	08 95       	ret

00002352 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{	
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	00 d0       	rcall	.+0      	; 0x2358 <print_sensor+0x6>
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	6a 83       	std	Y+2, r22	; 0x02
    2360:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ADC_Conversion(channel);
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    2368:	80 93 1e 02 	sts	0x021E, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    236c:	80 91 1e 02 	lds	r24, 0x021E
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	6a 81       	ldd	r22, Y+2	; 0x02
    2378:	a9 01       	movw	r20, r18
    237a:	23 e0       	ldi	r18, 0x03	; 3
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_print>
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <init_devices2>:

void init_devices2 (void)
{
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    2396:	f8 94       	cli
	port_init2();
    2398:	0e 94 00 11 	call	0x2200	; 0x2200 <port_init2>
	adc_init();
    239c:	0e 94 47 11 	call	0x228e	; 0x228e <adc_init>
	timer5_init();
    23a0:	0e 94 0d 11 	call	0x221a	; 0x221a <timer5_init>
	sei();   //Enables the global interrupts
    23a4:	78 94       	sei
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <port_init3>:
void port_init3()
{
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
    23b4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <motion_pin_config>
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	08 95       	ret

000023be <init_devices3>:
void init_devices3()
{
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
    23c6:	f8 94       	cli
	port_init3();  //Initializes all the ports
    23c8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <port_init3>
	uart0_init(); //Initailize UART1 for serial communication
    23cc:	8e ee       	ldi	r24, 0xEE	; 238
    23ce:	91 e1       	ldi	r25, 0x11	; 17
    23d0:	fc 01       	movw	r30, r24
    23d2:	19 95       	eicall
	sei();   //Enables the global interrupts
    23d4:	78 94       	sei
}
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <uart0_init>:
void uart0_init(void)
{
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00; //disable while setting baud rate
    23e4:	81 ec       	ldi	r24, 0xC1	; 193
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	fc 01       	movw	r30, r24
    23ea:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    23ec:	80 ec       	ldi	r24, 0xC0	; 192
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    23f4:	82 ec       	ldi	r24, 0xC2	; 194
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	26 e0       	ldi	r18, 0x06	; 6
    23fa:	fc 01       	movw	r30, r24
    23fc:	20 83       	st	Z, r18
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
    23fe:	84 ec       	ldi	r24, 0xC4	; 196
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	2f e5       	ldi	r18, 0x5F	; 95
    2404:	fc 01       	movw	r30, r24
    2406:	20 83       	st	Z, r18
	UBRR0H = 0x00; //set baud rate hi
    2408:	85 ec       	ldi	r24, 0xC5	; 197
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	fc 01       	movw	r30, r24
    240e:	10 82       	st	Z, r1
	UCSR0B = 0x98;
    2410:	81 ec       	ldi	r24, 0xC1	; 193
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	28 e9       	ldi	r18, 0x98	; 152
    2416:	fc 01       	movw	r30, r24
    2418:	20 83       	st	Z, r18
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <get_sensor_values>:
#include "dependency.c"

#define PI 3.14159265

void get_sensor_values(int * array)
{
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	0f 92       	push	r0
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
	array[0] = ADC_Conversion(6);
    2434:	86 e0       	ldi	r24, 0x06	; 6
    2436:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	fc 01       	movw	r30, r24
    2444:	31 83       	std	Z+1, r19	; 0x01
    2446:	20 83       	st	Z, r18
	array[1] = ADC_Conversion(5);
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	8c 01       	movw	r16, r24
    244e:	0e 5f       	subi	r16, 0xFE	; 254
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	85 e0       	ldi	r24, 0x05	; 5
    2454:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
	array[2] = ADC_Conversion(4);
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	8c 01       	movw	r16, r24
    2468:	0c 5f       	subi	r16, 0xFC	; 252
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	f8 01       	movw	r30, r16
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
	array[3] = 150;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	06 96       	adiw	r24, 0x06	; 6
    2482:	26 e9       	ldi	r18, 0x96	; 150
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	fc 01       	movw	r30, r24
    2488:	31 83       	std	Z+1, r19	; 0x01
    248a:	20 83       	st	Z, r18
	array[4] = 150;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	08 96       	adiw	r24, 0x08	; 8
    2492:	26 e9       	ldi	r18, 0x96	; 150
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	fc 01       	movw	r30, r24
    2498:	31 83       	std	Z+1, r19	; 0x01
    249a:	20 83       	st	Z, r18
	array[5] = 150;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	0a 96       	adiw	r24, 0x0a	; 10
    24a2:	26 e9       	ldi	r18, 0x96	; 150
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	fc 01       	movw	r30, r24
    24a8:	31 83       	std	Z+1, r19	; 0x01
    24aa:	20 83       	st	Z, r18
	array[6] = ADC_Conversion(8);
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	8c 01       	movw	r16, r24
    24b2:	04 5f       	subi	r16, 0xF4	; 244
    24b4:	1f 4f       	sbci	r17, 0xFF	; 255
    24b6:	88 e0       	ldi	r24, 0x08	; 8
    24b8:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
	array[7] = ADC_Conversion(7);
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	8c 01       	movw	r16, r24
    24cc:	02 5f       	subi	r16, 0xF2	; 242
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	87 e0       	ldi	r24, 0x07	; 7
    24d2:	0e 94 65 11 	call	0x22ca	; 0x22ca <ADC_Conversion>
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	f8 01       	movw	r30, r16
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
	return;
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	08 95       	ret

000024ee <find_centroid>:

int find_centroid(int * sensor_values,int * centroid)
{
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	64 97       	sbiw	r28, 0x14	; 20
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	9a 8b       	std	Y+18, r25	; 0x12
    250c:	89 8b       	std	Y+17, r24	; 0x11
    250e:	7c 8b       	std	Y+20, r23	; 0x14
    2510:	6b 8b       	std	Y+19, r22	; 0x13
	float x = 0;
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	dc 01       	movw	r26, r24
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	ab 83       	std	Y+3, r26	; 0x03
    251e:	bc 83       	std	Y+4, r27	; 0x04
	float y = 0;
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	dc 01       	movw	r26, r24
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	af 83       	std	Y+7, r26	; 0x07
    252c:	b8 87       	std	Y+8, r27	; 0x08
	int i;
	int counter = 0;
    252e:	1c 86       	std	Y+12, r1	; 0x0c
    2530:	1b 86       	std	Y+11, r1	; 0x0b
	for(i=0;i<8;i++)
    2532:	1a 86       	std	Y+10, r1	; 0x0a
    2534:	19 86       	std	Y+9, r1	; 0x09
    2536:	c9 c0       	rjmp	.+402    	; 0x26ca <find_centroid+0x1dc>
	{
		if(sensor_values[i] < 100)
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	29 89       	ldd	r18, Y+17	; 0x11
    2542:	3a 89       	ldd	r19, Y+18	; 0x12
    2544:	82 0f       	add	r24, r18
    2546:	93 1f       	adc	r25, r19
    2548:	fc 01       	movw	r30, r24
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	84 36       	cpi	r24, 0x64	; 100
    2550:	91 05       	cpc	r25, r1
    2552:	0c f0       	brlt	.+2      	; 0x2556 <find_centroid+0x68>
    2554:	b5 c0       	rjmp	.+362    	; 0x26c0 <find_centroid+0x1d2>
		{
			// printf("%f %f\n", sensor_values[i] * cos(i * 45 * PI / 180), sensor_values[i] * sin(i * 45 * PI / 180));
			x += sensor_values[i] * cos(i * 45 * PI / 180);
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	29 89       	ldd	r18, Y+17	; 0x11
    2560:	3a 89       	ldd	r19, Y+18	; 0x12
    2562:	82 0f       	add	r24, r18
    2564:	93 1f       	adc	r25, r19
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	aa 27       	eor	r26, r26
    256e:	97 fd       	sbrc	r25, 7
    2570:	a0 95       	com	r26
    2572:	ba 2f       	mov	r27, r26
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    257c:	7b 01       	movw	r14, r22
    257e:	8c 01       	movw	r16, r24
    2580:	49 85       	ldd	r20, Y+9	; 0x09
    2582:	5a 85       	ldd	r21, Y+10	; 0x0a
    2584:	2d e2       	ldi	r18, 0x2D	; 45
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	42 9f       	mul	r20, r18
    258a:	c0 01       	movw	r24, r0
    258c:	43 9f       	mul	r20, r19
    258e:	90 0d       	add	r25, r0
    2590:	52 9f       	mul	r21, r18
    2592:	90 0d       	add	r25, r0
    2594:	11 24       	eor	r1, r1
    2596:	aa 27       	eor	r26, r26
    2598:	97 fd       	sbrc	r25, 7
    259a:	a0 95       	com	r26
    259c:	ba 2f       	mov	r27, r26
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	2b ed       	ldi	r18, 0xDB	; 219
    25b0:	3f e0       	ldi	r19, 0x0F	; 15
    25b2:	49 e4       	ldi	r20, 0x49	; 73
    25b4:	50 e4       	ldi	r21, 0x40	; 64
    25b6:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	44 e3       	ldi	r20, 0x34	; 52
    25c8:	53 e4       	ldi	r21, 0x43	; 67
    25ca:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 13 16 	call	0x2c26	; 0x2c26 <cos>
    25da:	9b 01       	movw	r18, r22
    25dc:	ac 01       	movw	r20, r24
    25de:	c8 01       	movw	r24, r16
    25e0:	b7 01       	movw	r22, r14
    25e2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9c 01       	movw	r18, r24
    25ec:	ad 01       	movw	r20, r26
    25ee:	69 81       	ldd	r22, Y+1	; 0x01
    25f0:	7a 81       	ldd	r23, Y+2	; 0x02
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	ab 83       	std	Y+3, r26	; 0x03
    2604:	bc 83       	std	Y+4, r27	; 0x04
			y += sensor_values[i] * sin(i * 45 * PI / 180);
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	29 89       	ldd	r18, Y+17	; 0x11
    2610:	3a 89       	ldd	r19, Y+18	; 0x12
    2612:	82 0f       	add	r24, r18
    2614:	93 1f       	adc	r25, r19
    2616:	fc 01       	movw	r30, r24
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	aa 27       	eor	r26, r26
    261e:	97 fd       	sbrc	r25, 7
    2620:	a0 95       	com	r26
    2622:	ba 2f       	mov	r27, r26
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    262c:	7b 01       	movw	r14, r22
    262e:	8c 01       	movw	r16, r24
    2630:	49 85       	ldd	r20, Y+9	; 0x09
    2632:	5a 85       	ldd	r21, Y+10	; 0x0a
    2634:	2d e2       	ldi	r18, 0x2D	; 45
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	42 9f       	mul	r20, r18
    263a:	c0 01       	movw	r24, r0
    263c:	43 9f       	mul	r20, r19
    263e:	90 0d       	add	r25, r0
    2640:	52 9f       	mul	r21, r18
    2642:	90 0d       	add	r25, r0
    2644:	11 24       	eor	r1, r1
    2646:	aa 27       	eor	r26, r26
    2648:	97 fd       	sbrc	r25, 7
    264a:	a0 95       	com	r26
    264c:	ba 2f       	mov	r27, r26
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	2b ed       	ldi	r18, 0xDB	; 219
    2660:	3f e0       	ldi	r19, 0x0F	; 15
    2662:	49 e4       	ldi	r20, 0x49	; 73
    2664:	50 e4       	ldi	r21, 0x40	; 64
    2666:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	44 e3       	ldi	r20, 0x34	; 52
    2678:	53 e4       	ldi	r21, 0x43	; 67
    267a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 2d 18 	call	0x305a	; 0x305a <sin>
    268a:	9b 01       	movw	r18, r22
    268c:	ac 01       	movw	r20, r24
    268e:	c8 01       	movw	r24, r16
    2690:	b7 01       	movw	r22, r14
    2692:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 01       	movw	r18, r24
    269c:	ad 01       	movw	r20, r26
    269e:	6d 81       	ldd	r22, Y+5	; 0x05
    26a0:	7e 81       	ldd	r23, Y+6	; 0x06
    26a2:	8f 81       	ldd	r24, Y+7	; 0x07
    26a4:	98 85       	ldd	r25, Y+8	; 0x08
    26a6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8d 83       	std	Y+5, r24	; 0x05
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	af 83       	std	Y+7, r26	; 0x07
    26b4:	b8 87       	std	Y+8, r27	; 0x08
			counter++;
    26b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	9c 87       	std	Y+12, r25	; 0x0c
    26be:	8b 87       	std	Y+11, r24	; 0x0b
{
	float x = 0;
	float y = 0;
	int i;
	int counter = 0;
	for(i=0;i<8;i++)
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	9a 87       	std	Y+10, r25	; 0x0a
    26c8:	89 87       	std	Y+9, r24	; 0x09
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	88 30       	cpi	r24, 0x08	; 8
    26d0:	91 05       	cpc	r25, r1
    26d2:	0c f4       	brge	.+2      	; 0x26d6 <find_centroid+0x1e8>
    26d4:	31 cf       	rjmp	.-414    	; 0x2538 <find_centroid+0x4a>
			x += sensor_values[i] * cos(i * 45 * PI / 180);
			y += sensor_values[i] * sin(i * 45 * PI / 180);
			counter++;
		}
	}
	x = x/(counter+1);
    26d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	aa 27       	eor	r26, r26
    26de:	97 fd       	sbrc	r25, 7
    26e0:	a0 95       	com	r26
    26e2:	ba 2f       	mov	r27, r26
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    26ec:	9b 01       	movw	r18, r22
    26ee:	ac 01       	movw	r20, r24
    26f0:	69 81       	ldd	r22, Y+1	; 0x01
    26f2:	7a 81       	ldd	r23, Y+2	; 0x02
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	ab 83       	std	Y+3, r26	; 0x03
    2706:	bc 83       	std	Y+4, r27	; 0x04
	y = y/(counter+1);
    2708:	8b 85       	ldd	r24, Y+11	; 0x0b
    270a:	9c 85       	ldd	r25, Y+12	; 0x0c
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	aa 27       	eor	r26, r26
    2710:	97 fd       	sbrc	r25, 7
    2712:	a0 95       	com	r26
    2714:	ba 2f       	mov	r27, r26
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__floatsisf>
    271e:	9b 01       	movw	r18, r22
    2720:	ac 01       	movw	r20, r24
    2722:	6d 81       	ldd	r22, Y+5	; 0x05
    2724:	7e 81       	ldd	r23, Y+6	; 0x06
    2726:	8f 81       	ldd	r24, Y+7	; 0x07
    2728:	98 85       	ldd	r25, Y+8	; 0x08
    272a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	9e 83       	std	Y+6, r25	; 0x06
    2736:	af 83       	std	Y+7, r26	; 0x07
    2738:	b8 87       	std	Y+8, r27	; 0x08
	int distance = sqrt(pow(x,2)+pow(y,2));
    273a:	29 81       	ldd	r18, Y+1	; 0x01
    273c:	3a 81       	ldd	r19, Y+2	; 0x02
    273e:	4b 81       	ldd	r20, Y+3	; 0x03
    2740:	5c 81       	ldd	r21, Y+4	; 0x04
    2742:	ca 01       	movw	r24, r20
    2744:	b9 01       	movw	r22, r18
    2746:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	7c 01       	movw	r14, r24
    2750:	8d 01       	movw	r16, r26
    2752:	2d 81       	ldd	r18, Y+5	; 0x05
    2754:	3e 81       	ldd	r19, Y+6	; 0x06
    2756:	4f 81       	ldd	r20, Y+7	; 0x07
    2758:	58 85       	ldd	r21, Y+8	; 0x08
    275a:	ca 01       	movw	r24, r20
    275c:	b9 01       	movw	r22, r18
    275e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9c 01       	movw	r18, r24
    2768:	ad 01       	movw	r20, r26
    276a:	c8 01       	movw	r24, r16
    276c:	b7 01       	movw	r22, r14
    276e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__addsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 37 18 	call	0x306e	; 0x306e <sqrt>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fixsfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	98 8b       	std	Y+16, r25	; 0x10
    2790:	8f 87       	std	Y+15, r24	; 0x0f
	int angle = atan(y/x) * 180 / PI;
    2792:	6d 81       	ldd	r22, Y+5	; 0x05
    2794:	7e 81       	ldd	r23, Y+6	; 0x06
    2796:	8f 81       	ldd	r24, Y+7	; 0x07
    2798:	98 85       	ldd	r25, Y+8	; 0x08
    279a:	29 81       	ldd	r18, Y+1	; 0x01
    279c:	3a 81       	ldd	r19, Y+2	; 0x02
    279e:	4b 81       	ldd	r20, Y+3	; 0x03
    27a0:	5c 81       	ldd	r21, Y+4	; 0x04
    27a2:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 e7 15 	call	0x2bce	; 0x2bce <atan>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	44 e3       	ldi	r20, 0x34	; 52
    27c0:	53 e4       	ldi	r21, 0x43	; 67
    27c2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	2b ed       	ldi	r18, 0xDB	; 219
    27d0:	3f e0       	ldi	r19, 0x0F	; 15
    27d2:	49 e4       	ldi	r20, 0x49	; 73
    27d4:	50 e4       	ldi	r21, 0x40	; 64
    27d6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__divsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fixsfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9e 87       	std	Y+14, r25	; 0x0e
    27ec:	8d 87       	std	Y+13, r24	; 0x0d
	if(x< 0 && y > 0)
    27ee:	11 e0       	ldi	r17, 0x01	; 1
    27f0:	69 81       	ldd	r22, Y+1	; 0x01
    27f2:	7a 81       	ldd	r23, Y+2	; 0x02
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	a9 01       	movw	r20, r18
    27fe:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    2802:	88 23       	and	r24, r24
    2804:	0c f0       	brlt	.+2      	; 0x2808 <find_centroid+0x31a>
    2806:	10 e0       	ldi	r17, 0x00	; 0
    2808:	11 23       	and	r17, r17
    280a:	d1 f0       	breq	.+52     	; 0x2840 <find_centroid+0x352>
    280c:	11 e0       	ldi	r17, 0x01	; 1
    280e:	6d 81       	ldd	r22, Y+5	; 0x05
    2810:	7e 81       	ldd	r23, Y+6	; 0x06
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	98 85       	ldd	r25, Y+8	; 0x08
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	a9 01       	movw	r20, r18
    281c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
    2820:	18 16       	cp	r1, r24
    2822:	0c f0       	brlt	.+2      	; 0x2826 <find_centroid+0x338>
    2824:	10 e0       	ldi	r17, 0x00	; 0
    2826:	11 23       	and	r17, r17
    2828:	59 f0       	breq	.+22     	; 0x2840 <find_centroid+0x352>
	{
		angle = 90 - angle;
    282a:	2a e5       	ldi	r18, 0x5A	; 90
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	a9 01       	movw	r20, r18
    2834:	48 1b       	sub	r20, r24
    2836:	59 0b       	sbc	r21, r25
    2838:	ca 01       	movw	r24, r20
    283a:	9e 87       	std	Y+14, r25	; 0x0e
    283c:	8d 87       	std	Y+13, r24	; 0x0d
    283e:	24 c0       	rjmp	.+72     	; 0x2888 <find_centroid+0x39a>
	}
	else if(x < 0 && y < 0)
    2840:	11 e0       	ldi	r17, 0x01	; 1
    2842:	69 81       	ldd	r22, Y+1	; 0x01
    2844:	7a 81       	ldd	r23, Y+2	; 0x02
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	a9 01       	movw	r20, r18
    2850:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    2854:	88 23       	and	r24, r24
    2856:	0c f0       	brlt	.+2      	; 0x285a <find_centroid+0x36c>
    2858:	10 e0       	ldi	r17, 0x00	; 0
    285a:	11 23       	and	r17, r17
    285c:	a9 f0       	breq	.+42     	; 0x2888 <find_centroid+0x39a>
    285e:	11 e0       	ldi	r17, 0x01	; 1
    2860:	6d 81       	ldd	r22, Y+5	; 0x05
    2862:	7e 81       	ldd	r23, Y+6	; 0x06
    2864:	8f 81       	ldd	r24, Y+7	; 0x07
    2866:	98 85       	ldd	r25, Y+8	; 0x08
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	a9 01       	movw	r20, r18
    286e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    2872:	88 23       	and	r24, r24
    2874:	0c f0       	brlt	.+2      	; 0x2878 <find_centroid+0x38a>
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	11 23       	and	r17, r17
    287a:	31 f0       	breq	.+12     	; 0x2888 <find_centroid+0x39a>
	{
		angle = 180 + angle;
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	8c 54       	subi	r24, 0x4C	; 76
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	9e 87       	std	Y+14, r25	; 0x0e
    2886:	8d 87       	std	Y+13, r24	; 0x0d
	}
	centroid[0] = distance;
    2888:	8b 89       	ldd	r24, Y+19	; 0x13
    288a:	9c 89       	ldd	r25, Y+20	; 0x14
    288c:	2f 85       	ldd	r18, Y+15	; 0x0f
    288e:	38 89       	ldd	r19, Y+16	; 0x10
    2890:	fc 01       	movw	r30, r24
    2892:	31 83       	std	Z+1, r19	; 0x01
    2894:	20 83       	st	Z, r18
	centroid[1] = angle;
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	02 96       	adiw	r24, 0x02	; 2
    289c:	2d 85       	ldd	r18, Y+13	; 0x0d
    289e:	3e 85       	ldd	r19, Y+14	; 0x0e
    28a0:	fc 01       	movw	r30, r24
    28a2:	31 83       	std	Z+1, r19	; 0x01
    28a4:	20 83       	st	Z, r18
	return 0;
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
}
    28aa:	64 96       	adiw	r28, 0x14	; 20
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	08 95       	ret

000028c4 <print_sensor_values>:

void print_sensor_values(int * array,int n)
{
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	64 97       	sbiw	r28, 0x14	; 20
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	9a 8b       	std	Y+18, r25	; 0x12
    28de:	89 8b       	std	Y+17, r24	; 0x11
    28e0:	7c 8b       	std	Y+20, r23	; 0x14
    28e2:	6b 8b       	std	Y+19, r22	; 0x13
	int i;
	for(i=0;i<n;i++)
    28e4:	1a 82       	std	Y+2, r1	; 0x02
    28e6:	19 82       	std	Y+1, r1	; 0x01
    28e8:	98 c0       	rjmp	.+304    	; 0x2a1a <print_sensor_values+0x156>
	{
		lcd_print(1,5,array[i],3);
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	29 89       	ldd	r18, Y+17	; 0x11
    28f4:	3a 89       	ldd	r19, Y+18	; 0x12
    28f6:	82 0f       	add	r24, r18
    28f8:	93 1f       	adc	r25, r19
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	9c 01       	movw	r18, r24
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	65 e0       	ldi	r22, 0x05	; 5
    2906:	a9 01       	movw	r20, r18
    2908:	23 e0       	ldi	r18, 0x03	; 3
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_print>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	aa ef       	ldi	r26, 0xFA	; 250
    2916:	b4 e4       	ldi	r27, 0x44	; 68
    2918:	8b 83       	std	Y+3, r24	; 0x03
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	ad 83       	std	Y+5, r26	; 0x05
    291e:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2920:	6b 81       	ldd	r22, Y+3	; 0x03
    2922:	7c 81       	ldd	r23, Y+4	; 0x04
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	26 e6       	ldi	r18, 0x66	; 102
    292a:	36 e6       	ldi	r19, 0x66	; 102
    292c:	46 e6       	ldi	r20, 0x66	; 102
    292e:	55 e4       	ldi	r21, 0x45	; 69
    2930:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8f 83       	std	Y+7, r24	; 0x07
    293a:	98 87       	std	Y+8, r25	; 0x08
    293c:	a9 87       	std	Y+9, r26	; 0x09
    293e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2940:	11 e0       	ldi	r17, 0x01	; 1
    2942:	6f 81       	ldd	r22, Y+7	; 0x07
    2944:	78 85       	ldd	r23, Y+8	; 0x08
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__cmpsf2>
    2956:	88 23       	and	r24, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <print_sensor_values+0x98>
    295a:	10 e0       	ldi	r17, 0x00	; 0
    295c:	11 23       	and	r17, r17
    295e:	29 f0       	breq	.+10     	; 0x296a <print_sensor_values+0xa6>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9c 87       	std	Y+12, r25	; 0x0c
    2966:	8b 87       	std	Y+11, r24	; 0x0b
    2968:	46 c0       	rjmp	.+140    	; 0x29f6 <print_sensor_values+0x132>
	else if (__tmp > 65535)
    296a:	11 e0       	ldi	r17, 0x01	; 1
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__gesf2>
    2980:	18 16       	cp	r1, r24
    2982:	0c f0       	brlt	.+2      	; 0x2986 <print_sensor_values+0xc2>
    2984:	10 e0       	ldi	r17, 0x00	; 0
    2986:	11 23       	and	r17, r17
    2988:	61 f1       	breq	.+88     	; 0x29e2 <print_sensor_values+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 81       	ldd	r22, Y+3	; 0x03
    298c:	7c 81       	ldd	r23, Y+4	; 0x04
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9c 87       	std	Y+12, r25	; 0x0c
    29b0:	8b 87       	std	Y+11, r24	; 0x0b
    29b2:	12 c0       	rjmp	.+36     	; 0x29d8 <print_sensor_values+0x114>
    29b4:	80 e7       	ldi	r24, 0x70	; 112
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	9e 87       	std	Y+14, r25	; 0x0e
    29ba:	8d 87       	std	Y+13, r24	; 0x0d
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c0:	8c 01       	movw	r16, r24
    29c2:	c8 01       	movw	r24, r16
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <print_sensor_values+0x100>
    29c8:	8c 01       	movw	r16, r24
    29ca:	1e 87       	std	Y+14, r17	; 0x0e
    29cc:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	9c 87       	std	Y+12, r25	; 0x0c
    29d6:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29da:	9c 85       	ldd	r25, Y+12	; 0x0c
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	51 f7       	brne	.-44     	; 0x29b4 <print_sensor_values+0xf0>
    29e0:	17 c0       	rjmp	.+46     	; 0x2a10 <print_sensor_values+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9c 87       	std	Y+12, r25	; 0x0c
    29f4:	8b 87       	std	Y+11, r24	; 0x0b
    29f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    29f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    29fa:	98 8b       	std	Y+16, r25	; 0x10
    29fc:	8f 87       	std	Y+15, r24	; 0x0f
    29fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a00:	98 89       	ldd	r25, Y+16	; 0x10
    2a02:	8c 01       	movw	r16, r24
    2a04:	f8 01       	movw	r30, r16
    2a06:	31 97       	sbiw	r30, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <print_sensor_values+0x142>
    2a0a:	8f 01       	movw	r16, r30
    2a0c:	18 8b       	std	Y+16, r17	; 0x10
    2a0e:	0f 87       	std	Y+15, r16	; 0x0f
}

void print_sensor_values(int * array,int n)
{
	int i;
	for(i=0;i<n;i++)
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	29 81       	ldd	r18, Y+1	; 0x01
    2a1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	28 17       	cp	r18, r24
    2a24:	39 07       	cpc	r19, r25
    2a26:	0c f4       	brge	.+2      	; 0x2a2a <print_sensor_values+0x166>
    2a28:	60 cf       	rjmp	.-320    	; 0x28ea <print_sensor_values+0x26>
	{
		lcd_print(1,5,array[i],3);
		_delay_ms(2000);
	}
	return;
}
    2a2a:	64 96       	adiw	r28, 0x14	; 20
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <main>:

int main(void)
{
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	64 97       	sbiw	r28, 0x14	; 20
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
	init_devices1();	//To initiate the ports in the device
    2a54:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <init_devices1>
	init_devices0();	//To initiate the ports in the device
    2a58:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <init_devices0>
	init_devices2();	//To initiate the ports in the device
    2a5c:	0e 94 c7 11 	call	0x238e	; 0x238e <init_devices2>
	init_devices3();
    2a60:	0e 94 df 11 	call	0x23be	; 0x23be <init_devices3>
	lcd_set_4bit();		//To initialise lcd ports
    2a64:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_4bit>
	lcd_init();
    2a68:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_init>
    //_delay_ms(5000);
	int bot_sensor_values[8];
	get_sensor_values(bot_sensor_values);
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	0e 94 10 12 	call	0x2420	; 0x2420 <get_sensor_values>
	print_sensor_values(bot_sensor_values,8);
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	68 e0       	ldi	r22, 0x08	; 8
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <print_sensor_values>
	int bot_centroid[2];
	find_centroid(bot_sensor_values,bot_centroid);	
    2a80:	9e 01       	movw	r18, r28
    2a82:	2f 5e       	subi	r18, 0xEF	; 239
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	ce 01       	movw	r24, r28
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	0e 94 77 12 	call	0x24ee	; 0x24ee <find_centroid>
	if(bot_centroid[1] < 0)
    2a90:	8b 89       	ldd	r24, Y+19	; 0x13
    2a92:	9c 89       	ldd	r25, Y+20	; 0x14
    2a94:	99 23       	and	r25, r25
    2a96:	34 f4       	brge	.+12     	; 0x2aa4 <main+0x64>
	{
		bot_centroid[1] = 360 + bot_centroid[1];
    2a98:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9c:	88 59       	subi	r24, 0x98	; 152
    2a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2aa0:	9c 8b       	std	Y+20, r25	; 0x14
    2aa2:	8b 8b       	std	Y+19, r24	; 0x13
	}
	lcd_print(1,1,bot_centroid[0],3);
    2aa4:	89 89       	ldd	r24, Y+17	; 0x11
    2aa6:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa8:	9c 01       	movw	r18, r24
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	a9 01       	movw	r20, r18
    2ab0:	23 e0       	ldi	r18, 0x03	; 3
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_print>
	lcd_print(2,1,bot_centroid[1],3);
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	9c 89       	ldd	r25, Y+20	; 0x14
    2abc:	9c 01       	movw	r18, r24
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	a9 01       	movw	r20, r18
    2ac4:	23 e0       	ldi	r18, 0x03	; 3
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_print>
	left_degrees(bot_centroid[1]);
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <left_degrees>
	forward_mm(bot_centroid[0]*10);
    2ad4:	89 89       	ldd	r24, Y+17	; 0x11
    2ad6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	9c 01       	movw	r18, r24
    2ade:	22 0f       	add	r18, r18
    2ae0:	33 1f       	adc	r19, r19
    2ae2:	22 0f       	add	r18, r18
    2ae4:	33 1f       	adc	r19, r19
    2ae6:	82 0f       	add	r24, r18
    2ae8:	93 1f       	adc	r25, r19
    2aea:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <forward_mm>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	64 96       	adiw	r28, 0x14	; 20
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	08 95       	ret

00002b04 <__subsf3>:
    2b04:	50 58       	subi	r21, 0x80	; 128

00002b06 <__addsf3>:
    2b06:	bb 27       	eor	r27, r27
    2b08:	aa 27       	eor	r26, r26
    2b0a:	0e d0       	rcall	.+28     	; 0x2b28 <__addsf3x>
    2b0c:	ed c1       	rjmp	.+986    	; 0x2ee8 <__fp_round>
    2b0e:	b6 d1       	rcall	.+876    	; 0x2e7c <__fp_pscA>
    2b10:	30 f0       	brcs	.+12     	; 0x2b1e <__addsf3+0x18>
    2b12:	bb d1       	rcall	.+886    	; 0x2e8a <__fp_pscB>
    2b14:	20 f0       	brcs	.+8      	; 0x2b1e <__addsf3+0x18>
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <__addsf3+0x1e>
    2b18:	9f 3f       	cpi	r25, 0xFF	; 255
    2b1a:	11 f4       	brne	.+4      	; 0x2b20 <__addsf3+0x1a>
    2b1c:	1e f4       	brtc	.+6      	; 0x2b24 <__addsf3+0x1e>
    2b1e:	86 c1       	rjmp	.+780    	; 0x2e2c <__fp_nan>
    2b20:	0e f4       	brtc	.+2      	; 0x2b24 <__addsf3+0x1e>
    2b22:	e0 95       	com	r30
    2b24:	e7 fb       	bst	r30, 7
    2b26:	7c c1       	rjmp	.+760    	; 0x2e20 <__fp_inf>

00002b28 <__addsf3x>:
    2b28:	e9 2f       	mov	r30, r25
    2b2a:	00 d2       	rcall	.+1024   	; 0x2f2c <__fp_split3>
    2b2c:	80 f3       	brcs	.-32     	; 0x2b0e <__addsf3+0x8>
    2b2e:	ba 17       	cp	r27, r26
    2b30:	62 07       	cpc	r22, r18
    2b32:	73 07       	cpc	r23, r19
    2b34:	84 07       	cpc	r24, r20
    2b36:	95 07       	cpc	r25, r21
    2b38:	18 f0       	brcs	.+6      	; 0x2b40 <__addsf3x+0x18>
    2b3a:	71 f4       	brne	.+28     	; 0x2b58 <__addsf3x+0x30>
    2b3c:	9e f5       	brtc	.+102    	; 0x2ba4 <__addsf3x+0x7c>
    2b3e:	18 c2       	rjmp	.+1072   	; 0x2f70 <__fp_zero>
    2b40:	0e f4       	brtc	.+2      	; 0x2b44 <__addsf3x+0x1c>
    2b42:	e0 95       	com	r30
    2b44:	0b 2e       	mov	r0, r27
    2b46:	ba 2f       	mov	r27, r26
    2b48:	a0 2d       	mov	r26, r0
    2b4a:	0b 01       	movw	r0, r22
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	90 01       	movw	r18, r0
    2b50:	0c 01       	movw	r0, r24
    2b52:	ca 01       	movw	r24, r20
    2b54:	a0 01       	movw	r20, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	ff 27       	eor	r31, r31
    2b5a:	59 1b       	sub	r21, r25
    2b5c:	99 f0       	breq	.+38     	; 0x2b84 <__addsf3x+0x5c>
    2b5e:	59 3f       	cpi	r21, 0xF9	; 249
    2b60:	50 f4       	brcc	.+20     	; 0x2b76 <__addsf3x+0x4e>
    2b62:	50 3e       	cpi	r21, 0xE0	; 224
    2b64:	68 f1       	brcs	.+90     	; 0x2bc0 <__addsf3x+0x98>
    2b66:	1a 16       	cp	r1, r26
    2b68:	f0 40       	sbci	r31, 0x00	; 0
    2b6a:	a2 2f       	mov	r26, r18
    2b6c:	23 2f       	mov	r18, r19
    2b6e:	34 2f       	mov	r19, r20
    2b70:	44 27       	eor	r20, r20
    2b72:	58 5f       	subi	r21, 0xF8	; 248
    2b74:	f3 cf       	rjmp	.-26     	; 0x2b5c <__addsf3x+0x34>
    2b76:	46 95       	lsr	r20
    2b78:	37 95       	ror	r19
    2b7a:	27 95       	ror	r18
    2b7c:	a7 95       	ror	r26
    2b7e:	f0 40       	sbci	r31, 0x00	; 0
    2b80:	53 95       	inc	r21
    2b82:	c9 f7       	brne	.-14     	; 0x2b76 <__addsf3x+0x4e>
    2b84:	7e f4       	brtc	.+30     	; 0x2ba4 <__addsf3x+0x7c>
    2b86:	1f 16       	cp	r1, r31
    2b88:	ba 0b       	sbc	r27, r26
    2b8a:	62 0b       	sbc	r22, r18
    2b8c:	73 0b       	sbc	r23, r19
    2b8e:	84 0b       	sbc	r24, r20
    2b90:	ba f0       	brmi	.+46     	; 0x2bc0 <__addsf3x+0x98>
    2b92:	91 50       	subi	r25, 0x01	; 1
    2b94:	a1 f0       	breq	.+40     	; 0x2bbe <__addsf3x+0x96>
    2b96:	ff 0f       	add	r31, r31
    2b98:	bb 1f       	adc	r27, r27
    2b9a:	66 1f       	adc	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	c2 f7       	brpl	.-16     	; 0x2b92 <__addsf3x+0x6a>
    2ba2:	0e c0       	rjmp	.+28     	; 0x2bc0 <__addsf3x+0x98>
    2ba4:	ba 0f       	add	r27, r26
    2ba6:	62 1f       	adc	r22, r18
    2ba8:	73 1f       	adc	r23, r19
    2baa:	84 1f       	adc	r24, r20
    2bac:	48 f4       	brcc	.+18     	; 0x2bc0 <__addsf3x+0x98>
    2bae:	87 95       	ror	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	b7 95       	ror	r27
    2bb6:	f7 95       	ror	r31
    2bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bba:	08 f0       	brcs	.+2      	; 0x2bbe <__addsf3x+0x96>
    2bbc:	b3 cf       	rjmp	.-154    	; 0x2b24 <__addsf3+0x1e>
    2bbe:	93 95       	inc	r25
    2bc0:	88 0f       	add	r24, r24
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <__addsf3x+0x9e>
    2bc4:	99 27       	eor	r25, r25
    2bc6:	ee 0f       	add	r30, r30
    2bc8:	97 95       	ror	r25
    2bca:	87 95       	ror	r24
    2bcc:	08 95       	ret

00002bce <atan>:
    2bce:	df 93       	push	r29
    2bd0:	dd 27       	eor	r29, r29
    2bd2:	b9 2f       	mov	r27, r25
    2bd4:	bf 77       	andi	r27, 0x7F	; 127
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	16 16       	cp	r1, r22
    2bdc:	17 06       	cpc	r1, r23
    2bde:	48 07       	cpc	r20, r24
    2be0:	5b 07       	cpc	r21, r27
    2be2:	10 f4       	brcc	.+4      	; 0x2be8 <atan+0x1a>
    2be4:	d9 2f       	mov	r29, r25
    2be6:	cf d1       	rcall	.+926    	; 0x2f86 <inverse>
    2be8:	9f 93       	push	r25
    2bea:	8f 93       	push	r24
    2bec:	7f 93       	push	r23
    2bee:	6f 93       	push	r22
    2bf0:	7c d2       	rcall	.+1272   	; 0x30ea <square>
    2bf2:	e4 ee       	ldi	r30, 0xE4	; 228
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	1d d1       	rcall	.+570    	; 0x2e32 <__fp_powser>
    2bf8:	77 d1       	rcall	.+750    	; 0x2ee8 <__fp_round>
    2bfa:	2f 91       	pop	r18
    2bfc:	3f 91       	pop	r19
    2bfe:	4f 91       	pop	r20
    2c00:	5f 91       	pop	r21
    2c02:	d4 d1       	rcall	.+936    	; 0x2fac <__mulsf3x>
    2c04:	dd 23       	and	r29, r29
    2c06:	49 f0       	breq	.+18     	; 0x2c1a <atan+0x4c>
    2c08:	90 58       	subi	r25, 0x80	; 128
    2c0a:	a2 ea       	ldi	r26, 0xA2	; 162
    2c0c:	2a ed       	ldi	r18, 0xDA	; 218
    2c0e:	3f e0       	ldi	r19, 0x0F	; 15
    2c10:	49 ec       	ldi	r20, 0xC9	; 201
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	d0 78       	andi	r29, 0x80	; 128
    2c16:	5d 27       	eor	r21, r29
    2c18:	87 df       	rcall	.-242    	; 0x2b28 <__addsf3x>
    2c1a:	df 91       	pop	r29
    2c1c:	65 c1       	rjmp	.+714    	; 0x2ee8 <__fp_round>

00002c1e <__cmpsf2>:
    2c1e:	dc d0       	rcall	.+440    	; 0x2dd8 <__fp_cmp>
    2c20:	08 f4       	brcc	.+2      	; 0x2c24 <__cmpsf2+0x6>
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	08 95       	ret

00002c26 <cos>:
    2c26:	39 d1       	rcall	.+626    	; 0x2e9a <__fp_rempio2>
    2c28:	e3 95       	inc	r30
    2c2a:	6f c1       	rjmp	.+734    	; 0x2f0a <__fp_sinus>

00002c2c <__divsf3>:
    2c2c:	0c d0       	rcall	.+24     	; 0x2c46 <__divsf3x>
    2c2e:	5c c1       	rjmp	.+696    	; 0x2ee8 <__fp_round>
    2c30:	2c d1       	rcall	.+600    	; 0x2e8a <__fp_pscB>
    2c32:	40 f0       	brcs	.+16     	; 0x2c44 <__divsf3+0x18>
    2c34:	23 d1       	rcall	.+582    	; 0x2e7c <__fp_pscA>
    2c36:	30 f0       	brcs	.+12     	; 0x2c44 <__divsf3+0x18>
    2c38:	21 f4       	brne	.+8      	; 0x2c42 <__divsf3+0x16>
    2c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <__divsf3+0x18>
    2c3e:	f0 c0       	rjmp	.+480    	; 0x2e20 <__fp_inf>
    2c40:	51 11       	cpse	r21, r1
    2c42:	97 c1       	rjmp	.+814    	; 0x2f72 <__fp_szero>
    2c44:	f3 c0       	rjmp	.+486    	; 0x2e2c <__fp_nan>

00002c46 <__divsf3x>:
    2c46:	72 d1       	rcall	.+740    	; 0x2f2c <__fp_split3>
    2c48:	98 f3       	brcs	.-26     	; 0x2c30 <__divsf3+0x4>

00002c4a <__divsf3_pse>:
    2c4a:	99 23       	and	r25, r25
    2c4c:	c9 f3       	breq	.-14     	; 0x2c40 <__divsf3+0x14>
    2c4e:	55 23       	and	r21, r21
    2c50:	b1 f3       	breq	.-20     	; 0x2c3e <__divsf3+0x12>
    2c52:	95 1b       	sub	r25, r21
    2c54:	55 0b       	sbc	r21, r21
    2c56:	bb 27       	eor	r27, r27
    2c58:	aa 27       	eor	r26, r26
    2c5a:	62 17       	cp	r22, r18
    2c5c:	73 07       	cpc	r23, r19
    2c5e:	84 07       	cpc	r24, r20
    2c60:	38 f0       	brcs	.+14     	; 0x2c70 <__divsf3_pse+0x26>
    2c62:	9f 5f       	subi	r25, 0xFF	; 255
    2c64:	5f 4f       	sbci	r21, 0xFF	; 255
    2c66:	22 0f       	add	r18, r18
    2c68:	33 1f       	adc	r19, r19
    2c6a:	44 1f       	adc	r20, r20
    2c6c:	aa 1f       	adc	r26, r26
    2c6e:	a9 f3       	breq	.-22     	; 0x2c5a <__divsf3_pse+0x10>
    2c70:	33 d0       	rcall	.+102    	; 0x2cd8 <__divsf3_pse+0x8e>
    2c72:	0e 2e       	mov	r0, r30
    2c74:	3a f0       	brmi	.+14     	; 0x2c84 <__divsf3_pse+0x3a>
    2c76:	e0 e8       	ldi	r30, 0x80	; 128
    2c78:	30 d0       	rcall	.+96     	; 0x2cda <__divsf3_pse+0x90>
    2c7a:	91 50       	subi	r25, 0x01	; 1
    2c7c:	50 40       	sbci	r21, 0x00	; 0
    2c7e:	e6 95       	lsr	r30
    2c80:	00 1c       	adc	r0, r0
    2c82:	ca f7       	brpl	.-14     	; 0x2c76 <__divsf3_pse+0x2c>
    2c84:	29 d0       	rcall	.+82     	; 0x2cd8 <__divsf3_pse+0x8e>
    2c86:	fe 2f       	mov	r31, r30
    2c88:	27 d0       	rcall	.+78     	; 0x2cd8 <__divsf3_pse+0x8e>
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
    2c8e:	88 1f       	adc	r24, r24
    2c90:	bb 1f       	adc	r27, r27
    2c92:	26 17       	cp	r18, r22
    2c94:	37 07       	cpc	r19, r23
    2c96:	48 07       	cpc	r20, r24
    2c98:	ab 07       	cpc	r26, r27
    2c9a:	b0 e8       	ldi	r27, 0x80	; 128
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <__divsf3_pse+0x56>
    2c9e:	bb 0b       	sbc	r27, r27
    2ca0:	80 2d       	mov	r24, r0
    2ca2:	bf 01       	movw	r22, r30
    2ca4:	ff 27       	eor	r31, r31
    2ca6:	93 58       	subi	r25, 0x83	; 131
    2ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    2caa:	2a f0       	brmi	.+10     	; 0x2cb6 <__divsf3_pse+0x6c>
    2cac:	9e 3f       	cpi	r25, 0xFE	; 254
    2cae:	51 05       	cpc	r21, r1
    2cb0:	68 f0       	brcs	.+26     	; 0x2ccc <__divsf3_pse+0x82>
    2cb2:	b6 c0       	rjmp	.+364    	; 0x2e20 <__fp_inf>
    2cb4:	5e c1       	rjmp	.+700    	; 0x2f72 <__fp_szero>
    2cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cb8:	ec f3       	brlt	.-6      	; 0x2cb4 <__divsf3_pse+0x6a>
    2cba:	98 3e       	cpi	r25, 0xE8	; 232
    2cbc:	dc f3       	brlt	.-10     	; 0x2cb4 <__divsf3_pse+0x6a>
    2cbe:	86 95       	lsr	r24
    2cc0:	77 95       	ror	r23
    2cc2:	67 95       	ror	r22
    2cc4:	b7 95       	ror	r27
    2cc6:	f7 95       	ror	r31
    2cc8:	9f 5f       	subi	r25, 0xFF	; 255
    2cca:	c9 f7       	brne	.-14     	; 0x2cbe <__divsf3_pse+0x74>
    2ccc:	88 0f       	add	r24, r24
    2cce:	91 1d       	adc	r25, r1
    2cd0:	96 95       	lsr	r25
    2cd2:	87 95       	ror	r24
    2cd4:	97 f9       	bld	r25, 7
    2cd6:	08 95       	ret
    2cd8:	e1 e0       	ldi	r30, 0x01	; 1
    2cda:	66 0f       	add	r22, r22
    2cdc:	77 1f       	adc	r23, r23
    2cde:	88 1f       	adc	r24, r24
    2ce0:	bb 1f       	adc	r27, r27
    2ce2:	62 17       	cp	r22, r18
    2ce4:	73 07       	cpc	r23, r19
    2ce6:	84 07       	cpc	r24, r20
    2ce8:	ba 07       	cpc	r27, r26
    2cea:	20 f0       	brcs	.+8      	; 0x2cf4 <__divsf3_pse+0xaa>
    2cec:	62 1b       	sub	r22, r18
    2cee:	73 0b       	sbc	r23, r19
    2cf0:	84 0b       	sbc	r24, r20
    2cf2:	ba 0b       	sbc	r27, r26
    2cf4:	ee 1f       	adc	r30, r30
    2cf6:	88 f7       	brcc	.-30     	; 0x2cda <__divsf3_pse+0x90>
    2cf8:	e0 95       	com	r30
    2cfa:	08 95       	ret

00002cfc <__fixsfsi>:
    2cfc:	04 d0       	rcall	.+8      	; 0x2d06 <__fixunssfsi>
    2cfe:	68 94       	set
    2d00:	b1 11       	cpse	r27, r1
    2d02:	37 c1       	rjmp	.+622    	; 0x2f72 <__fp_szero>
    2d04:	08 95       	ret

00002d06 <__fixunssfsi>:
    2d06:	1a d1       	rcall	.+564    	; 0x2f3c <__fp_splitA>
    2d08:	88 f0       	brcs	.+34     	; 0x2d2c <__fixunssfsi+0x26>
    2d0a:	9f 57       	subi	r25, 0x7F	; 127
    2d0c:	90 f0       	brcs	.+36     	; 0x2d32 <__fixunssfsi+0x2c>
    2d0e:	b9 2f       	mov	r27, r25
    2d10:	99 27       	eor	r25, r25
    2d12:	b7 51       	subi	r27, 0x17	; 23
    2d14:	a0 f0       	brcs	.+40     	; 0x2d3e <__fixunssfsi+0x38>
    2d16:	d1 f0       	breq	.+52     	; 0x2d4c <__fixunssfsi+0x46>
    2d18:	66 0f       	add	r22, r22
    2d1a:	77 1f       	adc	r23, r23
    2d1c:	88 1f       	adc	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	1a f0       	brmi	.+6      	; 0x2d28 <__fixunssfsi+0x22>
    2d22:	ba 95       	dec	r27
    2d24:	c9 f7       	brne	.-14     	; 0x2d18 <__fixunssfsi+0x12>
    2d26:	12 c0       	rjmp	.+36     	; 0x2d4c <__fixunssfsi+0x46>
    2d28:	b1 30       	cpi	r27, 0x01	; 1
    2d2a:	81 f0       	breq	.+32     	; 0x2d4c <__fixunssfsi+0x46>
    2d2c:	21 d1       	rcall	.+578    	; 0x2f70 <__fp_zero>
    2d2e:	b1 e0       	ldi	r27, 0x01	; 1
    2d30:	08 95       	ret
    2d32:	1e c1       	rjmp	.+572    	; 0x2f70 <__fp_zero>
    2d34:	67 2f       	mov	r22, r23
    2d36:	78 2f       	mov	r23, r24
    2d38:	88 27       	eor	r24, r24
    2d3a:	b8 5f       	subi	r27, 0xF8	; 248
    2d3c:	39 f0       	breq	.+14     	; 0x2d4c <__fixunssfsi+0x46>
    2d3e:	b9 3f       	cpi	r27, 0xF9	; 249
    2d40:	cc f3       	brlt	.-14     	; 0x2d34 <__fixunssfsi+0x2e>
    2d42:	86 95       	lsr	r24
    2d44:	77 95       	ror	r23
    2d46:	67 95       	ror	r22
    2d48:	b3 95       	inc	r27
    2d4a:	d9 f7       	brne	.-10     	; 0x2d42 <__fixunssfsi+0x3c>
    2d4c:	3e f4       	brtc	.+14     	; 0x2d5c <__fixunssfsi+0x56>
    2d4e:	90 95       	com	r25
    2d50:	80 95       	com	r24
    2d52:	70 95       	com	r23
    2d54:	61 95       	neg	r22
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	08 95       	ret

00002d5e <__floatunsisf>:
    2d5e:	e8 94       	clt
    2d60:	09 c0       	rjmp	.+18     	; 0x2d74 <__floatsisf+0x12>

00002d62 <__floatsisf>:
    2d62:	97 fb       	bst	r25, 7
    2d64:	3e f4       	brtc	.+14     	; 0x2d74 <__floatsisf+0x12>
    2d66:	90 95       	com	r25
    2d68:	80 95       	com	r24
    2d6a:	70 95       	com	r23
    2d6c:	61 95       	neg	r22
    2d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d70:	8f 4f       	sbci	r24, 0xFF	; 255
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	99 23       	and	r25, r25
    2d76:	a9 f0       	breq	.+42     	; 0x2da2 <__floatsisf+0x40>
    2d78:	f9 2f       	mov	r31, r25
    2d7a:	96 e9       	ldi	r25, 0x96	; 150
    2d7c:	bb 27       	eor	r27, r27
    2d7e:	93 95       	inc	r25
    2d80:	f6 95       	lsr	r31
    2d82:	87 95       	ror	r24
    2d84:	77 95       	ror	r23
    2d86:	67 95       	ror	r22
    2d88:	b7 95       	ror	r27
    2d8a:	f1 11       	cpse	r31, r1
    2d8c:	f8 cf       	rjmp	.-16     	; 0x2d7e <__floatsisf+0x1c>
    2d8e:	fa f4       	brpl	.+62     	; 0x2dce <__floatsisf+0x6c>
    2d90:	bb 0f       	add	r27, r27
    2d92:	11 f4       	brne	.+4      	; 0x2d98 <__floatsisf+0x36>
    2d94:	60 ff       	sbrs	r22, 0
    2d96:	1b c0       	rjmp	.+54     	; 0x2dce <__floatsisf+0x6c>
    2d98:	6f 5f       	subi	r22, 0xFF	; 255
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2da0:	16 c0       	rjmp	.+44     	; 0x2dce <__floatsisf+0x6c>
    2da2:	88 23       	and	r24, r24
    2da4:	11 f0       	breq	.+4      	; 0x2daa <__floatsisf+0x48>
    2da6:	96 e9       	ldi	r25, 0x96	; 150
    2da8:	11 c0       	rjmp	.+34     	; 0x2dcc <__floatsisf+0x6a>
    2daa:	77 23       	and	r23, r23
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <__floatsisf+0x54>
    2dae:	9e e8       	ldi	r25, 0x8E	; 142
    2db0:	87 2f       	mov	r24, r23
    2db2:	76 2f       	mov	r23, r22
    2db4:	05 c0       	rjmp	.+10     	; 0x2dc0 <__floatsisf+0x5e>
    2db6:	66 23       	and	r22, r22
    2db8:	71 f0       	breq	.+28     	; 0x2dd6 <__floatsisf+0x74>
    2dba:	96 e8       	ldi	r25, 0x86	; 134
    2dbc:	86 2f       	mov	r24, r22
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	2a f0       	brmi	.+10     	; 0x2dce <__floatsisf+0x6c>
    2dc4:	9a 95       	dec	r25
    2dc6:	66 0f       	add	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	88 1f       	adc	r24, r24
    2dcc:	da f7       	brpl	.-10     	; 0x2dc4 <__floatsisf+0x62>
    2dce:	88 0f       	add	r24, r24
    2dd0:	96 95       	lsr	r25
    2dd2:	87 95       	ror	r24
    2dd4:	97 f9       	bld	r25, 7
    2dd6:	08 95       	ret

00002dd8 <__fp_cmp>:
    2dd8:	99 0f       	add	r25, r25
    2dda:	00 08       	sbc	r0, r0
    2ddc:	55 0f       	add	r21, r21
    2dde:	aa 0b       	sbc	r26, r26
    2de0:	e0 e8       	ldi	r30, 0x80	; 128
    2de2:	fe ef       	ldi	r31, 0xFE	; 254
    2de4:	16 16       	cp	r1, r22
    2de6:	17 06       	cpc	r1, r23
    2de8:	e8 07       	cpc	r30, r24
    2dea:	f9 07       	cpc	r31, r25
    2dec:	c0 f0       	brcs	.+48     	; 0x2e1e <__fp_cmp+0x46>
    2dee:	12 16       	cp	r1, r18
    2df0:	13 06       	cpc	r1, r19
    2df2:	e4 07       	cpc	r30, r20
    2df4:	f5 07       	cpc	r31, r21
    2df6:	98 f0       	brcs	.+38     	; 0x2e1e <__fp_cmp+0x46>
    2df8:	62 1b       	sub	r22, r18
    2dfa:	73 0b       	sbc	r23, r19
    2dfc:	84 0b       	sbc	r24, r20
    2dfe:	95 0b       	sbc	r25, r21
    2e00:	39 f4       	brne	.+14     	; 0x2e10 <__fp_cmp+0x38>
    2e02:	0a 26       	eor	r0, r26
    2e04:	61 f0       	breq	.+24     	; 0x2e1e <__fp_cmp+0x46>
    2e06:	23 2b       	or	r18, r19
    2e08:	24 2b       	or	r18, r20
    2e0a:	25 2b       	or	r18, r21
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <__fp_cmp+0x3e>
    2e0e:	08 95       	ret
    2e10:	0a 26       	eor	r0, r26
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <__fp_cmp+0x3e>
    2e14:	a1 40       	sbci	r26, 0x01	; 1
    2e16:	a6 95       	lsr	r26
    2e18:	8f ef       	ldi	r24, 0xFF	; 255
    2e1a:	81 1d       	adc	r24, r1
    2e1c:	81 1d       	adc	r24, r1
    2e1e:	08 95       	ret

00002e20 <__fp_inf>:
    2e20:	97 f9       	bld	r25, 7
    2e22:	9f 67       	ori	r25, 0x7F	; 127
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	08 95       	ret

00002e2c <__fp_nan>:
    2e2c:	9f ef       	ldi	r25, 0xFF	; 255
    2e2e:	80 ec       	ldi	r24, 0xC0	; 192
    2e30:	08 95       	ret

00002e32 <__fp_powser>:
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	1f 93       	push	r17
    2e38:	0f 93       	push	r16
    2e3a:	ff 92       	push	r15
    2e3c:	ef 92       	push	r14
    2e3e:	df 92       	push	r13
    2e40:	7b 01       	movw	r14, r22
    2e42:	8c 01       	movw	r16, r24
    2e44:	68 94       	set
    2e46:	05 c0       	rjmp	.+10     	; 0x2e52 <__fp_powser+0x20>
    2e48:	da 2e       	mov	r13, r26
    2e4a:	ef 01       	movw	r28, r30
    2e4c:	af d0       	rcall	.+350    	; 0x2fac <__mulsf3x>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e8 94       	clt
    2e52:	a5 91       	lpm	r26, Z+
    2e54:	25 91       	lpm	r18, Z+
    2e56:	35 91       	lpm	r19, Z+
    2e58:	45 91       	lpm	r20, Z+
    2e5a:	55 91       	lpm	r21, Z+
    2e5c:	ae f3       	brts	.-22     	; 0x2e48 <__fp_powser+0x16>
    2e5e:	ef 01       	movw	r28, r30
    2e60:	63 de       	rcall	.-826    	; 0x2b28 <__addsf3x>
    2e62:	fe 01       	movw	r30, r28
    2e64:	97 01       	movw	r18, r14
    2e66:	a8 01       	movw	r20, r16
    2e68:	da 94       	dec	r13
    2e6a:	79 f7       	brne	.-34     	; 0x2e4a <__fp_powser+0x18>
    2e6c:	df 90       	pop	r13
    2e6e:	ef 90       	pop	r14
    2e70:	ff 90       	pop	r15
    2e72:	0f 91       	pop	r16
    2e74:	1f 91       	pop	r17
    2e76:	cf 91       	pop	r28
    2e78:	df 91       	pop	r29
    2e7a:	08 95       	ret

00002e7c <__fp_pscA>:
    2e7c:	00 24       	eor	r0, r0
    2e7e:	0a 94       	dec	r0
    2e80:	16 16       	cp	r1, r22
    2e82:	17 06       	cpc	r1, r23
    2e84:	18 06       	cpc	r1, r24
    2e86:	09 06       	cpc	r0, r25
    2e88:	08 95       	ret

00002e8a <__fp_pscB>:
    2e8a:	00 24       	eor	r0, r0
    2e8c:	0a 94       	dec	r0
    2e8e:	12 16       	cp	r1, r18
    2e90:	13 06       	cpc	r1, r19
    2e92:	14 06       	cpc	r1, r20
    2e94:	05 06       	cpc	r0, r21
    2e96:	08 95       	ret
    2e98:	c9 cf       	rjmp	.-110    	; 0x2e2c <__fp_nan>

00002e9a <__fp_rempio2>:
    2e9a:	50 d0       	rcall	.+160    	; 0x2f3c <__fp_splitA>
    2e9c:	e8 f3       	brcs	.-6      	; 0x2e98 <__fp_pscB+0xe>
    2e9e:	e8 94       	clt
    2ea0:	e0 e0       	ldi	r30, 0x00	; 0
    2ea2:	bb 27       	eor	r27, r27
    2ea4:	9f 57       	subi	r25, 0x7F	; 127
    2ea6:	f0 f0       	brcs	.+60     	; 0x2ee4 <__fp_rempio2+0x4a>
    2ea8:	2a ed       	ldi	r18, 0xDA	; 218
    2eaa:	3f e0       	ldi	r19, 0x0F	; 15
    2eac:	49 ec       	ldi	r20, 0xC9	; 201
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <__fp_rempio2+0x22>
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	bb 0f       	add	r27, r27
    2eb4:	66 1f       	adc	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	88 1f       	adc	r24, r24
    2eba:	28 f0       	brcs	.+10     	; 0x2ec6 <__fp_rempio2+0x2c>
    2ebc:	b2 3a       	cpi	r27, 0xA2	; 162
    2ebe:	62 07       	cpc	r22, r18
    2ec0:	73 07       	cpc	r23, r19
    2ec2:	84 07       	cpc	r24, r20
    2ec4:	28 f0       	brcs	.+10     	; 0x2ed0 <__fp_rempio2+0x36>
    2ec6:	b2 5a       	subi	r27, 0xA2	; 162
    2ec8:	62 0b       	sbc	r22, r18
    2eca:	73 0b       	sbc	r23, r19
    2ecc:	84 0b       	sbc	r24, r20
    2ece:	e3 95       	inc	r30
    2ed0:	9a 95       	dec	r25
    2ed2:	72 f7       	brpl	.-36     	; 0x2eb0 <__fp_rempio2+0x16>
    2ed4:	80 38       	cpi	r24, 0x80	; 128
    2ed6:	30 f4       	brcc	.+12     	; 0x2ee4 <__fp_rempio2+0x4a>
    2ed8:	9a 95       	dec	r25
    2eda:	bb 0f       	add	r27, r27
    2edc:	66 1f       	adc	r22, r22
    2ede:	77 1f       	adc	r23, r23
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	d2 f7       	brpl	.-12     	; 0x2ed8 <__fp_rempio2+0x3e>
    2ee4:	90 48       	sbci	r25, 0x80	; 128
    2ee6:	06 c1       	rjmp	.+524    	; 0x30f4 <__fp_mpack_finite>

00002ee8 <__fp_round>:
    2ee8:	09 2e       	mov	r0, r25
    2eea:	03 94       	inc	r0
    2eec:	00 0c       	add	r0, r0
    2eee:	11 f4       	brne	.+4      	; 0x2ef4 <__fp_round+0xc>
    2ef0:	88 23       	and	r24, r24
    2ef2:	52 f0       	brmi	.+20     	; 0x2f08 <__fp_round+0x20>
    2ef4:	bb 0f       	add	r27, r27
    2ef6:	40 f4       	brcc	.+16     	; 0x2f08 <__fp_round+0x20>
    2ef8:	bf 2b       	or	r27, r31
    2efa:	11 f4       	brne	.+4      	; 0x2f00 <__fp_round+0x18>
    2efc:	60 ff       	sbrs	r22, 0
    2efe:	04 c0       	rjmp	.+8      	; 0x2f08 <__fp_round+0x20>
    2f00:	6f 5f       	subi	r22, 0xFF	; 255
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255
    2f04:	8f 4f       	sbci	r24, 0xFF	; 255
    2f06:	9f 4f       	sbci	r25, 0xFF	; 255
    2f08:	08 95       	ret

00002f0a <__fp_sinus>:
    2f0a:	ef 93       	push	r30
    2f0c:	e0 ff       	sbrs	r30, 0
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <__fp_sinus+0x12>
    2f10:	a2 ea       	ldi	r26, 0xA2	; 162
    2f12:	2a ed       	ldi	r18, 0xDA	; 218
    2f14:	3f e0       	ldi	r19, 0x0F	; 15
    2f16:	49 ec       	ldi	r20, 0xC9	; 201
    2f18:	5f eb       	ldi	r21, 0xBF	; 191
    2f1a:	06 de       	rcall	.-1012   	; 0x2b28 <__addsf3x>
    2f1c:	e5 df       	rcall	.-54     	; 0x2ee8 <__fp_round>
    2f1e:	0f 90       	pop	r0
    2f20:	03 94       	inc	r0
    2f22:	01 fc       	sbrc	r0, 1
    2f24:	90 58       	subi	r25, 0x80	; 128
    2f26:	e1 e1       	ldi	r30, 0x11	; 17
    2f28:	f1 e0       	ldi	r31, 0x01	; 1
    2f2a:	f7 c0       	rjmp	.+494    	; 0x311a <__fp_powsodd>

00002f2c <__fp_split3>:
    2f2c:	57 fd       	sbrc	r21, 7
    2f2e:	90 58       	subi	r25, 0x80	; 128
    2f30:	44 0f       	add	r20, r20
    2f32:	55 1f       	adc	r21, r21
    2f34:	59 f0       	breq	.+22     	; 0x2f4c <__fp_splitA+0x10>
    2f36:	5f 3f       	cpi	r21, 0xFF	; 255
    2f38:	71 f0       	breq	.+28     	; 0x2f56 <__fp_splitA+0x1a>
    2f3a:	47 95       	ror	r20

00002f3c <__fp_splitA>:
    2f3c:	88 0f       	add	r24, r24
    2f3e:	97 fb       	bst	r25, 7
    2f40:	99 1f       	adc	r25, r25
    2f42:	61 f0       	breq	.+24     	; 0x2f5c <__fp_splitA+0x20>
    2f44:	9f 3f       	cpi	r25, 0xFF	; 255
    2f46:	79 f0       	breq	.+30     	; 0x2f66 <__fp_splitA+0x2a>
    2f48:	87 95       	ror	r24
    2f4a:	08 95       	ret
    2f4c:	12 16       	cp	r1, r18
    2f4e:	13 06       	cpc	r1, r19
    2f50:	14 06       	cpc	r1, r20
    2f52:	55 1f       	adc	r21, r21
    2f54:	f2 cf       	rjmp	.-28     	; 0x2f3a <__fp_split3+0xe>
    2f56:	46 95       	lsr	r20
    2f58:	f1 df       	rcall	.-30     	; 0x2f3c <__fp_splitA>
    2f5a:	08 c0       	rjmp	.+16     	; 0x2f6c <__fp_splitA+0x30>
    2f5c:	16 16       	cp	r1, r22
    2f5e:	17 06       	cpc	r1, r23
    2f60:	18 06       	cpc	r1, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	f1 cf       	rjmp	.-30     	; 0x2f48 <__fp_splitA+0xc>
    2f66:	86 95       	lsr	r24
    2f68:	71 05       	cpc	r23, r1
    2f6a:	61 05       	cpc	r22, r1
    2f6c:	08 94       	sec
    2f6e:	08 95       	ret

00002f70 <__fp_zero>:
    2f70:	e8 94       	clt

00002f72 <__fp_szero>:
    2f72:	bb 27       	eor	r27, r27
    2f74:	66 27       	eor	r22, r22
    2f76:	77 27       	eor	r23, r23
    2f78:	cb 01       	movw	r24, r22
    2f7a:	97 f9       	bld	r25, 7
    2f7c:	08 95       	ret

00002f7e <__gesf2>:
    2f7e:	2c df       	rcall	.-424    	; 0x2dd8 <__fp_cmp>
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <__gesf2+0x6>
    2f82:	8f ef       	ldi	r24, 0xFF	; 255
    2f84:	08 95       	ret

00002f86 <inverse>:
    2f86:	9b 01       	movw	r18, r22
    2f88:	ac 01       	movw	r20, r24
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	80 e8       	ldi	r24, 0x80	; 128
    2f90:	9f e3       	ldi	r25, 0x3F	; 63
    2f92:	4c ce       	rjmp	.-872    	; 0x2c2c <__divsf3>

00002f94 <__mulsf3>:
    2f94:	0b d0       	rcall	.+22     	; 0x2fac <__mulsf3x>
    2f96:	a8 cf       	rjmp	.-176    	; 0x2ee8 <__fp_round>
    2f98:	71 df       	rcall	.-286    	; 0x2e7c <__fp_pscA>
    2f9a:	28 f0       	brcs	.+10     	; 0x2fa6 <__mulsf3+0x12>
    2f9c:	76 df       	rcall	.-276    	; 0x2e8a <__fp_pscB>
    2f9e:	18 f0       	brcs	.+6      	; 0x2fa6 <__mulsf3+0x12>
    2fa0:	95 23       	and	r25, r21
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <__mulsf3+0x12>
    2fa4:	3d cf       	rjmp	.-390    	; 0x2e20 <__fp_inf>
    2fa6:	42 cf       	rjmp	.-380    	; 0x2e2c <__fp_nan>
    2fa8:	11 24       	eor	r1, r1
    2faa:	e3 cf       	rjmp	.-58     	; 0x2f72 <__fp_szero>

00002fac <__mulsf3x>:
    2fac:	bf df       	rcall	.-130    	; 0x2f2c <__fp_split3>
    2fae:	a0 f3       	brcs	.-24     	; 0x2f98 <__mulsf3+0x4>

00002fb0 <__mulsf3_pse>:
    2fb0:	95 9f       	mul	r25, r21
    2fb2:	d1 f3       	breq	.-12     	; 0x2fa8 <__mulsf3+0x14>
    2fb4:	95 0f       	add	r25, r21
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	55 1f       	adc	r21, r21
    2fba:	62 9f       	mul	r22, r18
    2fbc:	f0 01       	movw	r30, r0
    2fbe:	72 9f       	mul	r23, r18
    2fc0:	bb 27       	eor	r27, r27
    2fc2:	f0 0d       	add	r31, r0
    2fc4:	b1 1d       	adc	r27, r1
    2fc6:	63 9f       	mul	r22, r19
    2fc8:	aa 27       	eor	r26, r26
    2fca:	f0 0d       	add	r31, r0
    2fcc:	b1 1d       	adc	r27, r1
    2fce:	aa 1f       	adc	r26, r26
    2fd0:	64 9f       	mul	r22, r20
    2fd2:	66 27       	eor	r22, r22
    2fd4:	b0 0d       	add	r27, r0
    2fd6:	a1 1d       	adc	r26, r1
    2fd8:	66 1f       	adc	r22, r22
    2fda:	82 9f       	mul	r24, r18
    2fdc:	22 27       	eor	r18, r18
    2fde:	b0 0d       	add	r27, r0
    2fe0:	a1 1d       	adc	r26, r1
    2fe2:	62 1f       	adc	r22, r18
    2fe4:	73 9f       	mul	r23, r19
    2fe6:	b0 0d       	add	r27, r0
    2fe8:	a1 1d       	adc	r26, r1
    2fea:	62 1f       	adc	r22, r18
    2fec:	83 9f       	mul	r24, r19
    2fee:	a0 0d       	add	r26, r0
    2ff0:	61 1d       	adc	r22, r1
    2ff2:	22 1f       	adc	r18, r18
    2ff4:	74 9f       	mul	r23, r20
    2ff6:	33 27       	eor	r19, r19
    2ff8:	a0 0d       	add	r26, r0
    2ffa:	61 1d       	adc	r22, r1
    2ffc:	23 1f       	adc	r18, r19
    2ffe:	84 9f       	mul	r24, r20
    3000:	60 0d       	add	r22, r0
    3002:	21 1d       	adc	r18, r1
    3004:	82 2f       	mov	r24, r18
    3006:	76 2f       	mov	r23, r22
    3008:	6a 2f       	mov	r22, r26
    300a:	11 24       	eor	r1, r1
    300c:	9f 57       	subi	r25, 0x7F	; 127
    300e:	50 40       	sbci	r21, 0x00	; 0
    3010:	8a f0       	brmi	.+34     	; 0x3034 <__mulsf3_pse+0x84>
    3012:	e1 f0       	breq	.+56     	; 0x304c <__mulsf3_pse+0x9c>
    3014:	88 23       	and	r24, r24
    3016:	4a f0       	brmi	.+18     	; 0x302a <__mulsf3_pse+0x7a>
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	bb 1f       	adc	r27, r27
    301e:	66 1f       	adc	r22, r22
    3020:	77 1f       	adc	r23, r23
    3022:	88 1f       	adc	r24, r24
    3024:	91 50       	subi	r25, 0x01	; 1
    3026:	50 40       	sbci	r21, 0x00	; 0
    3028:	a9 f7       	brne	.-22     	; 0x3014 <__mulsf3_pse+0x64>
    302a:	9e 3f       	cpi	r25, 0xFE	; 254
    302c:	51 05       	cpc	r21, r1
    302e:	70 f0       	brcs	.+28     	; 0x304c <__mulsf3_pse+0x9c>
    3030:	f7 ce       	rjmp	.-530    	; 0x2e20 <__fp_inf>
    3032:	9f cf       	rjmp	.-194    	; 0x2f72 <__fp_szero>
    3034:	5f 3f       	cpi	r21, 0xFF	; 255
    3036:	ec f3       	brlt	.-6      	; 0x3032 <__mulsf3_pse+0x82>
    3038:	98 3e       	cpi	r25, 0xE8	; 232
    303a:	dc f3       	brlt	.-10     	; 0x3032 <__mulsf3_pse+0x82>
    303c:	86 95       	lsr	r24
    303e:	77 95       	ror	r23
    3040:	67 95       	ror	r22
    3042:	b7 95       	ror	r27
    3044:	f7 95       	ror	r31
    3046:	e7 95       	ror	r30
    3048:	9f 5f       	subi	r25, 0xFF	; 255
    304a:	c1 f7       	brne	.-16     	; 0x303c <__mulsf3_pse+0x8c>
    304c:	fe 2b       	or	r31, r30
    304e:	88 0f       	add	r24, r24
    3050:	91 1d       	adc	r25, r1
    3052:	96 95       	lsr	r25
    3054:	87 95       	ror	r24
    3056:	97 f9       	bld	r25, 7
    3058:	08 95       	ret

0000305a <sin>:
    305a:	9f 93       	push	r25
    305c:	1e df       	rcall	.-452    	; 0x2e9a <__fp_rempio2>
    305e:	0f 90       	pop	r0
    3060:	07 fc       	sbrc	r0, 7
    3062:	ee 5f       	subi	r30, 0xFE	; 254
    3064:	52 cf       	rjmp	.-348    	; 0x2f0a <__fp_sinus>
    3066:	11 f4       	brne	.+4      	; 0x306c <sin+0x12>
    3068:	0e f4       	brtc	.+2      	; 0x306c <sin+0x12>
    306a:	e0 ce       	rjmp	.-576    	; 0x2e2c <__fp_nan>
    306c:	41 c0       	rjmp	.+130    	; 0x30f0 <__fp_mpack>

0000306e <sqrt>:
    306e:	66 df       	rcall	.-308    	; 0x2f3c <__fp_splitA>
    3070:	d0 f3       	brcs	.-12     	; 0x3066 <sin+0xc>
    3072:	99 23       	and	r25, r25
    3074:	d9 f3       	breq	.-10     	; 0x306c <sin+0x12>
    3076:	ce f3       	brts	.-14     	; 0x306a <sin+0x10>
    3078:	9f 57       	subi	r25, 0x7F	; 127
    307a:	55 0b       	sbc	r21, r21
    307c:	87 ff       	sbrs	r24, 7
    307e:	46 d0       	rcall	.+140    	; 0x310c <__fp_norm2>
    3080:	00 24       	eor	r0, r0
    3082:	a0 e6       	ldi	r26, 0x60	; 96
    3084:	40 ea       	ldi	r20, 0xA0	; 160
    3086:	90 01       	movw	r18, r0
    3088:	80 58       	subi	r24, 0x80	; 128
    308a:	56 95       	lsr	r21
    308c:	97 95       	ror	r25
    308e:	28 f4       	brcc	.+10     	; 0x309a <sqrt+0x2c>
    3090:	80 5c       	subi	r24, 0xC0	; 192
    3092:	66 0f       	add	r22, r22
    3094:	77 1f       	adc	r23, r23
    3096:	88 1f       	adc	r24, r24
    3098:	20 f0       	brcs	.+8      	; 0x30a2 <sqrt+0x34>
    309a:	26 17       	cp	r18, r22
    309c:	37 07       	cpc	r19, r23
    309e:	48 07       	cpc	r20, r24
    30a0:	30 f4       	brcc	.+12     	; 0x30ae <sqrt+0x40>
    30a2:	62 1b       	sub	r22, r18
    30a4:	73 0b       	sbc	r23, r19
    30a6:	84 0b       	sbc	r24, r20
    30a8:	20 29       	or	r18, r0
    30aa:	31 29       	or	r19, r1
    30ac:	4a 2b       	or	r20, r26
    30ae:	a6 95       	lsr	r26
    30b0:	17 94       	ror	r1
    30b2:	07 94       	ror	r0
    30b4:	20 25       	eor	r18, r0
    30b6:	31 25       	eor	r19, r1
    30b8:	4a 27       	eor	r20, r26
    30ba:	58 f7       	brcc	.-42     	; 0x3092 <sqrt+0x24>
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	88 1f       	adc	r24, r24
    30c2:	20 f0       	brcs	.+8      	; 0x30cc <sqrt+0x5e>
    30c4:	26 17       	cp	r18, r22
    30c6:	37 07       	cpc	r19, r23
    30c8:	48 07       	cpc	r20, r24
    30ca:	30 f4       	brcc	.+12     	; 0x30d8 <sqrt+0x6a>
    30cc:	62 0b       	sbc	r22, r18
    30ce:	73 0b       	sbc	r23, r19
    30d0:	84 0b       	sbc	r24, r20
    30d2:	20 0d       	add	r18, r0
    30d4:	31 1d       	adc	r19, r1
    30d6:	41 1d       	adc	r20, r1
    30d8:	a0 95       	com	r26
    30da:	81 f7       	brne	.-32     	; 0x30bc <sqrt+0x4e>
    30dc:	b9 01       	movw	r22, r18
    30de:	84 2f       	mov	r24, r20
    30e0:	91 58       	subi	r25, 0x81	; 129
    30e2:	88 0f       	add	r24, r24
    30e4:	96 95       	lsr	r25
    30e6:	87 95       	ror	r24
    30e8:	08 95       	ret

000030ea <square>:
    30ea:	9b 01       	movw	r18, r22
    30ec:	ac 01       	movw	r20, r24
    30ee:	52 cf       	rjmp	.-348    	; 0x2f94 <__mulsf3>

000030f0 <__fp_mpack>:
    30f0:	9f 3f       	cpi	r25, 0xFF	; 255
    30f2:	31 f0       	breq	.+12     	; 0x3100 <__fp_mpack_finite+0xc>

000030f4 <__fp_mpack_finite>:
    30f4:	91 50       	subi	r25, 0x01	; 1
    30f6:	20 f4       	brcc	.+8      	; 0x3100 <__fp_mpack_finite+0xc>
    30f8:	87 95       	ror	r24
    30fa:	77 95       	ror	r23
    30fc:	67 95       	ror	r22
    30fe:	b7 95       	ror	r27
    3100:	88 0f       	add	r24, r24
    3102:	91 1d       	adc	r25, r1
    3104:	96 95       	lsr	r25
    3106:	87 95       	ror	r24
    3108:	97 f9       	bld	r25, 7
    310a:	08 95       	ret

0000310c <__fp_norm2>:
    310c:	91 50       	subi	r25, 0x01	; 1
    310e:	50 40       	sbci	r21, 0x00	; 0
    3110:	66 0f       	add	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	d2 f7       	brpl	.-12     	; 0x310c <__fp_norm2>
    3118:	08 95       	ret

0000311a <__fp_powsodd>:
    311a:	9f 93       	push	r25
    311c:	8f 93       	push	r24
    311e:	7f 93       	push	r23
    3120:	6f 93       	push	r22
    3122:	ff 93       	push	r31
    3124:	ef 93       	push	r30
    3126:	9b 01       	movw	r18, r22
    3128:	ac 01       	movw	r20, r24
    312a:	34 df       	rcall	.-408    	; 0x2f94 <__mulsf3>
    312c:	ef 91       	pop	r30
    312e:	ff 91       	pop	r31
    3130:	80 de       	rcall	.-768    	; 0x2e32 <__fp_powser>
    3132:	2f 91       	pop	r18
    3134:	3f 91       	pop	r19
    3136:	4f 91       	pop	r20
    3138:	5f 91       	pop	r21
    313a:	2c cf       	rjmp	.-424    	; 0x2f94 <__mulsf3>

0000313c <__udivmodhi4>:
    313c:	aa 1b       	sub	r26, r26
    313e:	bb 1b       	sub	r27, r27
    3140:	51 e1       	ldi	r21, 0x11	; 17
    3142:	07 c0       	rjmp	.+14     	; 0x3152 <__udivmodhi4_ep>

00003144 <__udivmodhi4_loop>:
    3144:	aa 1f       	adc	r26, r26
    3146:	bb 1f       	adc	r27, r27
    3148:	a6 17       	cp	r26, r22
    314a:	b7 07       	cpc	r27, r23
    314c:	10 f0       	brcs	.+4      	; 0x3152 <__udivmodhi4_ep>
    314e:	a6 1b       	sub	r26, r22
    3150:	b7 0b       	sbc	r27, r23

00003152 <__udivmodhi4_ep>:
    3152:	88 1f       	adc	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	5a 95       	dec	r21
    3158:	a9 f7       	brne	.-22     	; 0x3144 <__udivmodhi4_loop>
    315a:	80 95       	com	r24
    315c:	90 95       	com	r25
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	08 95       	ret

00003164 <_exit>:
    3164:	f8 94       	cli

00003166 <__stop_program>:
    3166:	ff cf       	rjmp	.-2      	; 0x3166 <__stop_program>
