
20170610-IR_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002a  00800200  00800200  00002b1c  2**0
                  ALLOC
  2 .stab         000023f4  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000768  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00005678  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a2  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029b  00000000  00000000  00006bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000833  00000000  00000000  00006e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008b8  00000000  00000000  00007688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059e  00000000  00000000  00007f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001145  00000000  00000000  000084de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_5>
      18:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ea       	ldi	r30, 0xA8	; 168
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 30       	cpi	r26, 0x00	; 0
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 32       	cpi	r26, 0x2A	; 42
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 0a 12 	call	0x2414	; 0x2414 <main>
     122:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	a0 e8       	ldi	r26, 0x80	; 128
     14a:	bf e3       	ldi	r27, 0x3F	; 63
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	9a 83       	std	Y+2, r25	; 0x02
     150:	ab 83       	std	Y+3, r26	; 0x03
     152:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	7a 81       	ldd	r23, Y+2	; 0x02
     158:	8b 81       	ldd	r24, Y+3	; 0x03
     15a:	9c 81       	ldd	r25, Y+4	; 0x04
     15c:	26 e6       	ldi	r18, 0x66	; 102
     15e:	36 e6       	ldi	r19, 0x66	; 102
     160:	46 e6       	ldi	r20, 0x66	; 102
     162:	55 e4       	ldi	r21, 0x45	; 69
     164:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	9e 83       	std	Y+6, r25	; 0x06
     170:	af 83       	std	Y+7, r26	; 0x07
     172:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5f e3       	ldi	r21, 0x3F	; 63
     186:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     18a:	88 23       	and	r24, r24
     18c:	0c f0       	brlt	.+2      	; 0x190 <lcd_set_4bit+0x66>
     18e:	10 e0       	ldi	r17, 0x00	; 0
     190:	11 23       	and	r17, r17
     192:	29 f0       	breq	.+10     	; 0x19e <lcd_set_4bit+0x74>
		__ticks = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	46 c0       	rjmp	.+140    	; 0x22a <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     19e:	11 e0       	ldi	r17, 0x01	; 1
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	3f ef       	ldi	r19, 0xFF	; 255
     1ac:	4f e7       	ldi	r20, 0x7F	; 127
     1ae:	57 e4       	ldi	r21, 0x47	; 71
     1b0:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     1b4:	18 16       	cp	r1, r24
     1b6:	0c f0       	brlt	.+2      	; 0x1ba <lcd_set_4bit+0x90>
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	11 23       	and	r17, r17
     1bc:	61 f1       	breq	.+88     	; 0x216 <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1be:	69 81       	ldd	r22, Y+1	; 0x01
     1c0:	7a 81       	ldd	r23, Y+2	; 0x02
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e2       	ldi	r20, 0x20	; 32
     1cc:	51 e4       	ldi	r21, 0x41	; 65
     1ce:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	9a 87       	std	Y+10, r25	; 0x0a
     1e4:	89 87       	std	Y+9, r24	; 0x09
     1e6:	12 c0       	rjmp	.+36     	; 0x20c <lcd_set_4bit+0xe2>
     1e8:	80 e7       	ldi	r24, 0x70	; 112
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9c 87       	std	Y+12, r25	; 0x0c
     1ee:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f4:	8c 01       	movw	r16, r24
     1f6:	c8 01       	movw	r24, r16
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_set_4bit+0xce>
     1fc:	8c 01       	movw	r16, r24
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
     200:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     202:	89 85       	ldd	r24, Y+9	; 0x09
     204:	9a 85       	ldd	r25, Y+10	; 0x0a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	51 f7       	brne	.-44     	; 0x1e8 <lcd_set_4bit+0xbe>
     214:	17 c0       	rjmp	.+46     	; 0x244 <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	9e 87       	std	Y+14, r25	; 0x0e
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	8d 85       	ldd	r24, Y+13	; 0x0d
     234:	9e 85       	ldd	r25, Y+14	; 0x0e
     236:	8c 01       	movw	r16, r24
     238:	f8 01       	movw	r30, r16
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x110>
     23e:	8f 01       	movw	r16, r30
     240:	1e 87       	std	Y+14, r17	; 0x0e
     242:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	88 e2       	ldi	r24, 0x28	; 40
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	28 e2       	ldi	r18, 0x28	; 40
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2e 7f       	andi	r18, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     256:	88 e2       	ldi	r24, 0x28	; 40
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e2       	ldi	r18, 0x28	; 40
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	2d 7f       	andi	r18, 0xFD	; 253
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     268:	88 e2       	ldi	r24, 0x28	; 40
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	20 e3       	ldi	r18, 0x30	; 48
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	28 e2       	ldi	r18, 0x28	; 40
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	24 60       	ori	r18, 0x04	; 4
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b0 e4       	ldi	r27, 0x40	; 64
     28c:	8f 87       	std	Y+15, r24	; 0x0f
     28e:	98 8b       	std	Y+16, r25	; 0x10
     290:	a9 8b       	std	Y+17, r26	; 0x11
     292:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     294:	6f 85       	ldd	r22, Y+15	; 0x0f
     296:	78 89       	ldd	r23, Y+16	; 0x10
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	9a 89       	ldd	r25, Y+18	; 0x12
     29c:	26 e6       	ldi	r18, 0x66	; 102
     29e:	36 e6       	ldi	r19, 0x66	; 102
     2a0:	46 e6       	ldi	r20, 0x66	; 102
     2a2:	55 e4       	ldi	r21, 0x45	; 69
     2a4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8b 8b       	std	Y+19, r24	; 0x13
     2ae:	9c 8b       	std	Y+20, r25	; 0x14
     2b0:	ad 8b       	std	Y+21, r26	; 0x15
     2b2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	6b 89       	ldd	r22, Y+19	; 0x13
     2b8:	7c 89       	ldd	r23, Y+20	; 0x14
     2ba:	8d 89       	ldd	r24, Y+21	; 0x15
     2bc:	9e 89       	ldd	r25, Y+22	; 0x16
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e8       	ldi	r20, 0x80	; 128
     2c4:	5f e3       	ldi	r21, 0x3F	; 63
     2c6:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     2ca:	88 23       	and	r24, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <lcd_set_4bit+0x1a6>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	29 f0       	breq	.+10     	; 0x2de <lcd_set_4bit+0x1b4>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	98 8f       	std	Y+24, r25	; 0x18
     2da:	8f 8b       	std	Y+23, r24	; 0x17
     2dc:	46 c0       	rjmp	.+140    	; 0x36a <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	7c 89       	ldd	r23, Y+20	; 0x14
     2e4:	8d 89       	ldd	r24, Y+21	; 0x15
     2e6:	9e 89       	ldd	r25, Y+22	; 0x16
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	4f e7       	ldi	r20, 0x7F	; 127
     2ee:	57 e4       	ldi	r21, 0x47	; 71
     2f0:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     2f4:	18 16       	cp	r1, r24
     2f6:	0c f0       	brlt	.+2      	; 0x2fa <lcd_set_4bit+0x1d0>
     2f8:	10 e0       	ldi	r17, 0x00	; 0
     2fa:	11 23       	and	r17, r17
     2fc:	61 f1       	breq	.+88     	; 0x356 <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     300:	78 89       	ldd	r23, Y+16	; 0x10
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	9a 89       	ldd	r25, Y+18	; 0x12
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e2       	ldi	r20, 0x20	; 32
     30c:	51 e4       	ldi	r21, 0x41	; 65
     30e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     31e:	dc 01       	movw	r26, r24
     320:	cb 01       	movw	r24, r22
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	8f 8b       	std	Y+23, r24	; 0x17
     326:	12 c0       	rjmp	.+36     	; 0x34c <lcd_set_4bit+0x222>
     328:	80 e7       	ldi	r24, 0x70	; 112
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9a 8f       	std	Y+26, r25	; 0x1a
     32e:	89 8f       	std	Y+25, r24	; 0x19
     330:	89 8d       	ldd	r24, Y+25	; 0x19
     332:	9a 8d       	ldd	r25, Y+26	; 0x1a
     334:	8c 01       	movw	r16, r24
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_set_4bit+0x20e>
     33c:	8c 01       	movw	r16, r24
     33e:	1a 8f       	std	Y+26, r17	; 0x1a
     340:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	8f 89       	ldd	r24, Y+23	; 0x17
     344:	98 8d       	ldd	r25, Y+24	; 0x18
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	98 8f       	std	Y+24, r25	; 0x18
     34a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	8f 89       	ldd	r24, Y+23	; 0x17
     34e:	98 8d       	ldd	r25, Y+24	; 0x18
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	51 f7       	brne	.-44     	; 0x328 <lcd_set_4bit+0x1fe>
     354:	17 c0       	rjmp	.+46     	; 0x384 <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     356:	6b 89       	ldd	r22, Y+19	; 0x13
     358:	7c 89       	ldd	r23, Y+20	; 0x14
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	9e 89       	ldd	r25, Y+22	; 0x16
     35e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	98 8f       	std	Y+24, r25	; 0x18
     368:	8f 8b       	std	Y+23, r24	; 0x17
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	9c 8f       	std	Y+28, r25	; 0x1c
     370:	8b 8f       	std	Y+27, r24	; 0x1b
     372:	8b 8d       	ldd	r24, Y+27	; 0x1b
     374:	9c 8d       	ldd	r25, Y+28	; 0x1c
     376:	8c 01       	movw	r16, r24
     378:	f8 01       	movw	r30, r16
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_set_4bit+0x250>
     37e:	8f 01       	movw	r16, r30
     380:	1c 8f       	std	Y+28, r17	; 0x1c
     382:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     384:	88 e2       	ldi	r24, 0x28	; 40
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 e2       	ldi	r18, 0x28	; 40
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	2b 7f       	andi	r18, 0xFB	; 251
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	a0 e8       	ldi	r26, 0x80	; 128
     39c:	bf e3       	ldi	r27, 0x3F	; 63
     39e:	8d 8f       	std	Y+29, r24	; 0x1d
     3a0:	9e 8f       	std	Y+30, r25	; 0x1e
     3a2:	af 8f       	std	Y+31, r26	; 0x1f
     3a4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     3a8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     3aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3ac:	98 a1       	lds	r25, 0x48
     3ae:	26 e6       	ldi	r18, 0x66	; 102
     3b0:	36 e6       	ldi	r19, 0x66	; 102
     3b2:	46 e6       	ldi	r20, 0x66	; 102
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	89 a3       	lds	r24, 0x59
     3c0:	9a a3       	lds	r25, 0x5a
     3c2:	ab a3       	lds	r26, 0x5b
     3c4:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	69 a1       	lds	r22, 0x49
     3ca:	7a a1       	lds	r23, 0x4a
     3cc:	8b a1       	lds	r24, 0x4b
     3ce:	9c a1       	lds	r25, 0x4c
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e8       	ldi	r20, 0x80	; 128
     3d6:	5f e3       	ldi	r21, 0x3F	; 63
     3d8:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     3dc:	88 23       	and	r24, r24
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <lcd_set_4bit+0x2b8>
     3e0:	10 e0       	ldi	r17, 0x00	; 0
     3e2:	11 23       	and	r17, r17
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9e a3       	lds	r25, 0x5e
     3ec:	8d a3       	lds	r24, 0x5d
     3ee:	46 c0       	rjmp	.+140    	; 0x47c <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     3f0:	11 e0       	ldi	r17, 0x01	; 1
     3f2:	69 a1       	lds	r22, 0x49
     3f4:	7a a1       	lds	r23, 0x4a
     3f6:	8b a1       	lds	r24, 0x4b
     3f8:	9c a1       	lds	r25, 0x4c
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	3f ef       	ldi	r19, 0xFF	; 255
     3fe:	4f e7       	ldi	r20, 0x7F	; 127
     400:	57 e4       	ldi	r21, 0x47	; 71
     402:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     406:	18 16       	cp	r1, r24
     408:	0c f0       	brlt	.+2      	; 0x40c <lcd_set_4bit+0x2e2>
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	11 23       	and	r17, r17
     40e:	61 f1       	breq	.+88     	; 0x468 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     410:	6d 8d       	ldd	r22, Y+29	; 0x1d
     412:	7e 8d       	ldd	r23, Y+30	; 0x1e
     414:	8f 8d       	ldd	r24, Y+31	; 0x1f
     416:	98 a1       	lds	r25, 0x48
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e2       	ldi	r20, 0x20	; 32
     41e:	51 e4       	ldi	r21, 0x41	; 65
     420:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	bc 01       	movw	r22, r24
     42a:	cd 01       	movw	r24, r26
     42c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	9e a3       	lds	r25, 0x5e
     436:	8d a3       	lds	r24, 0x5d
     438:	12 c0       	rjmp	.+36     	; 0x45e <lcd_set_4bit+0x334>
     43a:	80 e7       	ldi	r24, 0x70	; 112
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	98 a7       	lds	r25, 0x78
     440:	8f a3       	lds	r24, 0x5f
     442:	8f a1       	lds	r24, 0x4f
     444:	98 a5       	lds	r25, 0x68
     446:	8c 01       	movw	r16, r24
     448:	c8 01       	movw	r24, r16
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_set_4bit+0x320>
     44e:	8c 01       	movw	r16, r24
     450:	18 a7       	lds	r17, 0x78
     452:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     454:	8d a1       	lds	r24, 0x4d
     456:	9e a1       	lds	r25, 0x4e
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	9e a3       	lds	r25, 0x5e
     45c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	8d a1       	lds	r24, 0x4d
     460:	9e a1       	lds	r25, 0x4e
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	51 f7       	brne	.-44     	; 0x43a <lcd_set_4bit+0x310>
     466:	17 c0       	rjmp	.+46     	; 0x496 <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     468:	69 a1       	lds	r22, 0x49
     46a:	7a a1       	lds	r23, 0x4a
     46c:	8b a1       	lds	r24, 0x4b
     46e:	9c a1       	lds	r25, 0x4c
     470:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	9e a3       	lds	r25, 0x5e
     47a:	8d a3       	lds	r24, 0x5d
     47c:	8d a1       	lds	r24, 0x4d
     47e:	9e a1       	lds	r25, 0x4e
     480:	9a a7       	lds	r25, 0x7a
     482:	89 a7       	lds	r24, 0x79
     484:	89 a5       	lds	r24, 0x69
     486:	9a a5       	lds	r25, 0x6a
     488:	8c 01       	movw	r16, r24
     48a:	f8 01       	movw	r30, r16
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x362>
     490:	8f 01       	movw	r16, r30
     492:	1a a7       	lds	r17, 0x7a
     494:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	88 e2       	ldi	r24, 0x28	; 40
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e2       	ldi	r18, 0x28	; 40
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	2e 7f       	andi	r18, 0xFE	; 254
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e2       	ldi	r18, 0x28	; 40
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2d 7f       	andi	r18, 0xFD	; 253
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     4ba:	88 e2       	ldi	r24, 0x28	; 40
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     4c4:	88 e2       	ldi	r24, 0x28	; 40
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	f9 01       	movw	r30, r18
     4ce:	20 81       	ld	r18, Z
     4d0:	24 60       	ori	r18, 0x04	; 4
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 ea       	ldi	r26, 0xA0	; 160
     4dc:	b0 e4       	ldi	r27, 0x40	; 64
     4de:	8b a7       	lds	r24, 0x7b
     4e0:	9c a7       	lds	r25, 0x7c
     4e2:	ad a7       	lds	r26, 0x7d
     4e4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     4e6:	6b a5       	lds	r22, 0x6b
     4e8:	7c a5       	lds	r23, 0x6c
     4ea:	8d a5       	lds	r24, 0x6d
     4ec:	9e a5       	lds	r25, 0x6e
     4ee:	26 e6       	ldi	r18, 0x66	; 102
     4f0:	36 e6       	ldi	r19, 0x66	; 102
     4f2:	46 e6       	ldi	r20, 0x66	; 102
     4f4:	55 e4       	ldi	r21, 0x45	; 69
     4f6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	8f a7       	lds	r24, 0x7f
     500:	98 ab       	sts	0x58, r25
     502:	a9 ab       	sts	0x59, r26
     504:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     506:	11 e0       	ldi	r17, 0x01	; 1
     508:	6f a5       	lds	r22, 0x6f
     50a:	78 a9       	sts	0x48, r23
     50c:	89 a9       	sts	0x49, r24
     50e:	9a a9       	sts	0x4a, r25
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5f e3       	ldi	r21, 0x3F	; 63
     518:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	0c f0       	brlt	.+2      	; 0x522 <lcd_set_4bit+0x3f8>
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	11 23       	and	r17, r17
     524:	29 f0       	breq	.+10     	; 0x530 <lcd_set_4bit+0x406>
		__ticks = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9c ab       	sts	0x5c, r25
     52c:	8b ab       	sts	0x5b, r24
     52e:	46 c0       	rjmp	.+140    	; 0x5bc <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f a5       	lds	r22, 0x6f
     534:	78 a9       	sts	0x48, r23
     536:	89 a9       	sts	0x49, r24
     538:	9a a9       	sts	0x4a, r25
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	57 e4       	ldi	r21, 0x47	; 71
     542:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f0       	brlt	.+2      	; 0x54c <lcd_set_4bit+0x422>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	11 23       	and	r17, r17
     54e:	61 f1       	breq	.+88     	; 0x5a8 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     550:	6b a5       	lds	r22, 0x6b
     552:	7c a5       	lds	r23, 0x6c
     554:	8d a5       	lds	r24, 0x6d
     556:	9e a5       	lds	r25, 0x6e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	40 e2       	ldi	r20, 0x20	; 32
     55e:	51 e4       	ldi	r21, 0x41	; 65
     560:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	9c ab       	sts	0x5c, r25
     576:	8b ab       	sts	0x5b, r24
     578:	12 c0       	rjmp	.+36     	; 0x59e <lcd_set_4bit+0x474>
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	9e ab       	sts	0x5e, r25
     580:	8d ab       	sts	0x5d, r24
     582:	8d a9       	sts	0x4d, r24
     584:	9e a9       	sts	0x4e, r25
     586:	8c 01       	movw	r16, r24
     588:	c8 01       	movw	r24, r16
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_set_4bit+0x460>
     58e:	8c 01       	movw	r16, r24
     590:	1e ab       	sts	0x5e, r17
     592:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     594:	8b a9       	sts	0x4b, r24
     596:	9c a9       	sts	0x4c, r25
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	9c ab       	sts	0x5c, r25
     59c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     59e:	8b a9       	sts	0x4b, r24
     5a0:	9c a9       	sts	0x4c, r25
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	51 f7       	brne	.-44     	; 0x57a <lcd_set_4bit+0x450>
     5a6:	17 c0       	rjmp	.+46     	; 0x5d6 <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a8:	6f a5       	lds	r22, 0x6f
     5aa:	78 a9       	sts	0x48, r23
     5ac:	89 a9       	sts	0x49, r24
     5ae:	9a a9       	sts	0x4a, r25
     5b0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	9c ab       	sts	0x5c, r25
     5ba:	8b ab       	sts	0x5b, r24
     5bc:	8b a9       	sts	0x4b, r24
     5be:	9c a9       	sts	0x4c, r25
     5c0:	98 af       	sts	0x78, r25
     5c2:	8f ab       	sts	0x5f, r24
     5c4:	8f a9       	sts	0x4f, r24
     5c6:	98 ad       	sts	0x68, r25
     5c8:	8c 01       	movw	r16, r24
     5ca:	f8 01       	movw	r30, r16
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_set_4bit+0x4a2>
     5d0:	8f 01       	movw	r16, r30
     5d2:	18 af       	sts	0x78, r17
     5d4:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     5d6:	88 e2       	ldi	r24, 0x28	; 40
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2b 7f       	andi	r18, 0xFB	; 251
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e8       	ldi	r26, 0x80	; 128
     5ee:	bf e3       	ldi	r27, 0x3F	; 63
     5f0:	89 af       	sts	0x79, r24
     5f2:	9a af       	sts	0x7a, r25
     5f4:	ab af       	sts	0x7b, r26
     5f6:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f8:	69 ad       	sts	0x69, r22
     5fa:	7a ad       	sts	0x6a, r23
     5fc:	8b ad       	sts	0x6b, r24
     5fe:	9c ad       	sts	0x6c, r25
     600:	26 e6       	ldi	r18, 0x66	; 102
     602:	36 e6       	ldi	r19, 0x66	; 102
     604:	46 e6       	ldi	r20, 0x66	; 102
     606:	55 e4       	ldi	r21, 0x45	; 69
     608:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 01       	movw	r18, r28
     612:	23 5c       	subi	r18, 0xC3	; 195
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	f9 01       	movw	r30, r18
     618:	80 83       	st	Z, r24
     61a:	91 83       	std	Z+1, r25	; 0x01
     61c:	a2 83       	std	Z+2, r26	; 0x02
     61e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	cd 96       	adiw	r24, 0x3d	; 61
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	0c f0       	brlt	.+2      	; 0x642 <lcd_set_4bit+0x518>
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	11 23       	and	r17, r17
     644:	49 f0       	breq	.+18     	; 0x658 <lcd_set_4bit+0x52e>
		__ticks = 1;
     646:	ce 01       	movw	r24, r28
     648:	8f 5b       	subi	r24, 0xBF	; 191
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	6e c0       	rjmp	.+220    	; 0x734 <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     658:	11 e0       	ldi	r17, 0x01	; 1
     65a:	ce 01       	movw	r24, r28
     65c:	cd 96       	adiw	r24, 0x3d	; 61
     65e:	fc 01       	movw	r30, r24
     660:	60 81       	ld	r22, Z
     662:	71 81       	ldd	r23, Z+1	; 0x01
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	4f e7       	ldi	r20, 0x7F	; 127
     66e:	57 e4       	ldi	r21, 0x47	; 71
     670:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	0c f0       	brlt	.+2      	; 0x67a <lcd_set_4bit+0x550>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	11 23       	and	r17, r17
     67c:	09 f4       	brne	.+2      	; 0x680 <lcd_set_4bit+0x556>
     67e:	49 c0       	rjmp	.+146    	; 0x712 <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     680:	69 ad       	sts	0x69, r22
     682:	7a ad       	sts	0x6a, r23
     684:	8b ad       	sts	0x6b, r24
     686:	9c ad       	sts	0x6c, r25
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e2       	ldi	r20, 0x20	; 32
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	8e 01       	movw	r16, r28
     69a:	0f 5b       	subi	r16, 0xBF	; 191
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	f8 01       	movw	r30, r16
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	27 c0       	rjmp	.+78     	; 0x700 <lcd_set_4bit+0x5d6>
     6b2:	ce 01       	movw	r24, r28
     6b4:	8d 5b       	subi	r24, 0xBD	; 189
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	20 e7       	ldi	r18, 0x70	; 112
     6ba:	31 e0       	ldi	r19, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	31 83       	std	Z+1, r19	; 0x01
     6c0:	20 83       	st	Z, r18
     6c2:	ce 01       	movw	r24, r28
     6c4:	8d 5b       	subi	r24, 0xBD	; 189
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	8c 01       	movw	r16, r24
     6d0:	c8 01       	movw	r24, r16
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_set_4bit+0x5a8>
     6d6:	8c 01       	movw	r16, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	8d 5b       	subi	r24, 0xBD	; 189
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	11 83       	std	Z+1, r17	; 0x01
     6e2:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	ce 01       	movw	r24, r28
     6e6:	8f 5b       	subi	r24, 0xBF	; 191
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	9e 01       	movw	r18, r28
     6ec:	2f 5b       	subi	r18, 0xBF	; 191
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	31 81       	ldd	r19, Z+1	; 0x01
     6f6:	21 50       	subi	r18, 0x01	; 1
     6f8:	30 40       	sbci	r19, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     700:	ce 01       	movw	r24, r28
     702:	8f 5b       	subi	r24, 0xBF	; 191
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f6       	brne	.-94     	; 0x6b2 <lcd_set_4bit+0x588>
     710:	2e c0       	rjmp	.+92     	; 0x76e <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	8e 01       	movw	r16, r28
     714:	0f 5b       	subi	r16, 0xBF	; 191
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	cd 96       	adiw	r24, 0x3d	; 61
     71c:	fc 01       	movw	r30, r24
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	f8 01       	movw	r30, r16
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
     734:	ce 01       	movw	r24, r28
     736:	8b 5b       	subi	r24, 0xBB	; 187
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	2f 5b       	subi	r18, 0xBF	; 191
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	fc 01       	movw	r30, r24
     748:	31 83       	std	Z+1, r19	; 0x01
     74a:	20 83       	st	Z, r18
     74c:	ce 01       	movw	r24, r28
     74e:	8b 5b       	subi	r24, 0xBB	; 187
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01
     758:	8c 01       	movw	r16, r24
     75a:	c8 01       	movw	r24, r16
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd_set_4bit+0x632>
     760:	8c 01       	movw	r16, r24
     762:	ce 01       	movw	r24, r28
     764:	8b 5b       	subi	r24, 0xBB	; 187
     766:	9f 4f       	sbci	r25, 0xFF	; 255
     768:	fc 01       	movw	r30, r24
     76a:	11 83       	std	Z+1, r17	; 0x01
     76c:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     76e:	88 e2       	ldi	r24, 0x28	; 40
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	28 e2       	ldi	r18, 0x28	; 40
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	2e 7f       	andi	r18, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     780:	88 e2       	ldi	r24, 0x28	; 40
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	28 e2       	ldi	r18, 0x28	; 40
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	2d 7f       	andi	r18, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	20 e3       	ldi	r18, 0x30	; 48
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	24 60       	ori	r18, 0x04	; 4
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	9e 01       	movw	r18, r28
     7b0:	29 5b       	subi	r18, 0xB9	; 185
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 ea       	ldi	r26, 0xA0	; 160
     7ba:	b0 e4       	ldi	r27, 0x40	; 64
     7bc:	f9 01       	movw	r30, r18
     7be:	80 83       	st	Z, r24
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	a2 83       	std	Z+2, r26	; 0x02
     7c4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c6:	8e 01       	movw	r16, r28
     7c8:	05 5b       	subi	r16, 0xB5	; 181
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	ce 01       	movw	r24, r28
     7ce:	89 5b       	subi	r24, 0xB9	; 185
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 e6       	ldi	r20, 0x66	; 102
     7e2:	55 e4       	ldi	r21, 0x45	; 69
     7e4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	f8 01       	movw	r30, r16
     7ee:	80 83       	st	Z, r24
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	a2 83       	std	Z+2, r26	; 0x02
     7f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7f6:	ce 01       	movw	r24, r28
     7f8:	85 5b       	subi	r24, 0xB5	; 181
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	11 e0       	ldi	r17, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	60 81       	ld	r22, Z
     802:	71 81       	ldd	r23, Z+1	; 0x01
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	93 81       	ldd	r25, Z+3	; 0x03
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     814:	88 23       	and	r24, r24
     816:	0c f0       	brlt	.+2      	; 0x81a <lcd_set_4bit+0x6f0>
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	11 23       	and	r17, r17
     81c:	49 f0       	breq	.+18     	; 0x830 <lcd_set_4bit+0x706>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	81 5b       	subi	r24, 0xB1	; 177
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	74 c0       	rjmp	.+232    	; 0x918 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	85 5b       	subi	r24, 0xB5	; 181
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	11 e0       	ldi	r17, 0x01	; 1
     838:	fc 01       	movw	r30, r24
     83a:	60 81       	ld	r22, Z
     83c:	71 81       	ldd	r23, Z+1	; 0x01
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	93 81       	ldd	r25, Z+3	; 0x03
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	3f ef       	ldi	r19, 0xFF	; 255
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	57 e4       	ldi	r21, 0x47	; 71
     84a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <lcd_set_4bit+0x72a>
     852:	10 e0       	ldi	r17, 0x00	; 0
     854:	11 23       	and	r17, r17
     856:	09 f4       	brne	.+2      	; 0x85a <lcd_set_4bit+0x730>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85a:	ce 01       	movw	r24, r28
     85c:	89 5b       	subi	r24, 0xB9	; 185
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e2       	ldi	r20, 0x20	; 32
     870:	51 e4       	ldi	r21, 0x41	; 65
     872:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	f8 01       	movw	r30, r16
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	27 c0       	rjmp	.+78     	; 0x8e2 <lcd_set_4bit+0x7b8>
     894:	ce 01       	movw	r24, r28
     896:	8f 5a       	subi	r24, 0xAF	; 175
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	20 e7       	ldi	r18, 0x70	; 112
     89c:	31 e0       	ldi	r19, 0x01	; 1
     89e:	fc 01       	movw	r30, r24
     8a0:	31 83       	std	Z+1, r19	; 0x01
     8a2:	20 83       	st	Z, r18
     8a4:	ce 01       	movw	r24, r28
     8a6:	8f 5a       	subi	r24, 0xAF	; 175
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	8c 01       	movw	r16, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <lcd_set_4bit+0x78a>
     8b8:	8c 01       	movw	r16, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 83       	std	Z+1, r17	; 0x01
     8c4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c6:	ce 01       	movw	r24, r28
     8c8:	81 5b       	subi	r24, 0xB1	; 177
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	9e 01       	movw	r18, r28
     8ce:	21 5b       	subi	r18, 0xB1	; 177
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	31 81       	ldd	r19, Z+1	; 0x01
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e2:	ce 01       	movw	r24, r28
     8e4:	81 5b       	subi	r24, 0xB1	; 177
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	89 f6       	brne	.-94     	; 0x894 <lcd_set_4bit+0x76a>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	8e 01       	movw	r16, r28
     8f6:	01 5b       	subi	r16, 0xB1	; 177
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	85 5b       	subi	r24, 0xB5	; 181
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	fc 01       	movw	r30, r24
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	ce 01       	movw	r24, r28
     91a:	8d 5a       	subi	r24, 0xAD	; 173
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	9e 01       	movw	r18, r28
     920:	21 5b       	subi	r18, 0xB1	; 177
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	ce 01       	movw	r24, r28
     932:	8d 5a       	subi	r24, 0xAD	; 173
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	80 81       	ld	r24, Z
     93a:	91 81       	ldd	r25, Z+1	; 0x01
     93c:	8c 01       	movw	r16, r24
     93e:	c8 01       	movw	r24, r16
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <lcd_set_4bit+0x816>
     944:	8c 01       	movw	r16, r24
     946:	ce 01       	movw	r24, r28
     948:	8d 5a       	subi	r24, 0xAD	; 173
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	fc 01       	movw	r30, r24
     94e:	11 83       	std	Z+1, r17	; 0x01
     950:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 e2       	ldi	r18, 0x28	; 40
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	2b 7f       	andi	r18, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	9e 01       	movw	r18, r28
     966:	2b 5a       	subi	r18, 0xAB	; 171
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	f9 01       	movw	r30, r18
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	8e 01       	movw	r16, r28
     97e:	07 5a       	subi	r16, 0xA7	; 167
     980:	1f 4f       	sbci	r17, 0xFF	; 255
     982:	ce 01       	movw	r24, r28
     984:	8b 5a       	subi	r24, 0xAB	; 171
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	fc 01       	movw	r30, r24
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	26 e6       	ldi	r18, 0x66	; 102
     994:	36 e6       	ldi	r19, 0x66	; 102
     996:	46 e6       	ldi	r20, 0x66	; 102
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	f8 01       	movw	r30, r16
     9a4:	80 83       	st	Z, r24
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	a2 83       	std	Z+2, r26	; 0x02
     9aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 5a       	subi	r24, 0xA7	; 167
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	11 e0       	ldi	r17, 0x01	; 1
     9b4:	fc 01       	movw	r30, r24
     9b6:	60 81       	ld	r22, Z
     9b8:	71 81       	ldd	r23, Z+1	; 0x01
     9ba:	82 81       	ldd	r24, Z+2	; 0x02
     9bc:	93 81       	ldd	r25, Z+3	; 0x03
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	0c f0       	brlt	.+2      	; 0x9d0 <lcd_set_4bit+0x8a6>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	11 23       	and	r17, r17
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <lcd_set_4bit+0x8bc>
		__ticks = 1;
     9d4:	ce 01       	movw	r24, r28
     9d6:	83 5a       	subi	r24, 0xA3	; 163
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	21 e0       	ldi	r18, 0x01	; 1
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
     9e4:	74 c0       	rjmp	.+232    	; 0xace <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     9e6:	ce 01       	movw	r24, r28
     9e8:	87 5a       	subi	r24, 0xA7	; 167
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	fc 01       	movw	r30, r24
     9f0:	60 81       	ld	r22, Z
     9f2:	71 81       	ldd	r23, Z+1	; 0x01
     9f4:	82 81       	ldd	r24, Z+2	; 0x02
     9f6:	93 81       	ldd	r25, Z+3	; 0x03
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     a04:	18 16       	cp	r1, r24
     a06:	0c f0       	brlt	.+2      	; 0xa0a <lcd_set_4bit+0x8e0>
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	11 23       	and	r17, r17
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_set_4bit+0x8e6>
     a0e:	4d c0       	rjmp	.+154    	; 0xaaa <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a10:	ce 01       	movw	r24, r28
     a12:	8b 5a       	subi	r24, 0xAB	; 171
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8e 01       	movw	r16, r28
     a32:	03 5a       	subi	r16, 0xA3	; 163
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	bc 01       	movw	r22, r24
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	f8 01       	movw	r30, r16
     a44:	91 83       	std	Z+1, r25	; 0x01
     a46:	80 83       	st	Z, r24
     a48:	27 c0       	rjmp	.+78     	; 0xa98 <lcd_set_4bit+0x96e>
     a4a:	ce 01       	movw	r24, r28
     a4c:	81 5a       	subi	r24, 0xA1	; 161
     a4e:	9f 4f       	sbci	r25, 0xFF	; 255
     a50:	20 e7       	ldi	r18, 0x70	; 112
     a52:	31 e0       	ldi	r19, 0x01	; 1
     a54:	fc 01       	movw	r30, r24
     a56:	31 83       	std	Z+1, r19	; 0x01
     a58:	20 83       	st	Z, r18
     a5a:	ce 01       	movw	r24, r28
     a5c:	81 5a       	subi	r24, 0xA1	; 161
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	8c 01       	movw	r16, r24
     a68:	c8 01       	movw	r24, r16
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <lcd_set_4bit+0x940>
     a6e:	8c 01       	movw	r16, r24
     a70:	ce 01       	movw	r24, r28
     a72:	81 5a       	subi	r24, 0xA1	; 161
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	11 83       	std	Z+1, r17	; 0x01
     a7a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 5a       	subi	r24, 0xA3	; 163
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	9e 01       	movw	r18, r28
     a84:	23 5a       	subi	r18, 0xA3	; 163
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	31 81       	ldd	r19, Z+1	; 0x01
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	31 83       	std	Z+1, r19	; 0x01
     a96:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	ce 01       	movw	r24, r28
     a9a:	83 5a       	subi	r24, 0xA3	; 163
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	89 f6       	brne	.-94     	; 0xa4a <lcd_set_4bit+0x920>
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aaa:	8e 01       	movw	r16, r28
     aac:	03 5a       	subi	r16, 0xA3	; 163
     aae:	1f 4f       	sbci	r17, 0xFF	; 255
     ab0:	ce 01       	movw	r24, r28
     ab2:	87 5a       	subi	r24, 0xA7	; 167
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	f8 01       	movw	r30, r16
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	80 83       	st	Z, r24
     ace:	ce 01       	movw	r24, r28
     ad0:	8f 59       	subi	r24, 0x9F	; 159
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	9e 01       	movw	r18, r28
     ad6:	23 5a       	subi	r18, 0xA3	; 163
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	31 81       	ldd	r19, Z+1	; 0x01
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	ce 01       	movw	r24, r28
     ae8:	8f 59       	subi	r24, 0x9F	; 159
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	8c 01       	movw	r16, r24
     af4:	c8 01       	movw	r24, r16
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <lcd_set_4bit+0x9cc>
     afa:	8c 01       	movw	r16, r24
     afc:	ce 01       	movw	r24, r28
     afe:	8f 59       	subi	r24, 0x9F	; 159
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	11 83       	std	Z+1, r17	; 0x01
     b06:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b08:	88 e2       	ldi	r24, 0x28	; 40
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	28 e2       	ldi	r18, 0x28	; 40
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	2e 7f       	andi	r18, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	2d 7f       	andi	r18, 0xFD	; 253
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	20 e2       	ldi	r18, 0x20	; 32
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     b36:	88 e2       	ldi	r24, 0x28	; 40
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	28 e2       	ldi	r18, 0x28	; 40
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	f9 01       	movw	r30, r18
     b40:	20 81       	ld	r18, Z
     b42:	24 60       	ori	r18, 0x04	; 4
     b44:	fc 01       	movw	r30, r24
     b46:	20 83       	st	Z, r18
     b48:	9e 01       	movw	r18, r28
     b4a:	2d 59       	subi	r18, 0x9D	; 157
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 ea       	ldi	r26, 0xA0	; 160
     b54:	b0 e4       	ldi	r27, 0x40	; 64
     b56:	f9 01       	movw	r30, r18
     b58:	80 83       	st	Z, r24
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	a2 83       	std	Z+2, r26	; 0x02
     b5e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b60:	8e 01       	movw	r16, r28
     b62:	09 59       	subi	r16, 0x99	; 153
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ce 01       	movw	r24, r28
     b68:	8d 59       	subi	r24, 0x9D	; 157
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	26 e6       	ldi	r18, 0x66	; 102
     b78:	36 e6       	ldi	r19, 0x66	; 102
     b7a:	46 e6       	ldi	r20, 0x66	; 102
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	f8 01       	movw	r30, r16
     b88:	80 83       	st	Z, r24
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	a2 83       	std	Z+2, r26	; 0x02
     b8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b90:	ce 01       	movw	r24, r28
     b92:	89 59       	subi	r24, 0x99	; 153
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	11 e0       	ldi	r17, 0x01	; 1
     b98:	fc 01       	movw	r30, r24
     b9a:	60 81       	ld	r22, Z
     b9c:	71 81       	ldd	r23, Z+1	; 0x01
     b9e:	82 81       	ldd	r24, Z+2	; 0x02
     ba0:	93 81       	ldd	r25, Z+3	; 0x03
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <lcd_set_4bit+0xa8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	11 23       	and	r17, r17
     bb6:	49 f0       	breq	.+18     	; 0xbca <lcd_set_4bit+0xaa0>
		__ticks = 1;
     bb8:	ce 01       	movw	r24, r28
     bba:	85 59       	subi	r24, 0x95	; 149
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	20 83       	st	Z, r18
     bc8:	74 c0       	rjmp	.+232    	; 0xcb2 <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     bca:	ce 01       	movw	r24, r28
     bcc:	89 59       	subi	r24, 0x99	; 153
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	fc 01       	movw	r30, r24
     bd4:	60 81       	ld	r22, Z
     bd6:	71 81       	ldd	r23, Z+1	; 0x01
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f0       	brlt	.+2      	; 0xbee <lcd_set_4bit+0xac4>
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_set_4bit+0xaca>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	ce 01       	movw	r24, r28
     bf6:	8d 59       	subi	r24, 0x9D	; 157
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	8e 01       	movw	r16, r28
     c16:	05 59       	subi	r16, 0x95	; 149
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <lcd_set_4bit+0xb52>
     c2e:	ce 01       	movw	r24, r28
     c30:	83 59       	subi	r24, 0x93	; 147
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	20 e7       	ldi	r18, 0x70	; 112
     c36:	31 e0       	ldi	r19, 0x01	; 1
     c38:	fc 01       	movw	r30, r24
     c3a:	31 83       	std	Z+1, r19	; 0x01
     c3c:	20 83       	st	Z, r18
     c3e:	ce 01       	movw	r24, r28
     c40:	83 59       	subi	r24, 0x93	; 147
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	8c 01       	movw	r16, r24
     c4c:	c8 01       	movw	r24, r16
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <lcd_set_4bit+0xb24>
     c52:	8c 01       	movw	r16, r24
     c54:	ce 01       	movw	r24, r28
     c56:	83 59       	subi	r24, 0x93	; 147
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	fc 01       	movw	r30, r24
     c5c:	11 83       	std	Z+1, r17	; 0x01
     c5e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	ce 01       	movw	r24, r28
     c62:	85 59       	subi	r24, 0x95	; 149
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	25 59       	subi	r18, 0x95	; 149
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	21 50       	subi	r18, 0x01	; 1
     c74:	30 40       	sbci	r19, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 59       	subi	r24, 0x95	; 149
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	89 f6       	brne	.-94     	; 0xc2e <lcd_set_4bit+0xb04>
     c8c:	2f c0       	rjmp	.+94     	; 0xcec <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 59       	subi	r16, 0x95	; 149
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	89 59       	subi	r24, 0x99	; 153
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	f8 01       	movw	r30, r16
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	ce 01       	movw	r24, r28
     cb4:	81 59       	subi	r24, 0x91	; 145
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	25 59       	subi	r18, 0x95	; 149
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	ce 01       	movw	r24, r28
     ccc:	81 59       	subi	r24, 0x91	; 145
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	91 81       	ldd	r25, Z+1	; 0x01
     cd6:	8c 01       	movw	r16, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <lcd_set_4bit+0xbb0>
     cde:	8c 01       	movw	r16, r24
     ce0:	ce 01       	movw	r24, r28
     ce2:	81 59       	subi	r24, 0x91	; 145
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 83       	std	Z+1, r17	; 0x01
     cea:	00 83       	st	Z, r16
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	28 e2       	ldi	r18, 0x28	; 40
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	2b 7f       	andi	r18, 0xFB	; 251
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
}
     cfe:	c0 59       	subi	r28, 0x90	; 144
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	2e 97       	sbiw	r28, 0x0e	; 14
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	a0 e8       	ldi	r26, 0x80	; 128
     d34:	bf e3       	ldi	r27, 0x3F	; 63
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	ab 83       	std	Y+3, r26	; 0x03
     d3c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d3e:	69 81       	ldd	r22, Y+1	; 0x01
     d40:	7a 81       	ldd	r23, Y+2	; 0x02
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	26 e6       	ldi	r18, 0x66	; 102
     d48:	36 e6       	ldi	r19, 0x66	; 102
     d4a:	46 e6       	ldi	r20, 0x66	; 102
     d4c:	55 e4       	ldi	r21, 0x45	; 69
     d4e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	af 83       	std	Y+7, r26	; 0x07
     d5c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d5e:	11 e0       	ldi	r17, 0x01	; 1
     d60:	6d 81       	ldd	r22, Y+5	; 0x05
     d62:	7e 81       	ldd	r23, Y+6	; 0x06
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e8       	ldi	r20, 0x80	; 128
     d6e:	5f e3       	ldi	r21, 0x3F	; 63
     d70:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	0c f0       	brlt	.+2      	; 0xd7a <lcd_init+0x64>
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	11 23       	and	r17, r17
     d7c:	29 f0       	breq	.+10     	; 0xd88 <lcd_init+0x72>
		__ticks = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9a 87       	std	Y+10, r25	; 0x0a
     d84:	89 87       	std	Y+9, r24	; 0x09
     d86:	46 c0       	rjmp	.+140    	; 0xe14 <lcd_init+0xfe>
	else if (__tmp > 65535)
     d88:	11 e0       	ldi	r17, 0x01	; 1
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	7e 81       	ldd	r23, Y+6	; 0x06
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	3f ef       	ldi	r19, 0xFF	; 255
     d96:	4f e7       	ldi	r20, 0x7F	; 127
     d98:	57 e4       	ldi	r21, 0x47	; 71
     d9a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     d9e:	18 16       	cp	r1, r24
     da0:	0c f0       	brlt	.+2      	; 0xda4 <lcd_init+0x8e>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	11 23       	and	r17, r17
     da6:	61 f1       	breq	.+88     	; 0xe00 <lcd_init+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	69 81       	ldd	r22, Y+1	; 0x01
     daa:	7a 81       	ldd	r23, Y+2	; 0x02
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9a 87       	std	Y+10, r25	; 0x0a
     dce:	89 87       	std	Y+9, r24	; 0x09
     dd0:	12 c0       	rjmp	.+36     	; 0xdf6 <lcd_init+0xe0>
     dd2:	80 e7       	ldi	r24, 0x70	; 112
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9c 87       	std	Y+12, r25	; 0x0c
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
     dda:	8b 85       	ldd	r24, Y+11	; 0x0b
     ddc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dde:	8c 01       	movw	r16, r24
     de0:	c8 01       	movw	r24, r16
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <lcd_init+0xcc>
     de6:	8c 01       	movw	r16, r24
     de8:	1c 87       	std	Y+12, r17	; 0x0c
     dea:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9a 87       	std	Y+10, r25	; 0x0a
     df4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	51 f7       	brne	.-44     	; 0xdd2 <lcd_init+0xbc>
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <lcd_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9a 87       	std	Y+10, r25	; 0x0a
     e12:	89 87       	std	Y+9, r24	; 0x09
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	9e 87       	std	Y+14, r25	; 0x0e
     e1a:	8d 87       	std	Y+13, r24	; 0x0d
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	8c 01       	movw	r16, r24
     e22:	c8 01       	movw	r24, r16
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <lcd_init+0x10e>
     e28:	8c 01       	movw	r16, r24
     e2a:	1e 87       	std	Y+14, r17	; 0x0e
     e2c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     e3a:	86 e0       	ldi	r24, 0x06	; 6
     e3c:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     e40:	8e e0       	ldi	r24, 0x0E	; 14
     e42:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
}
     e4c:	2e 96       	adiw	r28, 0x0e	; 14
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	6e 97       	sbiw	r28, 0x1e	; 30
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e7e:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 7f       	andi	r24, 0xF0	; 240
     e84:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
     e86:	88 e2       	ldi	r24, 0x28	; 40
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	28 e2       	ldi	r18, 0x28	; 40
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	f9 01       	movw	r30, r18
     e90:	20 81       	ld	r18, Z
     e92:	2f 70       	andi	r18, 0x0F	; 15
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
	lcd_port |= temp;
     e98:	88 e2       	ldi	r24, 0x28	; 40
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	28 e2       	ldi	r18, 0x28	; 40
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	f9 01       	movw	r30, r18
     ea2:	30 81       	ld	r19, Z
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	23 2b       	or	r18, r19
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
     eac:	88 e2       	ldi	r24, 0x28	; 40
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	28 e2       	ldi	r18, 0x28	; 40
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	2e 7f       	andi	r18, 0xFE	; 254
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
     ebe:	88 e2       	ldi	r24, 0x28	; 40
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	28 e2       	ldi	r18, 0x28	; 40
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	2d 7f       	andi	r18, 0xFD	; 253
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
     ed0:	88 e2       	ldi	r24, 0x28	; 40
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	28 e2       	ldi	r18, 0x28	; 40
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	f9 01       	movw	r30, r18
     eda:	20 81       	ld	r18, Z
     edc:	24 60       	ori	r18, 0x04	; 4
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 ea       	ldi	r26, 0xA0	; 160
     ee8:	b0 e4       	ldi	r27, 0x40	; 64
     eea:	8a 83       	std	Y+2, r24	; 0x02
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	ac 83       	std	Y+4, r26	; 0x04
     ef0:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6a 81       	ldd	r22, Y+2	; 0x02
     ef4:	7b 81       	ldd	r23, Y+3	; 0x03
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	26 e6       	ldi	r18, 0x66	; 102
     efc:	36 e6       	ldi	r19, 0x66	; 102
     efe:	46 e6       	ldi	r20, 0x66	; 102
     f00:	55 e4       	ldi	r21, 0x45	; 69
     f02:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8e 83       	std	Y+6, r24	; 0x06
     f0c:	9f 83       	std	Y+7, r25	; 0x07
     f0e:	a8 87       	std	Y+8, r26	; 0x08
     f10:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     f12:	11 e0       	ldi	r17, 0x01	; 1
     f14:	6e 81       	ldd	r22, Y+6	; 0x06
     f16:	7f 81       	ldd	r23, Y+7	; 0x07
     f18:	88 85       	ldd	r24, Y+8	; 0x08
     f1a:	99 85       	ldd	r25, Y+9	; 0x09
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
     f28:	88 23       	and	r24, r24
     f2a:	0c f0       	brlt	.+2      	; 0xf2e <lcd_wr_command+0xcc>
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	11 23       	and	r17, r17
     f30:	29 f0       	breq	.+10     	; 0xf3c <lcd_wr_command+0xda>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9b 87       	std	Y+11, r25	; 0x0b
     f38:	8a 87       	std	Y+10, r24	; 0x0a
     f3a:	46 c0       	rjmp	.+140    	; 0xfc8 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
     f3c:	11 e0       	ldi	r17, 0x01	; 1
     f3e:	6e 81       	ldd	r22, Y+6	; 0x06
     f40:	7f 81       	ldd	r23, Y+7	; 0x07
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	99 85       	ldd	r25, Y+9	; 0x09
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	0c f0       	brlt	.+2      	; 0xf58 <lcd_wr_command+0xf6>
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	11 23       	and	r17, r17
     f5a:	61 f1       	breq	.+88     	; 0xfb4 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	6a 81       	ldd	r22, Y+2	; 0x02
     f5e:	7b 81       	ldd	r23, Y+3	; 0x03
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9b 87       	std	Y+11, r25	; 0x0b
     f82:	8a 87       	std	Y+10, r24	; 0x0a
     f84:	12 c0       	rjmp	.+36     	; 0xfaa <lcd_wr_command+0x148>
     f86:	80 e7       	ldi	r24, 0x70	; 112
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	9d 87       	std	Y+13, r25	; 0x0d
     f8c:	8c 87       	std	Y+12, r24	; 0x0c
     f8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f90:	9d 85       	ldd	r25, Y+13	; 0x0d
     f92:	8c 01       	movw	r16, r24
     f94:	c8 01       	movw	r24, r16
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <lcd_wr_command+0x134>
     f9a:	8c 01       	movw	r16, r24
     f9c:	1d 87       	std	Y+13, r17	; 0x0d
     f9e:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	9b 87       	std	Y+11, r25	; 0x0b
     fa8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	8a 85       	ldd	r24, Y+10	; 0x0a
     fac:	9b 85       	ldd	r25, Y+11	; 0x0b
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	51 f7       	brne	.-44     	; 0xf86 <lcd_wr_command+0x124>
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb4:	6e 81       	ldd	r22, Y+6	; 0x06
     fb6:	7f 81       	ldd	r23, Y+7	; 0x07
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9b 87       	std	Y+11, r25	; 0x0b
     fc6:	8a 87       	std	Y+10, r24	; 0x0a
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	9b 85       	ldd	r25, Y+11	; 0x0b
     fcc:	9f 87       	std	Y+15, r25	; 0x0f
     fce:	8e 87       	std	Y+14, r24	; 0x0e
     fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd4:	8c 01       	movw	r16, r24
     fd6:	f8 01       	movw	r30, r16
     fd8:	31 97       	sbiw	r30, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <lcd_wr_command+0x176>
     fdc:	8f 01       	movw	r16, r30
     fde:	1f 87       	std	Y+15, r17	; 0x0f
     fe0:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
     fe2:	88 e2       	ldi	r24, 0x28	; 40
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	28 e2       	ldi	r18, 0x28	; 40
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	2b 7f       	andi	r18, 0xFB	; 251
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
     ff4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     ffa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffc:	82 95       	swap	r24
     ffe:	80 7f       	andi	r24, 0xF0	; 240
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1002:	88 e2       	ldi	r24, 0x28	; 40
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	28 e2       	ldi	r18, 0x28	; 40
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	2f 70       	andi	r18, 0x0F	; 15
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1014:	88 e2       	ldi	r24, 0x28	; 40
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	28 e2       	ldi	r18, 0x28	; 40
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	30 81       	ld	r19, Z
    1020:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1022:	23 2b       	or	r18, r19
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1028:	88 e2       	ldi	r24, 0x28	; 40
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	28 e2       	ldi	r18, 0x28	; 40
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	2e 7f       	andi	r18, 0xFE	; 254
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    103a:	88 e2       	ldi	r24, 0x28	; 40
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	28 e2       	ldi	r18, 0x28	; 40
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	2d 7f       	andi	r18, 0xFD	; 253
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    104c:	88 e2       	ldi	r24, 0x28	; 40
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	28 e2       	ldi	r18, 0x28	; 40
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	f9 01       	movw	r30, r18
    1056:	20 81       	ld	r18, Z
    1058:	24 60       	ori	r18, 0x04	; 4
    105a:	fc 01       	movw	r30, r24
    105c:	20 83       	st	Z, r18
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 ea       	ldi	r26, 0xA0	; 160
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	88 8b       	std	Y+16, r24	; 0x10
    1068:	99 8b       	std	Y+17, r25	; 0x11
    106a:	aa 8b       	std	Y+18, r26	; 0x12
    106c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    106e:	68 89       	ldd	r22, Y+16	; 0x10
    1070:	79 89       	ldd	r23, Y+17	; 0x11
    1072:	8a 89       	ldd	r24, Y+18	; 0x12
    1074:	9b 89       	ldd	r25, Y+19	; 0x13
    1076:	26 e6       	ldi	r18, 0x66	; 102
    1078:	36 e6       	ldi	r19, 0x66	; 102
    107a:	46 e6       	ldi	r20, 0x66	; 102
    107c:	55 e4       	ldi	r21, 0x45	; 69
    107e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	8c 8b       	std	Y+20, r24	; 0x14
    1088:	9d 8b       	std	Y+21, r25	; 0x15
    108a:	ae 8b       	std	Y+22, r26	; 0x16
    108c:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    108e:	11 e0       	ldi	r17, 0x01	; 1
    1090:	6c 89       	ldd	r22, Y+20	; 0x14
    1092:	7d 89       	ldd	r23, Y+21	; 0x15
    1094:	8e 89       	ldd	r24, Y+22	; 0x16
    1096:	9f 89       	ldd	r25, Y+23	; 0x17
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
    10a4:	88 23       	and	r24, r24
    10a6:	0c f0       	brlt	.+2      	; 0x10aa <lcd_wr_command+0x248>
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	11 23       	and	r17, r17
    10ac:	29 f0       	breq	.+10     	; 0x10b8 <lcd_wr_command+0x256>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	99 8f       	std	Y+25, r25	; 0x19
    10b4:	88 8f       	std	Y+24, r24	; 0x18
    10b6:	46 c0       	rjmp	.+140    	; 0x1144 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    10b8:	11 e0       	ldi	r17, 0x01	; 1
    10ba:	6c 89       	ldd	r22, Y+20	; 0x14
    10bc:	7d 89       	ldd	r23, Y+21	; 0x15
    10be:	8e 89       	ldd	r24, Y+22	; 0x16
    10c0:	9f 89       	ldd	r25, Y+23	; 0x17
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <lcd_wr_command+0x272>
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	11 23       	and	r17, r17
    10d6:	61 f1       	breq	.+88     	; 0x1130 <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	68 89       	ldd	r22, Y+16	; 0x10
    10da:	79 89       	ldd	r23, Y+17	; 0x11
    10dc:	8a 89       	ldd	r24, Y+18	; 0x12
    10de:	9b 89       	ldd	r25, Y+19	; 0x13
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	99 8f       	std	Y+25, r25	; 0x19
    10fe:	88 8f       	std	Y+24, r24	; 0x18
    1100:	12 c0       	rjmp	.+36     	; 0x1126 <lcd_wr_command+0x2c4>
    1102:	80 e7       	ldi	r24, 0x70	; 112
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	9b 8f       	std	Y+27, r25	; 0x1b
    1108:	8a 8f       	std	Y+26, r24	; 0x1a
    110a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    110c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    110e:	8c 01       	movw	r16, r24
    1110:	c8 01       	movw	r24, r16
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <lcd_wr_command+0x2b0>
    1116:	8c 01       	movw	r16, r24
    1118:	1b 8f       	std	Y+27, r17	; 0x1b
    111a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	88 8d       	ldd	r24, Y+24	; 0x18
    111e:	99 8d       	ldd	r25, Y+25	; 0x19
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	99 8f       	std	Y+25, r25	; 0x19
    1124:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	88 8d       	ldd	r24, Y+24	; 0x18
    1128:	99 8d       	ldd	r25, Y+25	; 0x19
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	51 f7       	brne	.-44     	; 0x1102 <lcd_wr_command+0x2a0>
    112e:	17 c0       	rjmp	.+46     	; 0x115e <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6c 89       	ldd	r22, Y+20	; 0x14
    1132:	7d 89       	ldd	r23, Y+21	; 0x15
    1134:	8e 89       	ldd	r24, Y+22	; 0x16
    1136:	9f 89       	ldd	r25, Y+23	; 0x17
    1138:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	99 8f       	std	Y+25, r25	; 0x19
    1142:	88 8f       	std	Y+24, r24	; 0x18
    1144:	88 8d       	ldd	r24, Y+24	; 0x18
    1146:	99 8d       	ldd	r25, Y+25	; 0x19
    1148:	9d 8f       	std	Y+29, r25	; 0x1d
    114a:	8c 8f       	std	Y+28, r24	; 0x1c
    114c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    114e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1150:	8c 01       	movw	r16, r24
    1152:	f8 01       	movw	r30, r16
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_command+0x2f2>
    1158:	8f 01       	movw	r16, r30
    115a:	1d 8f       	std	Y+29, r17	; 0x1d
    115c:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    115e:	88 e2       	ldi	r24, 0x28	; 40
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	28 e2       	ldi	r18, 0x28	; 40
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	f9 01       	movw	r30, r18
    1168:	20 81       	ld	r18, Z
    116a:	2b 7f       	andi	r18, 0xFB	; 251
    116c:	fc 01       	movw	r30, r24
    116e:	20 83       	st	Z, r18
}
    1170:	6e 96       	adiw	r28, 0x1e	; 30
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	6e 97       	sbiw	r28, 0x1e	; 30
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    11a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a2:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	80 7f       	andi	r24, 0xF0	; 240
    11a8:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    11aa:	88 e2       	ldi	r24, 0x28	; 40
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	28 e2       	ldi	r18, 0x28	; 40
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	2f 70       	andi	r18, 0x0F	; 15
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
	lcd_port |= temp;
    11bc:	88 e2       	ldi	r24, 0x28	; 40
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	28 e2       	ldi	r18, 0x28	; 40
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	f9 01       	movw	r30, r18
    11c6:	30 81       	ld	r19, Z
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	23 2b       	or	r18, r19
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    11d0:	88 e2       	ldi	r24, 0x28	; 40
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	28 e2       	ldi	r18, 0x28	; 40
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	f9 01       	movw	r30, r18
    11da:	20 81       	ld	r18, Z
    11dc:	21 60       	ori	r18, 0x01	; 1
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    11e2:	88 e2       	ldi	r24, 0x28	; 40
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	28 e2       	ldi	r18, 0x28	; 40
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	2d 7f       	andi	r18, 0xFD	; 253
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    11f4:	88 e2       	ldi	r24, 0x28	; 40
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	28 e2       	ldi	r18, 0x28	; 40
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f9 01       	movw	r30, r18
    11fe:	20 81       	ld	r18, Z
    1200:	24 60       	ori	r18, 0x04	; 4
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 ea       	ldi	r26, 0xA0	; 160
    120c:	b0 e4       	ldi	r27, 0x40	; 64
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	9b 83       	std	Y+3, r25	; 0x03
    1212:	ac 83       	std	Y+4, r26	; 0x04
    1214:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6a 81       	ldd	r22, Y+2	; 0x02
    1218:	7b 81       	ldd	r23, Y+3	; 0x03
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	26 e6       	ldi	r18, 0x66	; 102
    1220:	36 e6       	ldi	r19, 0x66	; 102
    1222:	46 e6       	ldi	r20, 0x66	; 102
    1224:	55 e4       	ldi	r21, 0x45	; 69
    1226:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8e 83       	std	Y+6, r24	; 0x06
    1230:	9f 83       	std	Y+7, r25	; 0x07
    1232:	a8 87       	std	Y+8, r26	; 0x08
    1234:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1236:	11 e0       	ldi	r17, 0x01	; 1
    1238:	6e 81       	ldd	r22, Y+6	; 0x06
    123a:	7f 81       	ldd	r23, Y+7	; 0x07
    123c:	88 85       	ldd	r24, Y+8	; 0x08
    123e:	99 85       	ldd	r25, Y+9	; 0x09
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
    124c:	88 23       	and	r24, r24
    124e:	0c f0       	brlt	.+2      	; 0x1252 <lcd_wr_char+0xcc>
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	11 23       	and	r17, r17
    1254:	29 f0       	breq	.+10     	; 0x1260 <lcd_wr_char+0xda>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9b 87       	std	Y+11, r25	; 0x0b
    125c:	8a 87       	std	Y+10, r24	; 0x0a
    125e:	46 c0       	rjmp	.+140    	; 0x12ec <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    1260:	11 e0       	ldi	r17, 0x01	; 1
    1262:	6e 81       	ldd	r22, Y+6	; 0x06
    1264:	7f 81       	ldd	r23, Y+7	; 0x07
    1266:	88 85       	ldd	r24, Y+8	; 0x08
    1268:	99 85       	ldd	r25, Y+9	; 0x09
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	4f e7       	ldi	r20, 0x7F	; 127
    1270:	57 e4       	ldi	r21, 0x47	; 71
    1272:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
    1276:	18 16       	cp	r1, r24
    1278:	0c f0       	brlt	.+2      	; 0x127c <lcd_wr_char+0xf6>
    127a:	10 e0       	ldi	r17, 0x00	; 0
    127c:	11 23       	and	r17, r17
    127e:	61 f1       	breq	.+88     	; 0x12d8 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	6a 81       	ldd	r22, Y+2	; 0x02
    1282:	7b 81       	ldd	r23, Y+3	; 0x03
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9b 87       	std	Y+11, r25	; 0x0b
    12a6:	8a 87       	std	Y+10, r24	; 0x0a
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <lcd_wr_char+0x148>
    12aa:	80 e7       	ldi	r24, 0x70	; 112
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	9d 87       	std	Y+13, r25	; 0x0d
    12b0:	8c 87       	std	Y+12, r24	; 0x0c
    12b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b6:	8c 01       	movw	r16, r24
    12b8:	c8 01       	movw	r24, r16
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <lcd_wr_char+0x134>
    12be:	8c 01       	movw	r16, r24
    12c0:	1d 87       	std	Y+13, r17	; 0x0d
    12c2:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9b 87       	std	Y+11, r25	; 0x0b
    12cc:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	51 f7       	brne	.-44     	; 0x12aa <lcd_wr_char+0x124>
    12d6:	17 c0       	rjmp	.+46     	; 0x1306 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6e 81       	ldd	r22, Y+6	; 0x06
    12da:	7f 81       	ldd	r23, Y+7	; 0x07
    12dc:	88 85       	ldd	r24, Y+8	; 0x08
    12de:	99 85       	ldd	r25, Y+9	; 0x09
    12e0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9b 87       	std	Y+11, r25	; 0x0b
    12ea:	8a 87       	std	Y+10, r24	; 0x0a
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	9f 87       	std	Y+15, r25	; 0x0f
    12f2:	8e 87       	std	Y+14, r24	; 0x0e
    12f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    12f8:	8c 01       	movw	r16, r24
    12fa:	f8 01       	movw	r30, r16
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <lcd_wr_char+0x176>
    1300:	8f 01       	movw	r16, r30
    1302:	1f 87       	std	Y+15, r17	; 0x0f
    1304:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1306:	88 e2       	ldi	r24, 0x28	; 40
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	28 e2       	ldi	r18, 0x28	; 40
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	2b 7f       	andi	r18, 0xFB	; 251
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    1318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    131e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1320:	82 95       	swap	r24
    1322:	80 7f       	andi	r24, 0xF0	; 240
    1324:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1326:	88 e2       	ldi	r24, 0x28	; 40
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	28 e2       	ldi	r18, 0x28	; 40
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	f9 01       	movw	r30, r18
    1330:	20 81       	ld	r18, Z
    1332:	2f 70       	andi	r18, 0x0F	; 15
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
	lcd_port |= letter;
    1338:	88 e2       	ldi	r24, 0x28	; 40
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	28 e2       	ldi	r18, 0x28	; 40
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f9 01       	movw	r30, r18
    1342:	30 81       	ld	r19, Z
    1344:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1346:	23 2b       	or	r18, r19
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    134c:	88 e2       	ldi	r24, 0x28	; 40
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	28 e2       	ldi	r18, 0x28	; 40
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	21 60       	ori	r18, 0x01	; 1
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    135e:	88 e2       	ldi	r24, 0x28	; 40
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	28 e2       	ldi	r18, 0x28	; 40
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	f9 01       	movw	r30, r18
    1368:	20 81       	ld	r18, Z
    136a:	2d 7f       	andi	r18, 0xFD	; 253
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	28 e2       	ldi	r18, 0x28	; 40
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	24 60       	ori	r18, 0x04	; 4
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 ea       	ldi	r26, 0xA0	; 160
    1388:	b0 e4       	ldi	r27, 0x40	; 64
    138a:	88 8b       	std	Y+16, r24	; 0x10
    138c:	99 8b       	std	Y+17, r25	; 0x11
    138e:	aa 8b       	std	Y+18, r26	; 0x12
    1390:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1392:	68 89       	ldd	r22, Y+16	; 0x10
    1394:	79 89       	ldd	r23, Y+17	; 0x11
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	9b 89       	ldd	r25, Y+19	; 0x13
    139a:	26 e6       	ldi	r18, 0x66	; 102
    139c:	36 e6       	ldi	r19, 0x66	; 102
    139e:	46 e6       	ldi	r20, 0x66	; 102
    13a0:	55 e4       	ldi	r21, 0x45	; 69
    13a2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8c 8b       	std	Y+20, r24	; 0x14
    13ac:	9d 8b       	std	Y+21, r25	; 0x15
    13ae:	ae 8b       	std	Y+22, r26	; 0x16
    13b0:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    13b2:	11 e0       	ldi	r17, 0x01	; 1
    13b4:	6c 89       	ldd	r22, Y+20	; 0x14
    13b6:	7d 89       	ldd	r23, Y+21	; 0x15
    13b8:	8e 89       	ldd	r24, Y+22	; 0x16
    13ba:	9f 89       	ldd	r25, Y+23	; 0x17
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	0c f0       	brlt	.+2      	; 0x13ce <lcd_wr_char+0x248>
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	11 23       	and	r17, r17
    13d0:	29 f0       	breq	.+10     	; 0x13dc <lcd_wr_char+0x256>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	99 8f       	std	Y+25, r25	; 0x19
    13d8:	88 8f       	std	Y+24, r24	; 0x18
    13da:	46 c0       	rjmp	.+140    	; 0x1468 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    13dc:	11 e0       	ldi	r17, 0x01	; 1
    13de:	6c 89       	ldd	r22, Y+20	; 0x14
    13e0:	7d 89       	ldd	r23, Y+21	; 0x15
    13e2:	8e 89       	ldd	r24, Y+22	; 0x16
    13e4:	9f 89       	ldd	r25, Y+23	; 0x17
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	4f e7       	ldi	r20, 0x7F	; 127
    13ec:	57 e4       	ldi	r21, 0x47	; 71
    13ee:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
    13f2:	18 16       	cp	r1, r24
    13f4:	0c f0       	brlt	.+2      	; 0x13f8 <lcd_wr_char+0x272>
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	11 23       	and	r17, r17
    13fa:	61 f1       	breq	.+88     	; 0x1454 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	68 89       	ldd	r22, Y+16	; 0x10
    13fe:	79 89       	ldd	r23, Y+17	; 0x11
    1400:	8a 89       	ldd	r24, Y+18	; 0x12
    1402:	9b 89       	ldd	r25, Y+19	; 0x13
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	99 8f       	std	Y+25, r25	; 0x19
    1422:	88 8f       	std	Y+24, r24	; 0x18
    1424:	12 c0       	rjmp	.+36     	; 0x144a <lcd_wr_char+0x2c4>
    1426:	80 e7       	ldi	r24, 0x70	; 112
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	9b 8f       	std	Y+27, r25	; 0x1b
    142c:	8a 8f       	std	Y+26, r24	; 0x1a
    142e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1430:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1432:	8c 01       	movw	r16, r24
    1434:	c8 01       	movw	r24, r16
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <lcd_wr_char+0x2b0>
    143a:	8c 01       	movw	r16, r24
    143c:	1b 8f       	std	Y+27, r17	; 0x1b
    143e:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	88 8d       	ldd	r24, Y+24	; 0x18
    1442:	99 8d       	ldd	r25, Y+25	; 0x19
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	99 8f       	std	Y+25, r25	; 0x19
    1448:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	88 8d       	ldd	r24, Y+24	; 0x18
    144c:	99 8d       	ldd	r25, Y+25	; 0x19
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	51 f7       	brne	.-44     	; 0x1426 <lcd_wr_char+0x2a0>
    1452:	17 c0       	rjmp	.+46     	; 0x1482 <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6c 89       	ldd	r22, Y+20	; 0x14
    1456:	7d 89       	ldd	r23, Y+21	; 0x15
    1458:	8e 89       	ldd	r24, Y+22	; 0x16
    145a:	9f 89       	ldd	r25, Y+23	; 0x17
    145c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	99 8f       	std	Y+25, r25	; 0x19
    1466:	88 8f       	std	Y+24, r24	; 0x18
    1468:	88 8d       	ldd	r24, Y+24	; 0x18
    146a:	99 8d       	ldd	r25, Y+25	; 0x19
    146c:	9d 8f       	std	Y+29, r25	; 0x1d
    146e:	8c 8f       	std	Y+28, r24	; 0x1c
    1470:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1472:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1474:	8c 01       	movw	r16, r24
    1476:	f8 01       	movw	r30, r16
    1478:	31 97       	sbiw	r30, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <lcd_wr_char+0x2f2>
    147c:	8f 01       	movw	r16, r30
    147e:	1d 8f       	std	Y+29, r17	; 0x1d
    1480:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    1482:	88 e2       	ldi	r24, 0x28	; 40
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	28 e2       	ldi	r18, 0x28	; 40
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	2b 7f       	andi	r18, 0xFB	; 251
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
}
    1494:	6e 96       	adiw	r28, 0x1e	; 30
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <lcd_home>:


void lcd_home()
{
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    14b2:	80 e8       	ldi	r24, 0x80	; 128
    14b4:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	0f 92       	push	r0
    14c4:	0f 92       	push	r0
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	fc 01       	movw	r30, r24
    14d6:	80 81       	ld	r24, Z
    14d8:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		str++;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	79 f7       	brne	.-34     	; 0x14d0 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	0f 92       	push	r0
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	91 05       	cpc	r25, r1
    1516:	99 f0       	breq	.+38     	; 0x153e <lcd_cursor+0x42>
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	24 f4       	brge	.+8      	; 0x1526 <lcd_cursor+0x2a>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	41 f0       	breq	.+16     	; 0x1534 <lcd_cursor+0x38>
    1524:	1b c0       	rjmp	.+54     	; 0x155c <lcd_cursor+0x60>
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	71 f0       	breq	.+28     	; 0x1548 <lcd_cursor+0x4c>
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <lcd_cursor+0x56>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	81 58       	subi	r24, 0x81	; 129
    1538:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    153c:	10 c0       	rjmp	.+32     	; 0x155e <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	81 54       	subi	r24, 0x41	; 65
    1542:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    1546:	0b c0       	rjmp	.+22     	; 0x155e <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	8d 56       	subi	r24, 0x6D	; 109
    154c:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    1550:	06 c0       	rjmp	.+12     	; 0x155e <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	8d 52       	subi	r24, 0x2D	; 45
    1556:	0e 94 31 07 	call	0xe62	; 0xe62 <lcd_wr_command>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <lcd_cursor+0x62>
		default: break;
    155c:	00 00       	nop
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	27 97       	sbiw	r28, 0x07	; 7
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	6b 83       	std	Y+3, r22	; 0x03
    1580:	5d 83       	std	Y+5, r21	; 0x05
    1582:	4c 83       	std	Y+4, r20	; 0x04
    1584:	3f 83       	std	Y+7, r19	; 0x07
    1586:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1588:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	88 23       	and	r24, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <lcd_print+0x2e>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 23       	and	r24, r24
    1594:	19 f4       	brne	.+6      	; 0x159c <lcd_print+0x34>
	{
		lcd_home();
    1596:	0e 94 55 0a 	call	0x14aa	; 0x14aa <lcd_home>
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	6b 81       	ldd	r22, Y+3	; 0x03
    15a0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <lcd_cursor>
	}
	if(digits==5 || flag==1)
    15a4:	8e 81       	ldd	r24, Y+6	; 0x06
    15a6:	9f 81       	ldd	r25, Y+7	; 0x07
    15a8:	85 30       	cpi	r24, 0x05	; 5
    15aa:	91 05       	cpc	r25, r1
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <lcd_print+0x4c>
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	b1 f4       	brne	.+44     	; 0x15e0 <lcd_print+0x78>
	{
		million=value/10000+48;
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	20 e1       	ldi	r18, 0x10	; 16
    15ba:	37 e2       	ldi	r19, 0x27	; 39
    15bc:	b9 01       	movw	r22, r18
    15be:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    15c2:	9b 01       	movw	r18, r22
    15c4:	c9 01       	movw	r24, r18
    15c6:	c0 96       	adiw	r24, 0x30	; 48
    15c8:	90 93 1b 02 	sts	0x021B, r25
    15cc:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(million);
    15d0:	80 91 1a 02 	lds	r24, 0x021A
    15d4:	90 91 1b 02 	lds	r25, 0x021B
    15d8:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    15e0:	8e 81       	ldd	r24, Y+6	; 0x06
    15e2:	9f 81       	ldd	r25, Y+7	; 0x07
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	91 05       	cpc	r25, r1
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <lcd_print+0x88>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	19 f5       	brne	.+70     	; 0x1636 <lcd_print+0xce>
	{
		temp = value/1000;
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	28 ee       	ldi	r18, 0xE8	; 232
    15f6:	33 e0       	ldi	r19, 0x03	; 3
    15f8:	b9 01       	movw	r22, r18
    15fa:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    15fe:	9b 01       	movw	r18, r22
    1600:	c9 01       	movw	r24, r18
    1602:	90 93 1d 02 	sts	0x021D, r25
    1606:	80 93 1c 02 	sts	0x021C, r24
		thousand = temp%10 + 48;
    160a:	80 91 1c 02 	lds	r24, 0x021C
    160e:	90 91 1d 02 	lds	r25, 0x021D
    1612:	2a e0       	ldi	r18, 0x0A	; 10
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	b9 01       	movw	r22, r18
    1618:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    161c:	c0 96       	adiw	r24, 0x30	; 48
    161e:	90 93 29 02 	sts	0x0229, r25
    1622:	80 93 28 02 	sts	0x0228, r24
		lcd_wr_char(thousand);
    1626:	80 91 28 02 	lds	r24, 0x0228
    162a:	90 91 29 02 	lds	r25, 0x0229
    162e:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	19 f0       	breq	.+6      	; 0x1646 <lcd_print+0xde>
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	19 f5       	brne	.+70     	; 0x168c <lcd_print+0x124>
	{
		temp = value/100;
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	9d 81       	ldd	r25, Y+5	; 0x05
    164a:	24 e6       	ldi	r18, 0x64	; 100
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b9 01       	movw	r22, r18
    1650:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    1654:	9b 01       	movw	r18, r22
    1656:	c9 01       	movw	r24, r18
    1658:	90 93 1d 02 	sts	0x021D, r25
    165c:	80 93 1c 02 	sts	0x021C, r24
		hundred = temp%10 + 48;
    1660:	80 91 1c 02 	lds	r24, 0x021C
    1664:	90 91 1d 02 	lds	r25, 0x021D
    1668:	2a e0       	ldi	r18, 0x0A	; 10
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	b9 01       	movw	r22, r18
    166e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    1672:	c0 96       	adiw	r24, 0x30	; 48
    1674:	90 93 25 02 	sts	0x0225, r25
    1678:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(hundred);
    167c:	80 91 24 02 	lds	r24, 0x0224
    1680:	90 91 25 02 	lds	r25, 0x0225
    1684:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	19 f0       	breq	.+6      	; 0x169c <lcd_print+0x134>
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	19 f5       	brne	.+70     	; 0x16e2 <lcd_print+0x17a>
	{
		temp = value/10;
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    16aa:	9b 01       	movw	r18, r22
    16ac:	c9 01       	movw	r24, r18
    16ae:	90 93 1d 02 	sts	0x021D, r25
    16b2:	80 93 1c 02 	sts	0x021C, r24
		tens = temp%10 + 48;
    16b6:	80 91 1c 02 	lds	r24, 0x021C
    16ba:	90 91 1d 02 	lds	r25, 0x021D
    16be:	2a e0       	ldi	r18, 0x0A	; 10
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    16c8:	c0 96       	adiw	r24, 0x30	; 48
    16ca:	90 93 22 02 	sts	0x0222, r25
    16ce:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(tens);
    16d2:	80 91 21 02 	lds	r24, 0x0221
    16d6:	90 91 22 02 	lds	r25, 0x0222
    16da:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
		flag=1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	9f 81       	ldd	r25, Y+7	; 0x07
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <lcd_print+0x18a>
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	91 f4       	brne	.+36     	; 0x1716 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	b9 01       	movw	r22, r18
    16fc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__udivmodhi4>
    1700:	c0 96       	adiw	r24, 0x30	; 48
    1702:	90 93 27 02 	sts	0x0227, r25
    1706:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(unit);
    170a:	80 91 26 02 	lds	r24, 0x0226
    170e:	90 91 27 02 	lds	r25, 0x0227
    1712:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
	}
	if(digits>5)
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	86 30       	cpi	r24, 0x06	; 6
    171c:	91 05       	cpc	r25, r1
    171e:	1c f0       	brlt	.+6      	; 0x1726 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1720:	85 e4       	ldi	r24, 0x45	; 69
    1722:	0e 94 c3 08 	call	0x1186	; 0x1186 <lcd_wr_char>
	}
}
    1726:	27 96       	adiw	r28, 0x07	; 7
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <motion_pin_config>:
unsigned char Right_white_line = 0;
unsigned char data; //to store received data from UDR1

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
    1740:	81 e2       	ldi	r24, 0x21	; 33
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	21 e2       	ldi	r18, 0x21	; 33
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	f9 01       	movw	r30, r18
    174a:	20 81       	ld	r18, Z
    174c:	2f 60       	ori	r18, 0x0F	; 15
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
	PORTA = PORTA & 0xF0;
    1752:	82 e2       	ldi	r24, 0x22	; 34
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	22 e2       	ldi	r18, 0x22	; 34
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f9 01       	movw	r30, r18
    175c:	20 81       	ld	r18, Z
    175e:	20 7f       	andi	r18, 0xF0	; 240
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	31 e0       	ldi	r19, 0x01	; 1
    176c:	f9 01       	movw	r30, r18
    176e:	20 81       	ld	r18, Z
    1770:	28 61       	ori	r18, 0x18	; 24
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1776:	8b e0       	ldi	r24, 0x0B	; 11
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	2b e0       	ldi	r18, 0x0B	; 11
    177c:	31 e0       	ldi	r19, 0x01	; 1
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	28 61       	ori	r18, 0x18	; 24
    1784:	fc 01       	movw	r30, r24
    1786:	20 83       	st	Z, r18
}
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1796:	8d e2       	ldi	r24, 0x2D	; 45
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	2d e2       	ldi	r18, 0x2D	; 45
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	2f 7e       	andi	r18, 0xEF	; 239
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    17a8:	8e e2       	ldi	r24, 0x2E	; 46
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	2e e2       	ldi	r18, 0x2E	; 46
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	f9 01       	movw	r30, r18
    17b2:	20 81       	ld	r18, Z
    17b4:	20 61       	ori	r18, 0x10	; 16
    17b6:	fc 01       	movw	r30, r24
    17b8:	20 83       	st	Z, r18
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    17c8:	8d e2       	ldi	r24, 0x2D	; 45
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	2d e2       	ldi	r18, 0x2D	; 45
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	2f 7d       	andi	r18, 0xDF	; 223
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    17da:	8e e2       	ldi	r24, 0x2E	; 46
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	2e e2       	ldi	r18, 0x2E	; 46
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	f9 01       	movw	r30, r18
    17e4:	20 81       	ld	r18, Z
    17e6:	20 62       	ori	r18, 0x20	; 32
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <port_init0>:

//Function to initialize ports
void port_init0()
{
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config(); //robot motion pins config
    17fa:	0e 94 9c 0b 	call	0x1738	; 0x1738 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    17fe:	0e 94 c7 0b 	call	0x178e	; 0x178e <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
    1802:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <right_encoder_pin_config>
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1814:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1816:	8a e6       	ldi	r24, 0x6A	; 106
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	2a e6       	ldi	r18, 0x6A	; 106
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	20 81       	ld	r18, Z
    1822:	22 60       	ori	r18, 0x02	; 2
    1824:	fc 01       	movw	r30, r24
    1826:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1828:	8d e3       	ldi	r24, 0x3D	; 61
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	2d e3       	ldi	r18, 0x3D	; 61
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	f9 01       	movw	r30, r18
    1832:	20 81       	ld	r18, Z
    1834:	20 61       	ori	r18, 0x10	; 16
    1836:	fc 01       	movw	r30, r24
    1838:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    183a:	78 94       	sei
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    184a:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    184c:	8a e6       	ldi	r24, 0x6A	; 106
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	2a e6       	ldi	r18, 0x6A	; 106
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	f9 01       	movw	r30, r18
    1856:	20 81       	ld	r18, Z
    1858:	28 60       	ori	r18, 0x08	; 8
    185a:	fc 01       	movw	r30, r24
    185c:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    185e:	8d e3       	ldi	r24, 0x3D	; 61
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	2d e3       	ldi	r18, 0x3D	; 61
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	20 62       	ori	r18, 0x20	; 32
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1870:	78 94       	sei
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    1878:	1f 92       	push	r1
    187a:	0f 92       	push	r0
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1892:	80 91 04 02 	lds	r24, 0x0204
    1896:	90 91 05 02 	lds	r25, 0x0205
    189a:	a0 91 06 02 	lds	r26, 0x0206
    189e:	b0 91 07 02 	lds	r27, 0x0207
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	a1 1d       	adc	r26, r1
    18a6:	b1 1d       	adc	r27, r1
    18a8:	80 93 04 02 	sts	0x0204, r24
    18ac:	90 93 05 02 	sts	0x0205, r25
    18b0:	a0 93 06 02 	sts	0x0206, r26
    18b4:	b0 93 07 02 	sts	0x0207, r27
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    18e8:	80 91 00 02 	lds	r24, 0x0200
    18ec:	90 91 01 02 	lds	r25, 0x0201
    18f0:	a0 91 02 02 	lds	r26, 0x0202
    18f4:	b0 91 03 02 	lds	r27, 0x0203
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	a1 1d       	adc	r26, r1
    18fc:	b1 1d       	adc	r27, r1
    18fe:	80 93 00 02 	sts	0x0200, r24
    1902:	90 93 01 02 	sts	0x0201, r25
    1906:	a0 93 02 02 	sts	0x0202, r26
    190a:	b0 93 03 02 	sts	0x0203, r27
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <motion_set>:


//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	0f 92       	push	r0
    192a:	0f 92       	push	r0
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char PortARestore = 0;
    1932:	19 82       	std	Y+1, r1	; 0x01

	Direction &= 0x0F; 		// removing upper nibbel for the protection
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	8a 83       	std	Y+2, r24	; 0x02
	PortARestore = PORTA; 		// reading the PORTA original status
    193a:	82 e2       	ldi	r24, 0x22	; 34
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	fc 01       	movw	r30, r24
    1940:	80 81       	ld	r24, Z
    1942:	89 83       	std	Y+1, r24	; 0x01
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	80 7f       	andi	r24, 0xF0	; 240
    1948:	89 83       	std	Y+1, r24	; 0x01
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    194a:	99 81       	ldd	r25, Y+1	; 0x01
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	89 2b       	or	r24, r25
    1950:	89 83       	std	Y+1, r24	; 0x01
	PORTA = PortARestore; 		// executing the command
    1952:	82 e2       	ldi	r24, 0x22	; 34
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	29 81       	ldd	r18, Y+1	; 0x01
    1958:	fc 01       	movw	r30, r24
    195a:	20 83       	st	Z, r18
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <forward>:

void forward (void) //both wheels forward
{
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x06);
    196e:	86 e0       	ldi	r24, 0x06	; 6
    1970:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <back>:

void back (void) //both wheels backward
{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x09);
    1982:	89 e0       	ldi	r24, 0x09	; 9
    1984:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    1996:	85 e0       	ldi	r24, 0x05	; 5
    1998:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x04);
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x02);
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x01);
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x08);
    19fa:	88 e0       	ldi	r24, 0x08	; 8
    19fc:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <stop>:

void stop (void)
{
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x00);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <force_stop>:

void force_stop (void)
{
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0F);
    1a22:	8f e0       	ldi	r24, 0x0F	; 15
    1a24:	0e 94 92 0c 	call	0x1924	; 0x1924 <motion_set>
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2a 97       	sbiw	r28, 0x0a	; 10
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	9a 87       	std	Y+10, r25	; 0x0a
    1a44:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	ab 83       	std	Y+3, r26	; 0x03
    1a52:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1a54:	1d 82       	std	Y+5, r1	; 0x05
    1a56:	1e 82       	std	Y+6, r1	; 0x06
    1a58:	1f 82       	std	Y+7, r1	; 0x07
    1a5a:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	cc 01       	movw	r24, r24
    1a62:	a0 e0       	ldi	r26, 0x00	; 0
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	28 e4       	ldi	r18, 0x48	; 72
    1a78:	31 ee       	ldi	r19, 0xE1	; 225
    1a7a:	42 e8       	ldi	r20, 0x82	; 130
    1a7c:	50 e4       	ldi	r21, 0x40	; 64
    1a7e:	0e 94 91 13 	call	0x2722	; 0x2722 <__divsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	ab 83       	std	Y+3, r26	; 0x03
    1a8c:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    1a8e:	69 81       	ldd	r22, Y+1	; 0x01
    1a90:	7a 81       	ldd	r23, Y+2	; 0x02
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	cc 01       	movw	r24, r24
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	af 83       	std	Y+7, r26	; 0x07
    1aaa:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    1aac:	10 92 04 02 	sts	0x0204, r1
    1ab0:	10 92 05 02 	sts	0x0205, r1
    1ab4:	10 92 06 02 	sts	0x0206, r1
    1ab8:	10 92 07 02 	sts	0x0207, r1
	ShaftCountLeft = 0;
    1abc:	10 92 00 02 	sts	0x0200, r1
    1ac0:	10 92 01 02 	sts	0x0201, r1
    1ac4:	10 92 02 02 	sts	0x0202, r1
    1ac8:	10 92 03 02 	sts	0x0203, r1
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    1ace:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1ad0:	20 91 04 02 	lds	r18, 0x0204
    1ad4:	30 91 05 02 	lds	r19, 0x0205
    1ad8:	40 91 06 02 	lds	r20, 0x0206
    1adc:	50 91 07 02 	lds	r21, 0x0207
    1ae0:	71 e0       	ldi	r23, 0x01	; 1
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	af 81       	ldd	r26, Y+7	; 0x07
    1ae8:	b8 85       	ldd	r27, Y+8	; 0x08
    1aea:	28 17       	cp	r18, r24
    1aec:	39 07       	cpc	r19, r25
    1aee:	4a 07       	cpc	r20, r26
    1af0:	5b 07       	cpc	r21, r27
    1af2:	08 f4       	brcc	.+2      	; 0x1af6 <angle_rotate+0xc8>
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	20 91 00 02 	lds	r18, 0x0200
    1afa:	30 91 01 02 	lds	r19, 0x0201
    1afe:	40 91 02 02 	lds	r20, 0x0202
    1b02:	50 91 03 02 	lds	r21, 0x0203
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	af 81       	ldd	r26, Y+7	; 0x07
    1b0e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	4a 07       	cpc	r20, r26
    1b16:	5b 07       	cpc	r21, r27
    1b18:	08 f4       	brcc	.+2      	; 0x1b1c <angle_rotate+0xee>
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	87 2f       	mov	r24, r23
    1b1e:	86 2b       	or	r24, r22
    1b20:	88 23       	and	r24, r24
    1b22:	a9 f2       	breq	.-86     	; 0x1ace <angle_rotate+0xa0>
		break;
    1b24:	00 00       	nop
	}
	stop(); //Stop robot
    1b26:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <stop>
}
    1b2a:	2a 96       	adiw	r28, 0x0a	; 10
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	08 95       	ret

00001b3c <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	2a 97       	sbiw	r28, 0x0a	; 10
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	9a 87       	std	Y+10, r25	; 0x0a
    1b52:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	dc 01       	movw	r26, r24
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	ab 83       	std	Y+3, r26	; 0x03
    1b60:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    1b62:	1d 82       	std	Y+5, r1	; 0x05
    1b64:	1e 82       	std	Y+6, r1	; 0x06
    1b66:	1f 82       	std	Y+7, r1	; 0x07
    1b68:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	cc 01       	movw	r24, r24
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	25 ee       	ldi	r18, 0xE5	; 229
    1b86:	30 ed       	ldi	r19, 0xD0	; 208
    1b88:	4a ea       	ldi	r20, 0xAA	; 170
    1b8a:	50 e4       	ldi	r21, 0x40	; 64
    1b8c:	0e 94 91 13 	call	0x2722	; 0x2722 <__divsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	ab 83       	std	Y+3, r26	; 0x03
    1b9a:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1b9c:	69 81       	ldd	r22, Y+1	; 0x01
    1b9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	af 83       	std	Y+7, r26	; 0x07
    1bb2:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    1bb4:	10 92 04 02 	sts	0x0204, r1
    1bb8:	10 92 05 02 	sts	0x0205, r1
    1bbc:	10 92 06 02 	sts	0x0206, r1
    1bc0:	10 92 07 02 	sts	0x0207, r1
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <linear_distance_mm+0x8c>
	{
		if(ShaftCountRight > ReqdShaftCountInt)
		{
			break;
		}
	}
    1bc6:	00 00       	nop
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
	
	ShaftCountRight = 0;
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    1bc8:	20 91 04 02 	lds	r18, 0x0204
    1bcc:	30 91 05 02 	lds	r19, 0x0205
    1bd0:	40 91 06 02 	lds	r20, 0x0206
    1bd4:	50 91 07 02 	lds	r21, 0x0207
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	af 81       	ldd	r26, Y+7	; 0x07
    1bde:	b8 85       	ldd	r27, Y+8	; 0x08
    1be0:	82 17       	cp	r24, r18
    1be2:	93 07       	cpc	r25, r19
    1be4:	a4 07       	cpc	r26, r20
    1be6:	b5 07       	cpc	r27, r21
    1be8:	70 f7       	brcc	.-36     	; 0x1bc6 <linear_distance_mm+0x8a>
		{
			break;
    1bea:	00 00       	nop
		}
	}
	stop(); //Stop robot
    1bec:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <stop>
}
    1bf0:	2a 96       	adiw	r28, 0x0a	; 10
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	0f 92       	push	r0
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1c12:	88 e2       	ldi	r24, 0x28	; 40
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	29 81       	ldd	r18, Y+1	; 0x01
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    1c1c:	8a e2       	ldi	r24, 0x2A	; 42
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	2a 81       	ldd	r18, Y+2	; 0x02
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 83       	st	Z, r18
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	0f 92       	push	r0
    1c36:	0f 92       	push	r0
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	velocity(255,255);
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	6f ef       	ldi	r22, 0xFF	; 255
    1c44:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <velocity>
	forward();
    1c48:	0e 94 b3 0c 	call	0x1966	; 0x1966 <forward>
	linear_distance_mm(DistanceInMM);
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <linear_distance_mm>
	force_stop();
    1c54:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <force_stop>
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	0f 92       	push	r0
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
	back();
    1c72:	0e 94 bd 0c 	call	0x197a	; 0x197a <back>
	linear_distance_mm(DistanceInMM);
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <linear_distance_mm>
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	0f 92       	push	r0
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    1c98:	0e 94 c7 0c 	call	0x198e	; 0x198e <left>
	angle_rotate(Degrees);
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	0f 92       	push	r0
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    1cbe:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <right>
	angle_rotate(Degrees);
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <soft_left_degrees>:

void soft_left_degrees(unsigned int Degrees)
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	0f 92       	push	r0
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    1ce4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <soft_left>
	Degrees=Degrees*2;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	08 95       	ret

00001d06 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	0f 92       	push	r0
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    1d16:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <soft_right>
	Degrees=Degrees*2;
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	0f 92       	push	r0
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    1d48:	0e 94 ef 0c 	call	0x19de	; 0x19de <soft_left_2>
	Degrees=Degrees*2;
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	08 95       	ret

00001d6a <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	0f 92       	push	r0
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    1d7a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <soft_right_2>
	Degrees=Degrees*2;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
	angle_rotate(Degrees);
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <angle_rotate>
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <init_devices0>:

//Function to initialize all the devices
void init_devices0()
{
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1da4:	f8 94       	cli
	port_init0();  //Initializes all the ports
    1da6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <port_init0>
	left_position_encoder_interrupt_init();
    1daa:	0e 94 06 0c 	call	0x180c	; 0x180c <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1dae:	0e 94 21 0c 	call	0x1842	; 0x1842 <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
    1db2:	78 94       	sei
}
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1dc2:	84 e2       	ldi	r24, 0x24	; 36
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	24 e2       	ldi	r18, 0x24	; 36
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	f9 01       	movw	r30, r18
    1dcc:	20 81       	ld	r18, Z
    1dce:	20 62       	ori	r18, 0x20	; 32
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1dd4:	85 e2       	ldi	r24, 0x25	; 37
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	25 e2       	ldi	r18, 0x25	; 37
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	f9 01       	movw	r30, r18
    1dde:	20 81       	ld	r18, Z
    1de0:	20 62       	ori	r18, 0x20	; 32
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1df4:	84 e2       	ldi	r24, 0x24	; 36
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	24 e2       	ldi	r18, 0x24	; 36
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	20 81       	ld	r18, Z
    1e00:	20 64       	ori	r18, 0x40	; 64
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1e06:	85 e2       	ldi	r24, 0x25	; 37
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	25 e2       	ldi	r18, 0x25	; 37
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	f9 01       	movw	r30, r18
    1e10:	20 81       	ld	r18, Z
    1e12:	20 64       	ori	r18, 0x40	; 64
    1e14:	fc 01       	movw	r30, r24
    1e16:	20 83       	st	Z, r18
}
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    1e26:	84 e2       	ldi	r24, 0x24	; 36
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	24 e2       	ldi	r18, 0x24	; 36
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	f9 01       	movw	r30, r18
    1e30:	20 81       	ld	r18, Z
    1e32:	20 68       	ori	r18, 0x80	; 128
    1e34:	fc 01       	movw	r30, r24
    1e36:	20 83       	st	Z, r18
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1e38:	85 e2       	ldi	r24, 0x25	; 37
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	25 e2       	ldi	r18, 0x25	; 37
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	f9 01       	movw	r30, r18
    1e42:	20 81       	ld	r18, Z
    1e44:	20 68       	ori	r18, 0x80	; 128
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 83       	st	Z, r18
}
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <port_init1>:

//Initialize the ports
void port_init1(void)
{
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1e58:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
    1e5c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    1e60:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <servo3_pin_config>
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1e72:	81 e8       	ldi	r24, 0x81	; 129
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1e7a:	85 e8       	ldi	r24, 0x85	; 133
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2c ef       	ldi	r18, 0xFC	; 252
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1e84:	84 e8       	ldi	r24, 0x84	; 132
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1e8e:	89 e8       	ldi	r24, 0x89	; 137
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	23 e0       	ldi	r18, 0x03	; 3
    1e94:	fc 01       	movw	r30, r24
    1e96:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1e98:	88 e8       	ldi	r24, 0x88	; 136
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	2f ef       	ldi	r18, 0xFF	; 255
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1ea2:	8b e8       	ldi	r24, 0x8B	; 139
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	23 e0       	ldi	r18, 0x03	; 3
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1eac:	8a e8       	ldi	r24, 0x8A	; 138
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	2f ef       	ldi	r18, 0xFF	; 255
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1eb6:	8d e8       	ldi	r24, 0x8D	; 141
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	23 e0       	ldi	r18, 0x03	; 3
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1ec0:	8c e8       	ldi	r24, 0x8C	; 140
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    1eca:	87 e8       	ldi	r24, 0x87	; 135
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	23 e0       	ldi	r18, 0x03	; 3
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    1ed4:	86 e8       	ldi	r24, 0x86	; 134
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	2f ef       	ldi	r18, 0xFF	; 255
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1ede:	80 e8       	ldi	r24, 0x80	; 128
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	2b ea       	ldi	r18, 0xAB	; 171
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1ee8:	82 e8       	ldi	r24, 0x82	; 130
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	fc 01       	movw	r30, r24
    1eee:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1ef0:	81 e8       	ldi	r24, 0x81	; 129
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2c e0       	ldi	r18, 0x0C	; 12
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <init_devices1>:


//Function to initialize all the peripherals
void init_devices1(void)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    1f08:	f8 94       	cli
 port_init1();
    1f0a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <port_init1>
 timer1_init();
    1f0e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <timer1_init>
 sei(); //re-enable interrupts 
    1f12:	78 94       	sei
}
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <servo_1+0xa>
    1f24:	0f 92       	push	r0
    1f26:	0f 92       	push	r0
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	dc 01       	movw	r26, r24
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	ab 83       	std	Y+3, r26	; 0x03
    1f3a:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	2b e7       	ldi	r18, 0x7B	; 123
    1f58:	34 e1       	ldi	r19, 0x14	; 20
    1f5a:	4e ee       	ldi	r20, 0xEE	; 238
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 91 13 	call	0x2722	; 0x2722 <__divsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	4c e0       	ldi	r20, 0x0C	; 12
    1f70:	52 e4       	ldi	r21, 0x42	; 66
    1f72:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	ab 83       	std	Y+3, r26	; 0x03
    1f80:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    1f82:	89 e8       	ldi	r24, 0x89	; 137
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	fc 01       	movw	r30, r24
    1f88:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    1f8a:	08 e8       	ldi	r16, 0x88	; 136
    1f8c:	10 e0       	ldi	r17, 0x00	; 0
    1f8e:	69 81       	ldd	r22, Y+1	; 0x01
    1f90:	7a 81       	ldd	r23, Y+2	; 0x02
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	80 83       	st	Z, r24
}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	08 95       	ret

00001fb6 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <servo_2+0xa>
    1fc0:	0f 92       	push	r0
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	dc 01       	movw	r26, r24
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	ab 83       	std	Y+3, r26	; 0x03
    1fd6:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e0       	ldi	r26, 0x00	; 0
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	2b e7       	ldi	r18, 0x7B	; 123
    1ff4:	34 e1       	ldi	r19, 0x14	; 20
    1ff6:	4e ee       	ldi	r20, 0xEE	; 238
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 91 13 	call	0x2722	; 0x2722 <__divsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4c e0       	ldi	r20, 0x0C	; 12
    200c:	52 e4       	ldi	r21, 0x42	; 66
    200e:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	ab 83       	std	Y+3, r26	; 0x03
    201c:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    201e:	8b e8       	ldi	r24, 0x8B	; 139
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	fc 01       	movw	r30, r24
    2024:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    2026:	0a e8       	ldi	r16, 0x8A	; 138
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	69 81       	ldd	r22, Y+1	; 0x01
    202c:	7a 81       	ldd	r23, Y+2	; 0x02
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	80 83       	st	Z, r24
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	08 95       	ret

00002052 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	00 d0       	rcall	.+0      	; 0x205c <servo_3+0xa>
    205c:	0f 92       	push	r0
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	dc 01       	movw	r26, r24
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	9a 83       	std	Y+2, r25	; 0x02
    2070:	ab 83       	std	Y+3, r26	; 0x03
    2072:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e0       	ldi	r26, 0x00	; 0
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 25 14 	call	0x284a	; 0x284a <__floatunsisf>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	2b e7       	ldi	r18, 0x7B	; 123
    2090:	34 e1       	ldi	r19, 0x14	; 20
    2092:	4e ee       	ldi	r20, 0xEE	; 238
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 91 13 	call	0x2722	; 0x2722 <__divsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4c e0       	ldi	r20, 0x0C	; 12
    20a8:	52 e4       	ldi	r21, 0x42	; 66
    20aa:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	ab 83       	std	Y+3, r26	; 0x03
    20b8:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    20ba:	8d e8       	ldi	r24, 0x8D	; 141
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	fc 01       	movw	r30, r24
    20c0:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    20c2:	0c e8       	ldi	r16, 0x8C	; 140
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	69 81       	ldd	r22, Y+1	; 0x01
    20c8:	7a 81       	ldd	r23, Y+2	; 0x02
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	80 83       	st	Z, r24
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    20f6:	89 e8       	ldi	r24, 0x89	; 137
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	23 e0       	ldi	r18, 0x03	; 3
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
 OCR1AL = 0xFF; //Servo 1 off
    2100:	88 e8       	ldi	r24, 0x88	; 136
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	2f ef       	ldi	r18, 0xFF	; 255
    2106:	fc 01       	movw	r30, r24
    2108:	20 83       	st	Z, r18
}
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    2118:	8b e8       	ldi	r24, 0x8B	; 139
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	23 e0       	ldi	r18, 0x03	; 3
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
 OCR1BL = 0xFF; //Servo 2 off
    2122:	8a e8       	ldi	r24, 0x8A	; 138
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	2f ef       	ldi	r18, 0xFF	; 255
    2128:	fc 01       	movw	r30, r24
    212a:	20 83       	st	Z, r18
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    213a:	8d e8       	ldi	r24, 0x8D	; 141
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	23 e0       	ldi	r18, 0x03	; 3
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
 OCR1CL = 0xFF; //Servo 3 off
    2144:	8c e8       	ldi	r24, 0x8C	; 140
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	2f ef       	ldi	r18, 0xFF	; 255
    214a:	fc 01       	movw	r30, r24
    214c:	20 83       	st	Z, r18
} 
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    215c:	87 e2       	ldi	r24, 0x27	; 39
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	27 e2       	ldi	r18, 0x27	; 39
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	f9 01       	movw	r30, r18
    2166:	20 81       	ld	r18, Z
    2168:	27 6f       	ori	r18, 0xF7	; 247
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    216e:	88 e2       	ldi	r24, 0x28	; 40
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	28 e2       	ldi	r18, 0x28	; 40
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	f9 01       	movw	r30, r18
    2178:	20 81       	ld	r18, Z
    217a:	20 78       	andi	r18, 0x80	; 128
    217c:	fc 01       	movw	r30, r24
    217e:	20 83       	st	Z, r18
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    218e:	80 e3       	ldi	r24, 0x30	; 48
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	fc 01       	movw	r30, r24
    2194:	10 82       	st	Z, r1
 PORTF = 0x00;
    2196:	81 e3       	ldi	r24, 0x31	; 49
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	fc 01       	movw	r30, r24
    219c:	10 82       	st	Z, r1
 DDRK = 0x00;
    219e:	87 e0       	ldi	r24, 0x07	; 7
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	fc 01       	movw	r30, r24
    21a4:	10 82       	st	Z, r1
 PORTK = 0x00;
    21a6:	88 e0       	ldi	r24, 0x08	; 8
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	fc 01       	movw	r30, r24
    21ac:	10 82       	st	Z, r1
}
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	08 95       	ret

000021b4 <port_init2>:

//Function to Initialize PORTS
void port_init2()
{
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    21bc:	0e 94 aa 10 	call	0x2154	; 0x2154 <lcd_port_config>
	adc_pin_config();
    21c0:	0e 94 c3 10 	call	0x2186	; 0x2186 <adc_pin_config>
	motion_pin_config();	
    21c4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <motion_pin_config>
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    21d6:	81 e2       	ldi	r24, 0x21	; 33
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	fc 01       	movw	r30, r24
    21dc:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    21de:	85 e2       	ldi	r24, 0x25	; 37
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	2f ef       	ldi	r18, 0xFF	; 255
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    21e8:	84 e2       	ldi	r24, 0x24	; 36
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	21 e0       	ldi	r18, 0x01	; 1
    21ee:	fc 01       	movw	r30, r24
    21f0:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    21f2:	89 e2       	ldi	r24, 0x29	; 41
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	fc 01       	movw	r30, r24
    21f8:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    21fa:	88 e2       	ldi	r24, 0x28	; 40
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	2f ef       	ldi	r18, 0xFF	; 255
    2200:	fc 01       	movw	r30, r24
    2202:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    2204:	8b e2       	ldi	r24, 0x2B	; 43
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	fc 01       	movw	r30, r24
    220a:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    220c:	8a e2       	ldi	r24, 0x2A	; 42
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	2f ef       	ldi	r18, 0xFF	; 255
    2212:	fc 01       	movw	r30, r24
    2214:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    2216:	8d e2       	ldi	r24, 0x2D	; 45
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	fc 01       	movw	r30, r24
    221c:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    221e:	8c e2       	ldi	r24, 0x2C	; 44
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	2f ef       	ldi	r18, 0xFF	; 255
    2224:	fc 01       	movw	r30, r24
    2226:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    2228:	80 e2       	ldi	r24, 0x20	; 32
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	29 ea       	ldi	r18, 0xA9	; 169
    222e:	fc 01       	movw	r30, r24
    2230:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    2232:	81 e2       	ldi	r24, 0x21	; 33
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	2b e0       	ldi	r18, 0x0B	; 11
    2238:	fc 01       	movw	r30, r24
    223a:	20 83       	st	Z, r18
}
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret

00002242 <adc_init>:

void adc_init()
{
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    224a:	8a e7       	ldi	r24, 0x7A	; 122
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	fc 01       	movw	r30, r24
    2250:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    2252:	8b e7       	ldi	r24, 0x7B	; 123
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    225a:	8c e7       	ldi	r24, 0x7C	; 124
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	20 e2       	ldi	r18, 0x20	; 32
    2260:	fc 01       	movw	r30, r24
    2262:	20 83       	st	Z, r18
	ACSR = 0x80;
    2264:	80 e5       	ldi	r24, 0x50	; 80
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	20 e8       	ldi	r18, 0x80	; 128
    226a:	fc 01       	movw	r30, r24
    226c:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    226e:	8a e7       	ldi	r24, 0x7A	; 122
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	26 e8       	ldi	r18, 0x86	; 134
    2274:	fc 01       	movw	r30, r24
    2276:	20 83       	st	Z, r18
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	08 95       	ret

0000227e <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	0f 92       	push	r0
    2284:	0f 92       	push	r0
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	88 30       	cpi	r24, 0x08	; 8
    2290:	28 f0       	brcs	.+10     	; 0x229c <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    2292:	8b e7       	ldi	r24, 0x7B	; 123
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	28 e0       	ldi	r18, 0x08	; 8
    2298:	fc 01       	movw	r30, r24
    229a:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	87 70       	andi	r24, 0x07	; 7
    22a0:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    22a2:	8c e7       	ldi	r24, 0x7C	; 124
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	2a 81       	ldd	r18, Y+2	; 0x02
    22a8:	20 62       	ori	r18, 0x20	; 32
    22aa:	fc 01       	movw	r30, r24
    22ac:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    22ae:	8a e7       	ldi	r24, 0x7A	; 122
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	2a e7       	ldi	r18, 0x7A	; 122
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	f9 01       	movw	r30, r18
    22b8:	20 81       	ld	r18, Z
    22ba:	20 64       	ori	r18, 0x40	; 64
    22bc:	fc 01       	movw	r30, r24
    22be:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    22c0:	00 00       	nop
    22c2:	8a e7       	ldi	r24, 0x7A	; 122
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	fc 01       	movw	r30, r24
    22c8:	80 81       	ld	r24, Z
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	80 71       	andi	r24, 0x10	; 16
    22d0:	90 70       	andi	r25, 0x00	; 0
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	b1 f3       	breq	.-20     	; 0x22c2 <ADC_Conversion+0x44>
	a=ADCH;
    22d6:	89 e7       	ldi	r24, 0x79	; 121
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	fc 01       	movw	r30, r24
    22dc:	80 81       	ld	r24, Z
    22de:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    22e0:	8a e7       	ldi	r24, 0x7A	; 122
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	2a e7       	ldi	r18, 0x7A	; 122
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	f9 01       	movw	r30, r18
    22ea:	20 81       	ld	r18, Z
    22ec:	20 61       	ori	r18, 0x10	; 16
    22ee:	fc 01       	movw	r30, r24
    22f0:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    22f2:	8b e7       	ldi	r24, 0x7B	; 123
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	fc 01       	movw	r30, r24
    22f8:	10 82       	st	Z, r1
	return a;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{	
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	00 d0       	rcall	.+0      	; 0x230c <print_sensor+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	6a 83       	std	Y+2, r22	; 0x02
    2314:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ADC_Conversion(channel);
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	0e 94 3f 11 	call	0x227e	; 0x227e <ADC_Conversion>
    231c:	80 93 1e 02 	sts	0x021E, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    2320:	80 91 1e 02 	lds	r24, 0x021E
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	6a 81       	ldd	r22, Y+2	; 0x02
    232c:	a9 01       	movw	r20, r18
    232e:	23 e0       	ldi	r18, 0x03	; 3
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	0e 94 b4 0a 	call	0x1568	; 0x1568 <lcd_print>
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <init_devices2>:

void init_devices2 (void)
{
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    234a:	f8 94       	cli
	port_init2();
    234c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <port_init2>
	adc_init();
    2350:	0e 94 21 11 	call	0x2242	; 0x2242 <adc_init>
	timer5_init();
    2354:	0e 94 e7 10 	call	0x21ce	; 0x21ce <timer5_init>
	sei();   //Enables the global interrupts
    2358:	78 94       	sei
}
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <port_init3>:
void port_init3()
{
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
    2368:	0e 94 9c 0b 	call	0x1738	; 0x1738 <motion_pin_config>
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <init_devices3>:
void init_devices3()
{
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
    237a:	f8 94       	cli
	port_init3();  //Initializes all the ports
    237c:	0e 94 b0 11 	call	0x2360	; 0x2360 <port_init3>
	uart0_init(); //Initailize UART1 for serial communication
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	91 e1       	ldi	r25, 0x11	; 17
    2384:	fc 01       	movw	r30, r24
    2386:	19 95       	eicall
	sei();   //Enables the global interrupts
    2388:	78 94       	sei
}
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <uart0_init>:
void uart0_init(void)
{
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00; //disable while setting baud rate
    2398:	81 ec       	ldi	r24, 0xC1	; 193
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    23a0:	80 ec       	ldi	r24, 0xC0	; 192
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	fc 01       	movw	r30, r24
    23a6:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    23a8:	82 ec       	ldi	r24, 0xC2	; 194
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	26 e0       	ldi	r18, 0x06	; 6
    23ae:	fc 01       	movw	r30, r24
    23b0:	20 83       	st	Z, r18
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
    23b2:	84 ec       	ldi	r24, 0xC4	; 196
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	2f e5       	ldi	r18, 0x5F	; 95
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
	UBRR0H = 0x00; //set baud rate hi
    23bc:	85 ec       	ldi	r24, 0xC5	; 197
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	fc 01       	movw	r30, r24
    23c2:	10 82       	st	Z, r1
	UCSR0B = 0x98;
    23c4:	81 ec       	ldi	r24, 0xC1	; 193
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	28 e9       	ldi	r18, 0x98	; 152
    23ca:	fc 01       	movw	r30, r24
    23cc:	20 83       	st	Z, r18
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <turn_on_ir_proximity>:
#include <math.h>
#include "lcd.c"
#include "dependency.c"

void turn_on_ir_proximity()
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	PORTH = PORTH & 0xF7;
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	22 e0       	ldi	r18, 0x02	; 2
    23e2:	31 e0       	ldi	r19, 0x01	; 1
    23e4:	f9 01       	movw	r30, r18
    23e6:	20 81       	ld	r18, Z
    23e8:	27 7f       	andi	r18, 0xF7	; 247
    23ea:	fc 01       	movw	r30, r24
    23ec:	20 83       	st	Z, r18
} 
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <turn_off_ir_proximity>:
void turn_off_ir_proximity()
{
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	PORTH = PORTH | 0x08;
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	22 e0       	ldi	r18, 0x02	; 2
    2402:	31 e0       	ldi	r19, 0x01	; 1
    2404:	f9 01       	movw	r30, r18
    2406:	20 81       	ld	r18, Z
    2408:	28 60       	ori	r18, 0x08	; 8
    240a:	fc 01       	movw	r30, r24
    240c:	20 83       	st	Z, r18
}
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <main>:
int main(void)
{
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	6c 97       	sbiw	r28, 0x1c	; 28
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
	init_devices1();	//To initiate the ports in the device
    242c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <init_devices1>
	init_devices0();	//To initiate the ports in the device
    2430:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <init_devices0>
	init_devices2();	//To initiate the ports in the device
    2434:	0e 94 a1 11 	call	0x2342	; 0x2342 <init_devices2>
	init_devices3();
    2438:	0e 94 b9 11 	call	0x2372	; 0x2372 <init_devices3>
	lcd_set_4bit();		//To initialise lcd ports
    243c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    2440:	0e 94 8b 06 	call	0xd16	; 0xd16 <lcd_init>
    while(1)
    {
       turn_off_ir_proximity();
    2444:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <turn_off_ir_proximity>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e4       	ldi	r25, 0x40	; 64
    244c:	ac e9       	ldi	r26, 0x9C	; 156
    244e:	b5 e4       	ldi	r27, 0x45	; 69
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	ab 83       	std	Y+3, r26	; 0x03
    2456:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2458:	69 81       	ldd	r22, Y+1	; 0x01
    245a:	7a 81       	ldd	r23, Y+2	; 0x02
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	26 e6       	ldi	r18, 0x66	; 102
    2462:	36 e6       	ldi	r19, 0x66	; 102
    2464:	46 e6       	ldi	r20, 0x66	; 102
    2466:	55 e4       	ldi	r21, 0x45	; 69
    2468:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8d 83       	std	Y+5, r24	; 0x05
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	af 83       	std	Y+7, r26	; 0x07
    2476:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2478:	11 e0       	ldi	r17, 0x01	; 1
    247a:	6d 81       	ldd	r22, Y+5	; 0x05
    247c:	7e 81       	ldd	r23, Y+6	; 0x06
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
    248e:	88 23       	and	r24, r24
    2490:	0c f0       	brlt	.+2      	; 0x2494 <main+0x80>
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	11 23       	and	r17, r17
    2496:	29 f0       	breq	.+10     	; 0x24a2 <main+0x8e>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9a 87       	std	Y+10, r25	; 0x0a
    249e:	89 87       	std	Y+9, r24	; 0x09
    24a0:	46 c0       	rjmp	.+140    	; 0x252e <main+0x11a>
	else if (__tmp > 65535)
    24a2:	11 e0       	ldi	r17, 0x01	; 1
    24a4:	6d 81       	ldd	r22, Y+5	; 0x05
    24a6:	7e 81       	ldd	r23, Y+6	; 0x06
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
    24aa:	98 85       	ldd	r25, Y+8	; 0x08
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	0c f0       	brlt	.+2      	; 0x24be <main+0xaa>
    24bc:	10 e0       	ldi	r17, 0x00	; 0
    24be:	11 23       	and	r17, r17
    24c0:	61 f1       	breq	.+88     	; 0x251a <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	69 81       	ldd	r22, Y+1	; 0x01
    24c4:	7a 81       	ldd	r23, Y+2	; 0x02
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9a 87       	std	Y+10, r25	; 0x0a
    24e8:	89 87       	std	Y+9, r24	; 0x09
    24ea:	12 c0       	rjmp	.+36     	; 0x2510 <main+0xfc>
    24ec:	80 e7       	ldi	r24, 0x70	; 112
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	9c 87       	std	Y+12, r25	; 0x0c
    24f2:	8b 87       	std	Y+11, r24	; 0x0b
    24f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24f8:	8c 01       	movw	r16, r24
    24fa:	c8 01       	movw	r24, r16
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <main+0xe8>
    2500:	8c 01       	movw	r16, r24
    2502:	1c 87       	std	Y+12, r17	; 0x0c
    2504:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9a 87       	std	Y+10, r25	; 0x0a
    250e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	51 f7       	brne	.-44     	; 0x24ec <main+0xd8>
    2518:	17 c0       	rjmp	.+46     	; 0x2548 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6d 81       	ldd	r22, Y+5	; 0x05
    251c:	7e 81       	ldd	r23, Y+6	; 0x06
    251e:	8f 81       	ldd	r24, Y+7	; 0x07
    2520:	98 85       	ldd	r25, Y+8	; 0x08
    2522:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9a 87       	std	Y+10, r25	; 0x0a
    252c:	89 87       	std	Y+9, r24	; 0x09
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	9e 87       	std	Y+14, r25	; 0x0e
    2534:	8d 87       	std	Y+13, r24	; 0x0d
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	8c 01       	movw	r16, r24
    253c:	c8 01       	movw	r24, r16
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <main+0x12a>
    2542:	8c 01       	movw	r16, r24
    2544:	1e 87       	std	Y+14, r17	; 0x0e
    2546:	0d 87       	std	Y+13, r16	; 0x0d
	   _delay_ms(5000);
	   turn_on_ir_proximity();
    2548:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <turn_on_ir_proximity>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e4       	ldi	r25, 0x40	; 64
    2550:	ac e9       	ldi	r26, 0x9C	; 156
    2552:	b5 e4       	ldi	r27, 0x45	; 69
    2554:	8f 87       	std	Y+15, r24	; 0x0f
    2556:	98 8b       	std	Y+16, r25	; 0x10
    2558:	a9 8b       	std	Y+17, r26	; 0x11
    255a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6f 85       	ldd	r22, Y+15	; 0x0f
    255e:	78 89       	ldd	r23, Y+16	; 0x10
    2560:	89 89       	ldd	r24, Y+17	; 0x11
    2562:	9a 89       	ldd	r25, Y+18	; 0x12
    2564:	26 e6       	ldi	r18, 0x66	; 102
    2566:	36 e6       	ldi	r19, 0x66	; 102
    2568:	46 e6       	ldi	r20, 0x66	; 102
    256a:	55 e4       	ldi	r21, 0x45	; 69
    256c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	ad 8b       	std	Y+21, r26	; 0x15
    257a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    257c:	11 e0       	ldi	r17, 0x01	; 1
    257e:	6b 89       	ldd	r22, Y+19	; 0x13
    2580:	7c 89       	ldd	r23, Y+20	; 0x14
    2582:	8d 89       	ldd	r24, Y+21	; 0x15
    2584:	9e 89       	ldd	r25, Y+22	; 0x16
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 8d 13 	call	0x271a	; 0x271a <__cmpsf2>
    2592:	88 23       	and	r24, r24
    2594:	0c f0       	brlt	.+2      	; 0x2598 <main+0x184>
    2596:	10 e0       	ldi	r17, 0x00	; 0
    2598:	11 23       	and	r17, r17
    259a:	29 f0       	breq	.+10     	; 0x25a6 <main+0x192>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	98 8f       	std	Y+24, r25	; 0x18
    25a2:	8f 8b       	std	Y+23, r24	; 0x17
    25a4:	46 c0       	rjmp	.+140    	; 0x2632 <main+0x21e>
	else if (__tmp > 65535)
    25a6:	11 e0       	ldi	r17, 0x01	; 1
    25a8:	6b 89       	ldd	r22, Y+19	; 0x13
    25aa:	7c 89       	ldd	r23, Y+20	; 0x14
    25ac:	8d 89       	ldd	r24, Y+21	; 0x15
    25ae:	9e 89       	ldd	r25, Y+22	; 0x16
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__gesf2>
    25bc:	18 16       	cp	r1, r24
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <main+0x1ae>
    25c0:	10 e0       	ldi	r17, 0x00	; 0
    25c2:	11 23       	and	r17, r17
    25c4:	61 f1       	breq	.+88     	; 0x261e <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    25c8:	78 89       	ldd	r23, Y+16	; 0x10
    25ca:	89 89       	ldd	r24, Y+17	; 0x11
    25cc:	9a 89       	ldd	r25, Y+18	; 0x12
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	98 8f       	std	Y+24, r25	; 0x18
    25ec:	8f 8b       	std	Y+23, r24	; 0x17
    25ee:	12 c0       	rjmp	.+36     	; 0x2614 <main+0x200>
    25f0:	80 e7       	ldi	r24, 0x70	; 112
    25f2:	91 e0       	ldi	r25, 0x01	; 1
    25f4:	9a 8f       	std	Y+26, r25	; 0x1a
    25f6:	89 8f       	std	Y+25, r24	; 0x19
    25f8:	89 8d       	ldd	r24, Y+25	; 0x19
    25fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25fc:	8c 01       	movw	r16, r24
    25fe:	c8 01       	movw	r24, r16
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <main+0x1ec>
    2604:	8c 01       	movw	r16, r24
    2606:	1a 8f       	std	Y+26, r17	; 0x1a
    2608:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	98 8f       	std	Y+24, r25	; 0x18
    2612:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	51 f7       	brne	.-44     	; 0x25f0 <main+0x1dc>
    261c:	18 c0       	rjmp	.+48     	; 0x264e <main+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6b 89       	ldd	r22, Y+19	; 0x13
    2620:	7c 89       	ldd	r23, Y+20	; 0x14
    2622:	8d 89       	ldd	r24, Y+21	; 0x15
    2624:	9e 89       	ldd	r25, Y+22	; 0x16
    2626:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	98 8f       	std	Y+24, r25	; 0x18
    2630:	8f 8b       	std	Y+23, r24	; 0x17
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	9c 8f       	std	Y+28, r25	; 0x1c
    2638:	8b 8f       	std	Y+27, r24	; 0x1b
    263a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263e:	8c 01       	movw	r16, r24
    2640:	c8 01       	movw	r24, r16
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <main+0x22e>
    2646:	8c 01       	movw	r16, r24
    2648:	1c 8f       	std	Y+28, r17	; 0x1c
    264a:	0b 8f       	std	Y+27, r16	; 0x1b
	   _delay_ms(5000); 
    }
    264c:	fb ce       	rjmp	.-522    	; 0x2444 <main+0x30>
    264e:	fa ce       	rjmp	.-524    	; 0x2444 <main+0x30>

00002650 <__subsf3>:
    2650:	50 58       	subi	r21, 0x80	; 128

00002652 <__addsf3>:
    2652:	bb 27       	eor	r27, r27
    2654:	aa 27       	eor	r26, r26
    2656:	0e d0       	rcall	.+28     	; 0x2674 <__addsf3x>
    2658:	70 c1       	rjmp	.+736    	; 0x293a <__fp_round>
    265a:	61 d1       	rcall	.+706    	; 0x291e <__fp_pscA>
    265c:	30 f0       	brcs	.+12     	; 0x266a <__addsf3+0x18>
    265e:	66 d1       	rcall	.+716    	; 0x292c <__fp_pscB>
    2660:	20 f0       	brcs	.+8      	; 0x266a <__addsf3+0x18>
    2662:	31 f4       	brne	.+12     	; 0x2670 <__addsf3+0x1e>
    2664:	9f 3f       	cpi	r25, 0xFF	; 255
    2666:	11 f4       	brne	.+4      	; 0x266c <__addsf3+0x1a>
    2668:	1e f4       	brtc	.+6      	; 0x2670 <__addsf3+0x1e>
    266a:	56 c1       	rjmp	.+684    	; 0x2918 <__fp_nan>
    266c:	0e f4       	brtc	.+2      	; 0x2670 <__addsf3+0x1e>
    266e:	e0 95       	com	r30
    2670:	e7 fb       	bst	r30, 7
    2672:	4c c1       	rjmp	.+664    	; 0x290c <__fp_inf>

00002674 <__addsf3x>:
    2674:	e9 2f       	mov	r30, r25
    2676:	72 d1       	rcall	.+740    	; 0x295c <__fp_split3>
    2678:	80 f3       	brcs	.-32     	; 0x265a <__addsf3+0x8>
    267a:	ba 17       	cp	r27, r26
    267c:	62 07       	cpc	r22, r18
    267e:	73 07       	cpc	r23, r19
    2680:	84 07       	cpc	r24, r20
    2682:	95 07       	cpc	r25, r21
    2684:	18 f0       	brcs	.+6      	; 0x268c <__addsf3x+0x18>
    2686:	71 f4       	brne	.+28     	; 0x26a4 <__addsf3x+0x30>
    2688:	9e f5       	brtc	.+102    	; 0x26f0 <__addsf3x+0x7c>
    268a:	8a c1       	rjmp	.+788    	; 0x29a0 <__fp_zero>
    268c:	0e f4       	brtc	.+2      	; 0x2690 <__addsf3x+0x1c>
    268e:	e0 95       	com	r30
    2690:	0b 2e       	mov	r0, r27
    2692:	ba 2f       	mov	r27, r26
    2694:	a0 2d       	mov	r26, r0
    2696:	0b 01       	movw	r0, r22
    2698:	b9 01       	movw	r22, r18
    269a:	90 01       	movw	r18, r0
    269c:	0c 01       	movw	r0, r24
    269e:	ca 01       	movw	r24, r20
    26a0:	a0 01       	movw	r20, r0
    26a2:	11 24       	eor	r1, r1
    26a4:	ff 27       	eor	r31, r31
    26a6:	59 1b       	sub	r21, r25
    26a8:	99 f0       	breq	.+38     	; 0x26d0 <__addsf3x+0x5c>
    26aa:	59 3f       	cpi	r21, 0xF9	; 249
    26ac:	50 f4       	brcc	.+20     	; 0x26c2 <__addsf3x+0x4e>
    26ae:	50 3e       	cpi	r21, 0xE0	; 224
    26b0:	68 f1       	brcs	.+90     	; 0x270c <__addsf3x+0x98>
    26b2:	1a 16       	cp	r1, r26
    26b4:	f0 40       	sbci	r31, 0x00	; 0
    26b6:	a2 2f       	mov	r26, r18
    26b8:	23 2f       	mov	r18, r19
    26ba:	34 2f       	mov	r19, r20
    26bc:	44 27       	eor	r20, r20
    26be:	58 5f       	subi	r21, 0xF8	; 248
    26c0:	f3 cf       	rjmp	.-26     	; 0x26a8 <__addsf3x+0x34>
    26c2:	46 95       	lsr	r20
    26c4:	37 95       	ror	r19
    26c6:	27 95       	ror	r18
    26c8:	a7 95       	ror	r26
    26ca:	f0 40       	sbci	r31, 0x00	; 0
    26cc:	53 95       	inc	r21
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__addsf3x+0x4e>
    26d0:	7e f4       	brtc	.+30     	; 0x26f0 <__addsf3x+0x7c>
    26d2:	1f 16       	cp	r1, r31
    26d4:	ba 0b       	sbc	r27, r26
    26d6:	62 0b       	sbc	r22, r18
    26d8:	73 0b       	sbc	r23, r19
    26da:	84 0b       	sbc	r24, r20
    26dc:	ba f0       	brmi	.+46     	; 0x270c <__addsf3x+0x98>
    26de:	91 50       	subi	r25, 0x01	; 1
    26e0:	a1 f0       	breq	.+40     	; 0x270a <__addsf3x+0x96>
    26e2:	ff 0f       	add	r31, r31
    26e4:	bb 1f       	adc	r27, r27
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	c2 f7       	brpl	.-16     	; 0x26de <__addsf3x+0x6a>
    26ee:	0e c0       	rjmp	.+28     	; 0x270c <__addsf3x+0x98>
    26f0:	ba 0f       	add	r27, r26
    26f2:	62 1f       	adc	r22, r18
    26f4:	73 1f       	adc	r23, r19
    26f6:	84 1f       	adc	r24, r20
    26f8:	48 f4       	brcc	.+18     	; 0x270c <__addsf3x+0x98>
    26fa:	87 95       	ror	r24
    26fc:	77 95       	ror	r23
    26fe:	67 95       	ror	r22
    2700:	b7 95       	ror	r27
    2702:	f7 95       	ror	r31
    2704:	9e 3f       	cpi	r25, 0xFE	; 254
    2706:	08 f0       	brcs	.+2      	; 0x270a <__addsf3x+0x96>
    2708:	b3 cf       	rjmp	.-154    	; 0x2670 <__addsf3+0x1e>
    270a:	93 95       	inc	r25
    270c:	88 0f       	add	r24, r24
    270e:	08 f0       	brcs	.+2      	; 0x2712 <__addsf3x+0x9e>
    2710:	99 27       	eor	r25, r25
    2712:	ee 0f       	add	r30, r30
    2714:	97 95       	ror	r25
    2716:	87 95       	ror	r24
    2718:	08 95       	ret

0000271a <__cmpsf2>:
    271a:	d4 d0       	rcall	.+424    	; 0x28c4 <__fp_cmp>
    271c:	08 f4       	brcc	.+2      	; 0x2720 <__cmpsf2+0x6>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	08 95       	ret

00002722 <__divsf3>:
    2722:	0c d0       	rcall	.+24     	; 0x273c <__divsf3x>
    2724:	0a c1       	rjmp	.+532    	; 0x293a <__fp_round>
    2726:	02 d1       	rcall	.+516    	; 0x292c <__fp_pscB>
    2728:	40 f0       	brcs	.+16     	; 0x273a <__divsf3+0x18>
    272a:	f9 d0       	rcall	.+498    	; 0x291e <__fp_pscA>
    272c:	30 f0       	brcs	.+12     	; 0x273a <__divsf3+0x18>
    272e:	21 f4       	brne	.+8      	; 0x2738 <__divsf3+0x16>
    2730:	5f 3f       	cpi	r21, 0xFF	; 255
    2732:	19 f0       	breq	.+6      	; 0x273a <__divsf3+0x18>
    2734:	eb c0       	rjmp	.+470    	; 0x290c <__fp_inf>
    2736:	51 11       	cpse	r21, r1
    2738:	34 c1       	rjmp	.+616    	; 0x29a2 <__fp_szero>
    273a:	ee c0       	rjmp	.+476    	; 0x2918 <__fp_nan>

0000273c <__divsf3x>:
    273c:	0f d1       	rcall	.+542    	; 0x295c <__fp_split3>
    273e:	98 f3       	brcs	.-26     	; 0x2726 <__divsf3+0x4>

00002740 <__divsf3_pse>:
    2740:	99 23       	and	r25, r25
    2742:	c9 f3       	breq	.-14     	; 0x2736 <__divsf3+0x14>
    2744:	55 23       	and	r21, r21
    2746:	b1 f3       	breq	.-20     	; 0x2734 <__divsf3+0x12>
    2748:	95 1b       	sub	r25, r21
    274a:	55 0b       	sbc	r21, r21
    274c:	bb 27       	eor	r27, r27
    274e:	aa 27       	eor	r26, r26
    2750:	62 17       	cp	r22, r18
    2752:	73 07       	cpc	r23, r19
    2754:	84 07       	cpc	r24, r20
    2756:	38 f0       	brcs	.+14     	; 0x2766 <__divsf3_pse+0x26>
    2758:	9f 5f       	subi	r25, 0xFF	; 255
    275a:	5f 4f       	sbci	r21, 0xFF	; 255
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	44 1f       	adc	r20, r20
    2762:	aa 1f       	adc	r26, r26
    2764:	a9 f3       	breq	.-22     	; 0x2750 <__divsf3_pse+0x10>
    2766:	33 d0       	rcall	.+102    	; 0x27ce <__divsf3_pse+0x8e>
    2768:	0e 2e       	mov	r0, r30
    276a:	3a f0       	brmi	.+14     	; 0x277a <__divsf3_pse+0x3a>
    276c:	e0 e8       	ldi	r30, 0x80	; 128
    276e:	30 d0       	rcall	.+96     	; 0x27d0 <__divsf3_pse+0x90>
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	50 40       	sbci	r21, 0x00	; 0
    2774:	e6 95       	lsr	r30
    2776:	00 1c       	adc	r0, r0
    2778:	ca f7       	brpl	.-14     	; 0x276c <__divsf3_pse+0x2c>
    277a:	29 d0       	rcall	.+82     	; 0x27ce <__divsf3_pse+0x8e>
    277c:	fe 2f       	mov	r31, r30
    277e:	27 d0       	rcall	.+78     	; 0x27ce <__divsf3_pse+0x8e>
    2780:	66 0f       	add	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	bb 1f       	adc	r27, r27
    2788:	26 17       	cp	r18, r22
    278a:	37 07       	cpc	r19, r23
    278c:	48 07       	cpc	r20, r24
    278e:	ab 07       	cpc	r26, r27
    2790:	b0 e8       	ldi	r27, 0x80	; 128
    2792:	09 f0       	breq	.+2      	; 0x2796 <__divsf3_pse+0x56>
    2794:	bb 0b       	sbc	r27, r27
    2796:	80 2d       	mov	r24, r0
    2798:	bf 01       	movw	r22, r30
    279a:	ff 27       	eor	r31, r31
    279c:	93 58       	subi	r25, 0x83	; 131
    279e:	5f 4f       	sbci	r21, 0xFF	; 255
    27a0:	2a f0       	brmi	.+10     	; 0x27ac <__divsf3_pse+0x6c>
    27a2:	9e 3f       	cpi	r25, 0xFE	; 254
    27a4:	51 05       	cpc	r21, r1
    27a6:	68 f0       	brcs	.+26     	; 0x27c2 <__divsf3_pse+0x82>
    27a8:	b1 c0       	rjmp	.+354    	; 0x290c <__fp_inf>
    27aa:	fb c0       	rjmp	.+502    	; 0x29a2 <__fp_szero>
    27ac:	5f 3f       	cpi	r21, 0xFF	; 255
    27ae:	ec f3       	brlt	.-6      	; 0x27aa <__divsf3_pse+0x6a>
    27b0:	98 3e       	cpi	r25, 0xE8	; 232
    27b2:	dc f3       	brlt	.-10     	; 0x27aa <__divsf3_pse+0x6a>
    27b4:	86 95       	lsr	r24
    27b6:	77 95       	ror	r23
    27b8:	67 95       	ror	r22
    27ba:	b7 95       	ror	r27
    27bc:	f7 95       	ror	r31
    27be:	9f 5f       	subi	r25, 0xFF	; 255
    27c0:	c9 f7       	brne	.-14     	; 0x27b4 <__divsf3_pse+0x74>
    27c2:	88 0f       	add	r24, r24
    27c4:	91 1d       	adc	r25, r1
    27c6:	96 95       	lsr	r25
    27c8:	87 95       	ror	r24
    27ca:	97 f9       	bld	r25, 7
    27cc:	08 95       	ret
    27ce:	e1 e0       	ldi	r30, 0x01	; 1
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	bb 1f       	adc	r27, r27
    27d8:	62 17       	cp	r22, r18
    27da:	73 07       	cpc	r23, r19
    27dc:	84 07       	cpc	r24, r20
    27de:	ba 07       	cpc	r27, r26
    27e0:	20 f0       	brcs	.+8      	; 0x27ea <__divsf3_pse+0xaa>
    27e2:	62 1b       	sub	r22, r18
    27e4:	73 0b       	sbc	r23, r19
    27e6:	84 0b       	sbc	r24, r20
    27e8:	ba 0b       	sbc	r27, r26
    27ea:	ee 1f       	adc	r30, r30
    27ec:	88 f7       	brcc	.-30     	; 0x27d0 <__divsf3_pse+0x90>
    27ee:	e0 95       	com	r30
    27f0:	08 95       	ret

000027f2 <__fixunssfsi>:
    27f2:	bc d0       	rcall	.+376    	; 0x296c <__fp_splitA>
    27f4:	88 f0       	brcs	.+34     	; 0x2818 <__fixunssfsi+0x26>
    27f6:	9f 57       	subi	r25, 0x7F	; 127
    27f8:	90 f0       	brcs	.+36     	; 0x281e <__fixunssfsi+0x2c>
    27fa:	b9 2f       	mov	r27, r25
    27fc:	99 27       	eor	r25, r25
    27fe:	b7 51       	subi	r27, 0x17	; 23
    2800:	a0 f0       	brcs	.+40     	; 0x282a <__fixunssfsi+0x38>
    2802:	d1 f0       	breq	.+52     	; 0x2838 <__fixunssfsi+0x46>
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	1a f0       	brmi	.+6      	; 0x2814 <__fixunssfsi+0x22>
    280e:	ba 95       	dec	r27
    2810:	c9 f7       	brne	.-14     	; 0x2804 <__fixunssfsi+0x12>
    2812:	12 c0       	rjmp	.+36     	; 0x2838 <__fixunssfsi+0x46>
    2814:	b1 30       	cpi	r27, 0x01	; 1
    2816:	81 f0       	breq	.+32     	; 0x2838 <__fixunssfsi+0x46>
    2818:	c3 d0       	rcall	.+390    	; 0x29a0 <__fp_zero>
    281a:	b1 e0       	ldi	r27, 0x01	; 1
    281c:	08 95       	ret
    281e:	c0 c0       	rjmp	.+384    	; 0x29a0 <__fp_zero>
    2820:	67 2f       	mov	r22, r23
    2822:	78 2f       	mov	r23, r24
    2824:	88 27       	eor	r24, r24
    2826:	b8 5f       	subi	r27, 0xF8	; 248
    2828:	39 f0       	breq	.+14     	; 0x2838 <__fixunssfsi+0x46>
    282a:	b9 3f       	cpi	r27, 0xF9	; 249
    282c:	cc f3       	brlt	.-14     	; 0x2820 <__fixunssfsi+0x2e>
    282e:	86 95       	lsr	r24
    2830:	77 95       	ror	r23
    2832:	67 95       	ror	r22
    2834:	b3 95       	inc	r27
    2836:	d9 f7       	brne	.-10     	; 0x282e <__fixunssfsi+0x3c>
    2838:	3e f4       	brtc	.+14     	; 0x2848 <__fixunssfsi+0x56>
    283a:	90 95       	com	r25
    283c:	80 95       	com	r24
    283e:	70 95       	com	r23
    2840:	61 95       	neg	r22
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	8f 4f       	sbci	r24, 0xFF	; 255
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	08 95       	ret

0000284a <__floatunsisf>:
    284a:	e8 94       	clt
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <__floatsisf+0x12>

0000284e <__floatsisf>:
    284e:	97 fb       	bst	r25, 7
    2850:	3e f4       	brtc	.+14     	; 0x2860 <__floatsisf+0x12>
    2852:	90 95       	com	r25
    2854:	80 95       	com	r24
    2856:	70 95       	com	r23
    2858:	61 95       	neg	r22
    285a:	7f 4f       	sbci	r23, 0xFF	; 255
    285c:	8f 4f       	sbci	r24, 0xFF	; 255
    285e:	9f 4f       	sbci	r25, 0xFF	; 255
    2860:	99 23       	and	r25, r25
    2862:	a9 f0       	breq	.+42     	; 0x288e <__floatsisf+0x40>
    2864:	f9 2f       	mov	r31, r25
    2866:	96 e9       	ldi	r25, 0x96	; 150
    2868:	bb 27       	eor	r27, r27
    286a:	93 95       	inc	r25
    286c:	f6 95       	lsr	r31
    286e:	87 95       	ror	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	b7 95       	ror	r27
    2876:	f1 11       	cpse	r31, r1
    2878:	f8 cf       	rjmp	.-16     	; 0x286a <__floatsisf+0x1c>
    287a:	fa f4       	brpl	.+62     	; 0x28ba <__floatsisf+0x6c>
    287c:	bb 0f       	add	r27, r27
    287e:	11 f4       	brne	.+4      	; 0x2884 <__floatsisf+0x36>
    2880:	60 ff       	sbrs	r22, 0
    2882:	1b c0       	rjmp	.+54     	; 0x28ba <__floatsisf+0x6c>
    2884:	6f 5f       	subi	r22, 0xFF	; 255
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	8f 4f       	sbci	r24, 0xFF	; 255
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	16 c0       	rjmp	.+44     	; 0x28ba <__floatsisf+0x6c>
    288e:	88 23       	and	r24, r24
    2890:	11 f0       	breq	.+4      	; 0x2896 <__floatsisf+0x48>
    2892:	96 e9       	ldi	r25, 0x96	; 150
    2894:	11 c0       	rjmp	.+34     	; 0x28b8 <__floatsisf+0x6a>
    2896:	77 23       	and	r23, r23
    2898:	21 f0       	breq	.+8      	; 0x28a2 <__floatsisf+0x54>
    289a:	9e e8       	ldi	r25, 0x8E	; 142
    289c:	87 2f       	mov	r24, r23
    289e:	76 2f       	mov	r23, r22
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <__floatsisf+0x5e>
    28a2:	66 23       	and	r22, r22
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <__floatsisf+0x74>
    28a6:	96 e8       	ldi	r25, 0x86	; 134
    28a8:	86 2f       	mov	r24, r22
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	2a f0       	brmi	.+10     	; 0x28ba <__floatsisf+0x6c>
    28b0:	9a 95       	dec	r25
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	88 1f       	adc	r24, r24
    28b8:	da f7       	brpl	.-10     	; 0x28b0 <__floatsisf+0x62>
    28ba:	88 0f       	add	r24, r24
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	97 f9       	bld	r25, 7
    28c2:	08 95       	ret

000028c4 <__fp_cmp>:
    28c4:	99 0f       	add	r25, r25
    28c6:	00 08       	sbc	r0, r0
    28c8:	55 0f       	add	r21, r21
    28ca:	aa 0b       	sbc	r26, r26
    28cc:	e0 e8       	ldi	r30, 0x80	; 128
    28ce:	fe ef       	ldi	r31, 0xFE	; 254
    28d0:	16 16       	cp	r1, r22
    28d2:	17 06       	cpc	r1, r23
    28d4:	e8 07       	cpc	r30, r24
    28d6:	f9 07       	cpc	r31, r25
    28d8:	c0 f0       	brcs	.+48     	; 0x290a <__fp_cmp+0x46>
    28da:	12 16       	cp	r1, r18
    28dc:	13 06       	cpc	r1, r19
    28de:	e4 07       	cpc	r30, r20
    28e0:	f5 07       	cpc	r31, r21
    28e2:	98 f0       	brcs	.+38     	; 0x290a <__fp_cmp+0x46>
    28e4:	62 1b       	sub	r22, r18
    28e6:	73 0b       	sbc	r23, r19
    28e8:	84 0b       	sbc	r24, r20
    28ea:	95 0b       	sbc	r25, r21
    28ec:	39 f4       	brne	.+14     	; 0x28fc <__fp_cmp+0x38>
    28ee:	0a 26       	eor	r0, r26
    28f0:	61 f0       	breq	.+24     	; 0x290a <__fp_cmp+0x46>
    28f2:	23 2b       	or	r18, r19
    28f4:	24 2b       	or	r18, r20
    28f6:	25 2b       	or	r18, r21
    28f8:	21 f4       	brne	.+8      	; 0x2902 <__fp_cmp+0x3e>
    28fa:	08 95       	ret
    28fc:	0a 26       	eor	r0, r26
    28fe:	09 f4       	brne	.+2      	; 0x2902 <__fp_cmp+0x3e>
    2900:	a1 40       	sbci	r26, 0x01	; 1
    2902:	a6 95       	lsr	r26
    2904:	8f ef       	ldi	r24, 0xFF	; 255
    2906:	81 1d       	adc	r24, r1
    2908:	81 1d       	adc	r24, r1
    290a:	08 95       	ret

0000290c <__fp_inf>:
    290c:	97 f9       	bld	r25, 7
    290e:	9f 67       	ori	r25, 0x7F	; 127
    2910:	80 e8       	ldi	r24, 0x80	; 128
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	08 95       	ret

00002918 <__fp_nan>:
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	80 ec       	ldi	r24, 0xC0	; 192
    291c:	08 95       	ret

0000291e <__fp_pscA>:
    291e:	00 24       	eor	r0, r0
    2920:	0a 94       	dec	r0
    2922:	16 16       	cp	r1, r22
    2924:	17 06       	cpc	r1, r23
    2926:	18 06       	cpc	r1, r24
    2928:	09 06       	cpc	r0, r25
    292a:	08 95       	ret

0000292c <__fp_pscB>:
    292c:	00 24       	eor	r0, r0
    292e:	0a 94       	dec	r0
    2930:	12 16       	cp	r1, r18
    2932:	13 06       	cpc	r1, r19
    2934:	14 06       	cpc	r1, r20
    2936:	05 06       	cpc	r0, r21
    2938:	08 95       	ret

0000293a <__fp_round>:
    293a:	09 2e       	mov	r0, r25
    293c:	03 94       	inc	r0
    293e:	00 0c       	add	r0, r0
    2940:	11 f4       	brne	.+4      	; 0x2946 <__fp_round+0xc>
    2942:	88 23       	and	r24, r24
    2944:	52 f0       	brmi	.+20     	; 0x295a <__fp_round+0x20>
    2946:	bb 0f       	add	r27, r27
    2948:	40 f4       	brcc	.+16     	; 0x295a <__fp_round+0x20>
    294a:	bf 2b       	or	r27, r31
    294c:	11 f4       	brne	.+4      	; 0x2952 <__fp_round+0x18>
    294e:	60 ff       	sbrs	r22, 0
    2950:	04 c0       	rjmp	.+8      	; 0x295a <__fp_round+0x20>
    2952:	6f 5f       	subi	r22, 0xFF	; 255
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	08 95       	ret

0000295c <__fp_split3>:
    295c:	57 fd       	sbrc	r21, 7
    295e:	90 58       	subi	r25, 0x80	; 128
    2960:	44 0f       	add	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	59 f0       	breq	.+22     	; 0x297c <__fp_splitA+0x10>
    2966:	5f 3f       	cpi	r21, 0xFF	; 255
    2968:	71 f0       	breq	.+28     	; 0x2986 <__fp_splitA+0x1a>
    296a:	47 95       	ror	r20

0000296c <__fp_splitA>:
    296c:	88 0f       	add	r24, r24
    296e:	97 fb       	bst	r25, 7
    2970:	99 1f       	adc	r25, r25
    2972:	61 f0       	breq	.+24     	; 0x298c <__fp_splitA+0x20>
    2974:	9f 3f       	cpi	r25, 0xFF	; 255
    2976:	79 f0       	breq	.+30     	; 0x2996 <__fp_splitA+0x2a>
    2978:	87 95       	ror	r24
    297a:	08 95       	ret
    297c:	12 16       	cp	r1, r18
    297e:	13 06       	cpc	r1, r19
    2980:	14 06       	cpc	r1, r20
    2982:	55 1f       	adc	r21, r21
    2984:	f2 cf       	rjmp	.-28     	; 0x296a <__fp_split3+0xe>
    2986:	46 95       	lsr	r20
    2988:	f1 df       	rcall	.-30     	; 0x296c <__fp_splitA>
    298a:	08 c0       	rjmp	.+16     	; 0x299c <__fp_splitA+0x30>
    298c:	16 16       	cp	r1, r22
    298e:	17 06       	cpc	r1, r23
    2990:	18 06       	cpc	r1, r24
    2992:	99 1f       	adc	r25, r25
    2994:	f1 cf       	rjmp	.-30     	; 0x2978 <__fp_splitA+0xc>
    2996:	86 95       	lsr	r24
    2998:	71 05       	cpc	r23, r1
    299a:	61 05       	cpc	r22, r1
    299c:	08 94       	sec
    299e:	08 95       	ret

000029a0 <__fp_zero>:
    29a0:	e8 94       	clt

000029a2 <__fp_szero>:
    29a2:	bb 27       	eor	r27, r27
    29a4:	66 27       	eor	r22, r22
    29a6:	77 27       	eor	r23, r23
    29a8:	cb 01       	movw	r24, r22
    29aa:	97 f9       	bld	r25, 7
    29ac:	08 95       	ret

000029ae <__gesf2>:
    29ae:	8a df       	rcall	.-236    	; 0x28c4 <__fp_cmp>
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <__gesf2+0x6>
    29b2:	8f ef       	ldi	r24, 0xFF	; 255
    29b4:	08 95       	ret

000029b6 <__mulsf3>:
    29b6:	0b d0       	rcall	.+22     	; 0x29ce <__mulsf3x>
    29b8:	c0 cf       	rjmp	.-128    	; 0x293a <__fp_round>
    29ba:	b1 df       	rcall	.-158    	; 0x291e <__fp_pscA>
    29bc:	28 f0       	brcs	.+10     	; 0x29c8 <__mulsf3+0x12>
    29be:	b6 df       	rcall	.-148    	; 0x292c <__fp_pscB>
    29c0:	18 f0       	brcs	.+6      	; 0x29c8 <__mulsf3+0x12>
    29c2:	95 23       	and	r25, r21
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <__mulsf3+0x12>
    29c6:	a2 cf       	rjmp	.-188    	; 0x290c <__fp_inf>
    29c8:	a7 cf       	rjmp	.-178    	; 0x2918 <__fp_nan>
    29ca:	11 24       	eor	r1, r1
    29cc:	ea cf       	rjmp	.-44     	; 0x29a2 <__fp_szero>

000029ce <__mulsf3x>:
    29ce:	c6 df       	rcall	.-116    	; 0x295c <__fp_split3>
    29d0:	a0 f3       	brcs	.-24     	; 0x29ba <__mulsf3+0x4>

000029d2 <__mulsf3_pse>:
    29d2:	95 9f       	mul	r25, r21
    29d4:	d1 f3       	breq	.-12     	; 0x29ca <__mulsf3+0x14>
    29d6:	95 0f       	add	r25, r21
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	55 1f       	adc	r21, r21
    29dc:	62 9f       	mul	r22, r18
    29de:	f0 01       	movw	r30, r0
    29e0:	72 9f       	mul	r23, r18
    29e2:	bb 27       	eor	r27, r27
    29e4:	f0 0d       	add	r31, r0
    29e6:	b1 1d       	adc	r27, r1
    29e8:	63 9f       	mul	r22, r19
    29ea:	aa 27       	eor	r26, r26
    29ec:	f0 0d       	add	r31, r0
    29ee:	b1 1d       	adc	r27, r1
    29f0:	aa 1f       	adc	r26, r26
    29f2:	64 9f       	mul	r22, r20
    29f4:	66 27       	eor	r22, r22
    29f6:	b0 0d       	add	r27, r0
    29f8:	a1 1d       	adc	r26, r1
    29fa:	66 1f       	adc	r22, r22
    29fc:	82 9f       	mul	r24, r18
    29fe:	22 27       	eor	r18, r18
    2a00:	b0 0d       	add	r27, r0
    2a02:	a1 1d       	adc	r26, r1
    2a04:	62 1f       	adc	r22, r18
    2a06:	73 9f       	mul	r23, r19
    2a08:	b0 0d       	add	r27, r0
    2a0a:	a1 1d       	adc	r26, r1
    2a0c:	62 1f       	adc	r22, r18
    2a0e:	83 9f       	mul	r24, r19
    2a10:	a0 0d       	add	r26, r0
    2a12:	61 1d       	adc	r22, r1
    2a14:	22 1f       	adc	r18, r18
    2a16:	74 9f       	mul	r23, r20
    2a18:	33 27       	eor	r19, r19
    2a1a:	a0 0d       	add	r26, r0
    2a1c:	61 1d       	adc	r22, r1
    2a1e:	23 1f       	adc	r18, r19
    2a20:	84 9f       	mul	r24, r20
    2a22:	60 0d       	add	r22, r0
    2a24:	21 1d       	adc	r18, r1
    2a26:	82 2f       	mov	r24, r18
    2a28:	76 2f       	mov	r23, r22
    2a2a:	6a 2f       	mov	r22, r26
    2a2c:	11 24       	eor	r1, r1
    2a2e:	9f 57       	subi	r25, 0x7F	; 127
    2a30:	50 40       	sbci	r21, 0x00	; 0
    2a32:	8a f0       	brmi	.+34     	; 0x2a56 <__mulsf3_pse+0x84>
    2a34:	e1 f0       	breq	.+56     	; 0x2a6e <__mulsf3_pse+0x9c>
    2a36:	88 23       	and	r24, r24
    2a38:	4a f0       	brmi	.+18     	; 0x2a4c <__mulsf3_pse+0x7a>
    2a3a:	ee 0f       	add	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	bb 1f       	adc	r27, r27
    2a40:	66 1f       	adc	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	91 50       	subi	r25, 0x01	; 1
    2a48:	50 40       	sbci	r21, 0x00	; 0
    2a4a:	a9 f7       	brne	.-22     	; 0x2a36 <__mulsf3_pse+0x64>
    2a4c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a4e:	51 05       	cpc	r21, r1
    2a50:	70 f0       	brcs	.+28     	; 0x2a6e <__mulsf3_pse+0x9c>
    2a52:	5c cf       	rjmp	.-328    	; 0x290c <__fp_inf>
    2a54:	a6 cf       	rjmp	.-180    	; 0x29a2 <__fp_szero>
    2a56:	5f 3f       	cpi	r21, 0xFF	; 255
    2a58:	ec f3       	brlt	.-6      	; 0x2a54 <__mulsf3_pse+0x82>
    2a5a:	98 3e       	cpi	r25, 0xE8	; 232
    2a5c:	dc f3       	brlt	.-10     	; 0x2a54 <__mulsf3_pse+0x82>
    2a5e:	86 95       	lsr	r24
    2a60:	77 95       	ror	r23
    2a62:	67 95       	ror	r22
    2a64:	b7 95       	ror	r27
    2a66:	f7 95       	ror	r31
    2a68:	e7 95       	ror	r30
    2a6a:	9f 5f       	subi	r25, 0xFF	; 255
    2a6c:	c1 f7       	brne	.-16     	; 0x2a5e <__mulsf3_pse+0x8c>
    2a6e:	fe 2b       	or	r31, r30
    2a70:	88 0f       	add	r24, r24
    2a72:	91 1d       	adc	r25, r1
    2a74:	96 95       	lsr	r25
    2a76:	87 95       	ror	r24
    2a78:	97 f9       	bld	r25, 7
    2a7a:	08 95       	ret

00002a7c <__udivmodhi4>:
    2a7c:	aa 1b       	sub	r26, r26
    2a7e:	bb 1b       	sub	r27, r27
    2a80:	51 e1       	ldi	r21, 0x11	; 17
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <__udivmodhi4_ep>

00002a84 <__udivmodhi4_loop>:
    2a84:	aa 1f       	adc	r26, r26
    2a86:	bb 1f       	adc	r27, r27
    2a88:	a6 17       	cp	r26, r22
    2a8a:	b7 07       	cpc	r27, r23
    2a8c:	10 f0       	brcs	.+4      	; 0x2a92 <__udivmodhi4_ep>
    2a8e:	a6 1b       	sub	r26, r22
    2a90:	b7 0b       	sbc	r27, r23

00002a92 <__udivmodhi4_ep>:
    2a92:	88 1f       	adc	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	5a 95       	dec	r21
    2a98:	a9 f7       	brne	.-22     	; 0x2a84 <__udivmodhi4_loop>
    2a9a:	80 95       	com	r24
    2a9c:	90 95       	com	r25
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	08 95       	ret

00002aa4 <_exit>:
    2aa4:	f8 94       	cli

00002aa6 <__stop_program>:
    2aa6:	ff cf       	rjmp	.-2      	; 0x2aa6 <__stop_program>
